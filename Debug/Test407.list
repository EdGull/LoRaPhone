
Test407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ce0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08006e68  08006e68  00016e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006edc  08006edc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08006edc  08006edc  00016edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ee4  08006ee4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ee4  08006ee4  00016ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ee8  08006ee8  00016ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08006eec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000194c  200001e4  080070d0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b30  080070d0  00021b30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c14  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002dab  00000000  00000000  00033e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cf0  00000000  00000000  00036bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b98  00000000  00000000  000378c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002329b  00000000  00000000  00038460  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d530  00000000  00000000  0005b6fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5bcb  00000000  00000000  00068c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012e7f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003544  00000000  00000000  0012e874  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e4 	.word	0x200001e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006e50 	.word	0x08006e50

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	08006e50 	.word	0x08006e50

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b5b0      	push	{r4, r5, r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char str_tx[21];
  	sprintf(str_tx,"Start LoRaPhone\r\n");
 80004de:	463b      	mov	r3, r7
 80004e0:	4a1a      	ldr	r2, [pc, #104]	; (800054c <main+0x74>)
 80004e2:	461c      	mov	r4, r3
 80004e4:	4615      	mov	r5, r2
 80004e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004ea:	682b      	ldr	r3, [r5, #0]
 80004ec:	8023      	strh	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f000 fa6f 	bl	80009d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f82f 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f000 f8c1 	bl	800067c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004fa:	f000 f895 	bl	8000628 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80004fe:	f005 feab 	bl	8006258 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
//#include "main_EdGull.c"
	  	  Delay (500);
 8000502:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000506:	f000 fad5 	bl	8000ab4 <HAL_Delay>
	  	  Toggle(led_red);
 800050a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800050e:	4810      	ldr	r0, [pc, #64]	; (8000550 <main+0x78>)
 8000510:	f000 fdb7 	bl	8001082 <HAL_GPIO_TogglePin>
	  	  Toggle(led_green);
 8000514:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000518:	480d      	ldr	r0, [pc, #52]	; (8000550 <main+0x78>)
 800051a:	f000 fdb2 	bl	8001082 <HAL_GPIO_TogglePin>
	  	  Toggle(led_blue);
 800051e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000522:	480b      	ldr	r0, [pc, #44]	; (8000550 <main+0x78>)
 8000524:	f000 fdad 	bl	8001082 <HAL_GPIO_TogglePin>
	  	  Toggle(led_orange);
 8000528:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052c:	4808      	ldr	r0, [pc, #32]	; (8000550 <main+0x78>)
 800052e:	f000 fda8 	bl	8001082 <HAL_GPIO_TogglePin>
	  	  CDC_Transmit_FS((unsigned char*)str_tx, strlen(str_tx));
 8000532:	463b      	mov	r3, r7
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff fe47 	bl	80001c8 <strlen>
 800053a:	4603      	mov	r3, r0
 800053c:	b29a      	uxth	r2, r3
 800053e:	463b      	mov	r3, r7
 8000540:	4611      	mov	r1, r2
 8000542:	4618      	mov	r0, r3
 8000544:	f005 ff46 	bl	80063d4 <CDC_Transmit_FS>
	  	  Delay (500);
 8000548:	e7db      	b.n	8000502 <main+0x2a>
 800054a:	bf00      	nop
 800054c:	08006e68 	.word	0x08006e68
 8000550:	40020c00 	.word	0x40020c00

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	2230      	movs	r2, #48	; 0x30
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f006 fbb2 	bl	8006ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	4b28      	ldr	r3, [pc, #160]	; (8000620 <SystemClock_Config+0xcc>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	4a27      	ldr	r2, [pc, #156]	; (8000620 <SystemClock_Config+0xcc>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	; 0x40
 8000588:	4b25      	ldr	r3, [pc, #148]	; (8000620 <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b22      	ldr	r3, [pc, #136]	; (8000624 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a21      	ldr	r2, [pc, #132]	; (8000624 <SystemClock_Config+0xd0>)
 800059e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <SystemClock_Config+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b0:	2301      	movs	r3, #1
 80005b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ba:	2302      	movs	r3, #2
 80005bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c4:	2304      	movs	r3, #4
 80005c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005c8:	23a8      	movs	r3, #168	; 0xa8
 80005ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d0:	2307      	movs	r3, #7
 80005d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d4:	f107 0320 	add.w	r3, r7, #32
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 fef1 	bl	80023c0 <HAL_RCC_OscConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005e4:	f000 f8b8 	bl	8000758 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	230f      	movs	r3, #15
 80005ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ec:	2302      	movs	r3, #2
 80005ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2105      	movs	r1, #5
 8000606:	4618      	mov	r0, r3
 8000608:	f002 f94a 	bl	80028a0 <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000612:	f000 f8a1 	bl	8000758 <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3750      	adds	r7, #80	; 0x50
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 800062e:	4a12      	ldr	r2, [pc, #72]	; (8000678 <MX_USART2_UART_Init+0x50>)
 8000630:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000634:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000638:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 800064e:	220c      	movs	r2, #12
 8000650:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000660:	f002 fb10 	bl	8002c84 <HAL_UART_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800066a:	f000 f875 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000210 	.word	0x20000210
 8000678:	40004400 	.word	0x40004400

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
 8000696:	4b2d      	ldr	r3, [pc, #180]	; (800074c <MX_GPIO_Init+0xd0>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a2c      	ldr	r2, [pc, #176]	; (800074c <MX_GPIO_Init+0xd0>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b2a      	ldr	r3, [pc, #168]	; (800074c <MX_GPIO_Init+0xd0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	4b26      	ldr	r3, [pc, #152]	; (800074c <MX_GPIO_Init+0xd0>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a25      	ldr	r2, [pc, #148]	; (800074c <MX_GPIO_Init+0xd0>)
 80006b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <MX_GPIO_Init+0xd0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_GPIO_Init+0xd0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a1e      	ldr	r2, [pc, #120]	; (800074c <MX_GPIO_Init+0xd0>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_GPIO_Init+0xd0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_GPIO_Init+0xd0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a17      	ldr	r2, [pc, #92]	; (800074c <MX_GPIO_Init+0xd0>)
 80006f0:	f043 0308 	orr.w	r3, r3, #8
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_GPIO_Init+0xd0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0308 	and.w	r3, r3, #8
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, led_green_Pin|led_orange_Pin|led_red_Pin|led_blue_Pin, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000708:	4811      	ldr	r0, [pc, #68]	; (8000750 <MX_GPIO_Init+0xd4>)
 800070a:	f000 fca1 	bl	8001050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_blue_Pin */
  GPIO_InitStruct.Pin = button_blue_Pin;
 800070e:	2301      	movs	r3, #1
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_blue_GPIO_Port, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	480c      	ldr	r0, [pc, #48]	; (8000754 <MX_GPIO_Init+0xd8>)
 8000722:	f000 fafb 	bl	8000d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : led_green_Pin led_orange_Pin led_red_Pin led_blue_Pin */
  GPIO_InitStruct.Pin = led_green_Pin|led_orange_Pin|led_red_Pin|led_blue_Pin;
 8000726:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800072a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072c:	2301      	movs	r3, #1
 800072e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2300      	movs	r3, #0
 8000736:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_GPIO_Init+0xd4>)
 8000740:	f000 faec 	bl	8000d1c <HAL_GPIO_Init>

}
 8000744:	bf00      	nop
 8000746:	3728      	adds	r7, #40	; 0x28
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40023800 	.word	0x40023800
 8000750:	40020c00 	.word	0x40020c00
 8000754:	40020000 	.word	0x40020000

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
	...

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <HAL_MspInit+0x4c>)
 8000774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000776:	4a0f      	ldr	r2, [pc, #60]	; (80007b4 <HAL_MspInit+0x4c>)
 8000778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077c:	6453      	str	r3, [r2, #68]	; 0x44
 800077e:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <HAL_MspInit+0x4c>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <HAL_MspInit+0x4c>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000792:	4a08      	ldr	r2, [pc, #32]	; (80007b4 <HAL_MspInit+0x4c>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000798:	6413      	str	r3, [r2, #64]	; 0x40
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <HAL_MspInit+0x4c>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a28      	ldr	r2, [pc, #160]	; (8000878 <HAL_UART_MspInit+0xc0>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d149      	bne.n	800086e <HAL_UART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b27      	ldr	r3, [pc, #156]	; (800087c <HAL_UART_MspInit+0xc4>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	4a26      	ldr	r2, [pc, #152]	; (800087c <HAL_UART_MspInit+0xc4>)
 80007e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ea:	4b24      	ldr	r3, [pc, #144]	; (800087c <HAL_UART_MspInit+0xc4>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b20      	ldr	r3, [pc, #128]	; (800087c <HAL_UART_MspInit+0xc4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a1f      	ldr	r2, [pc, #124]	; (800087c <HAL_UART_MspInit+0xc4>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b1d      	ldr	r3, [pc, #116]	; (800087c <HAL_UART_MspInit+0xc4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <HAL_UART_MspInit+0xc4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a18      	ldr	r2, [pc, #96]	; (800087c <HAL_UART_MspInit+0xc4>)
 800081c:	f043 0308 	orr.w	r3, r3, #8
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <HAL_UART_MspInit+0xc4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0308 	and.w	r3, r3, #8
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800082e:	2304      	movs	r3, #4
 8000830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800083e:	2307      	movs	r3, #7
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	480d      	ldr	r0, [pc, #52]	; (8000880 <HAL_UART_MspInit+0xc8>)
 800084a:	f000 fa67 	bl	8000d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800084e:	2340      	movs	r3, #64	; 0x40
 8000850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000852:	2302      	movs	r3, #2
 8000854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085a:	2303      	movs	r3, #3
 800085c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800085e:	2307      	movs	r3, #7
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	4806      	ldr	r0, [pc, #24]	; (8000884 <HAL_UART_MspInit+0xcc>)
 800086a:	f000 fa57 	bl	8000d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800086e:	bf00      	nop
 8000870:	3728      	adds	r7, #40	; 0x28
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40004400 	.word	0x40004400
 800087c:	40023800 	.word	0x40023800
 8000880:	40020000 	.word	0x40020000
 8000884:	40020c00 	.word	0x40020c00

08000888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <HardFault_Handler+0x4>

0800089c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <MemManage_Handler+0x4>

080008a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <BusFault_Handler+0x4>

080008a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <UsageFault_Handler+0x4>

080008ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008dc:	f000 f8ca 	bl	8000a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008e8:	4802      	ldr	r0, [pc, #8]	; (80008f4 <OTG_FS_IRQHandler+0x10>)
 80008ea:	f000 fd35 	bl	8001358 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20001724 	.word	0x20001724

080008f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <_sbrk+0x50>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d102      	bne.n	800090e <_sbrk+0x16>
		heap_end = &end;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <_sbrk+0x50>)
 800090a:	4a10      	ldr	r2, [pc, #64]	; (800094c <_sbrk+0x54>)
 800090c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <_sbrk+0x50>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <_sbrk+0x50>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4413      	add	r3, r2
 800091c:	466a      	mov	r2, sp
 800091e:	4293      	cmp	r3, r2
 8000920:	d907      	bls.n	8000932 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000922:	f006 f999 	bl	8006c58 <__errno>
 8000926:	4602      	mov	r2, r0
 8000928:	230c      	movs	r3, #12
 800092a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800092c:	f04f 33ff 	mov.w	r3, #4294967295
 8000930:	e006      	b.n	8000940 <_sbrk+0x48>
	}

	heap_end += incr;
 8000932:	4b05      	ldr	r3, [pc, #20]	; (8000948 <_sbrk+0x50>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4413      	add	r3, r2
 800093a:	4a03      	ldr	r2, [pc, #12]	; (8000948 <_sbrk+0x50>)
 800093c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800093e:	68fb      	ldr	r3, [r7, #12]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000200 	.word	0x20000200
 800094c:	20001b30 	.word	0x20001b30

08000950 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <SystemInit+0x28>)
 8000956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800095a:	4a07      	ldr	r2, [pc, #28]	; (8000978 <SystemInit+0x28>)
 800095c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000960:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <SystemInit+0x28>)
 8000966:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800096a:	609a      	str	r2, [r3, #8]
#endif
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800097c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000980:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000982:	e003      	b.n	800098c <LoopCopyDataInit>

08000984 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000986:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000988:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800098a:	3104      	adds	r1, #4

0800098c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800098c:	480b      	ldr	r0, [pc, #44]	; (80009bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000990:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000992:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000994:	d3f6      	bcc.n	8000984 <CopyDataInit>
  ldr  r2, =_sbss
 8000996:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000998:	e002      	b.n	80009a0 <LoopFillZerobss>

0800099a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800099a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800099c:	f842 3b04 	str.w	r3, [r2], #4

080009a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009a4:	d3f9      	bcc.n	800099a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009a6:	f7ff ffd3 	bl	8000950 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009aa:	f006 f95b 	bl	8006c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ae:	f7ff fd93 	bl	80004d8 <main>
  bx  lr    
 80009b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009b4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80009b8:	08006eec 	.word	0x08006eec
  ldr  r0, =_sdata
 80009bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80009c0:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 80009c4:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 80009c8:	20001b30 	.word	0x20001b30

080009cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC_IRQHandler>
	...

080009d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <HAL_Init+0x40>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <HAL_Init+0x40>)
 80009da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009e0:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <HAL_Init+0x40>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <HAL_Init+0x40>)
 80009e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_Init+0x40>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a07      	ldr	r2, [pc, #28]	; (8000a10 <HAL_Init+0x40>)
 80009f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f8:	2003      	movs	r0, #3
 80009fa:	f000 f94d 	bl	8000c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f000 f808 	bl	8000a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a04:	f7ff feb0 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023c00 	.word	0x40023c00

08000a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <HAL_InitTick+0x54>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_InitTick+0x58>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f965 	bl	8000d02 <HAL_SYSTICK_Config>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e00e      	b.n	8000a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b0f      	cmp	r3, #15
 8000a46:	d80a      	bhi.n	8000a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a50:	f000 f92d 	bl	8000cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a54:	4a06      	ldr	r2, [pc, #24]	; (8000a70 <HAL_InitTick+0x5c>)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	e000      	b.n	8000a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	20000004 	.word	0x20000004

08000a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_IncTick+0x20>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_IncTick+0x24>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <HAL_IncTick+0x24>)
 8000a86:	6013      	str	r3, [r2, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	20000008 	.word	0x20000008
 8000a98:	20000250 	.word	0x20000250

08000a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <HAL_GetTick+0x14>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000250 	.word	0x20000250

08000ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000abc:	f7ff ffee 	bl	8000a9c <HAL_GetTick>
 8000ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000acc:	d005      	beq.n	8000ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_Delay+0x40>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ada:	bf00      	nop
 8000adc:	f7ff ffde 	bl	8000a9c <HAL_GetTick>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d8f7      	bhi.n	8000adc <HAL_Delay+0x28>
  {
  }
}
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000008 	.word	0x20000008

08000af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b14:	4013      	ands	r3, r2
 8000b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2a:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	60d3      	str	r3, [r2, #12]
}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <__NVIC_GetPriorityGrouping+0x18>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	f003 0307 	and.w	r3, r3, #7
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	db0b      	blt.n	8000b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	f003 021f 	and.w	r2, r3, #31
 8000b74:	4907      	ldr	r1, [pc, #28]	; (8000b94 <__NVIC_EnableIRQ+0x38>)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	095b      	lsrs	r3, r3, #5
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	; (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	; (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	; 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	; 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c64:	d301      	bcc.n	8000c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00f      	b.n	8000c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <SysTick_Config+0x40>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c72:	210f      	movs	r1, #15
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295
 8000c78:	f7ff ff8e 	bl	8000b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <SysTick_Config+0x40>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <SysTick_Config+0x40>)
 8000c84:	2207      	movs	r2, #7
 8000c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	e000e010 	.word	0xe000e010

08000c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ff29 	bl	8000af8 <__NVIC_SetPriorityGrouping>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc0:	f7ff ff3e 	bl	8000b40 <__NVIC_GetPriorityGrouping>
 8000cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	6978      	ldr	r0, [r7, #20]
 8000ccc:	f7ff ff8e 	bl	8000bec <NVIC_EncodePriority>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff5d 	bl	8000b98 <__NVIC_SetPriority>
}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff31 	bl	8000b5c <__NVIC_EnableIRQ>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ffa2 	bl	8000c54 <SysTick_Config>
 8000d10:	4603      	mov	r3, r0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
 8000d36:	e16b      	b.n	8001010 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d38:	2201      	movs	r2, #1
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f040 815a 	bne.w	800100a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d00b      	beq.n	8000d76 <HAL_GPIO_Init+0x5a>
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d007      	beq.n	8000d76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d6a:	2b11      	cmp	r3, #17
 8000d6c:	d003      	beq.n	8000d76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2b12      	cmp	r3, #18
 8000d74:	d130      	bne.n	8000dd8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	2203      	movs	r2, #3
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	68da      	ldr	r2, [r3, #12]
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dac:	2201      	movs	r2, #1
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	091b      	lsrs	r3, r3, #4
 8000dc2:	f003 0201 	and.w	r2, r3, #1
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2203      	movs	r2, #3
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	689a      	ldr	r2, [r3, #8]
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0xfc>
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2b12      	cmp	r3, #18
 8000e16:	d123      	bne.n	8000e60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	08da      	lsrs	r2, r3, #3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3208      	adds	r2, #8
 8000e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	f003 0307 	and.w	r3, r3, #7
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	220f      	movs	r2, #15
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	691a      	ldr	r2, [r3, #16]
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	08da      	lsrs	r2, r3, #3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3208      	adds	r2, #8
 8000e5a:	69b9      	ldr	r1, [r7, #24]
 8000e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0203 	and.w	r2, r3, #3
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	f000 80b4 	beq.w	800100a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b5f      	ldr	r3, [pc, #380]	; (8001024 <HAL_GPIO_Init+0x308>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	4a5e      	ldr	r2, [pc, #376]	; (8001024 <HAL_GPIO_Init+0x308>)
 8000eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb2:	4b5c      	ldr	r3, [pc, #368]	; (8001024 <HAL_GPIO_Init+0x308>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ebe:	4a5a      	ldr	r2, [pc, #360]	; (8001028 <HAL_GPIO_Init+0x30c>)
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a51      	ldr	r2, [pc, #324]	; (800102c <HAL_GPIO_Init+0x310>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d02b      	beq.n	8000f42 <HAL_GPIO_Init+0x226>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a50      	ldr	r2, [pc, #320]	; (8001030 <HAL_GPIO_Init+0x314>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d025      	beq.n	8000f3e <HAL_GPIO_Init+0x222>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a4f      	ldr	r2, [pc, #316]	; (8001034 <HAL_GPIO_Init+0x318>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d01f      	beq.n	8000f3a <HAL_GPIO_Init+0x21e>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a4e      	ldr	r2, [pc, #312]	; (8001038 <HAL_GPIO_Init+0x31c>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d019      	beq.n	8000f36 <HAL_GPIO_Init+0x21a>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4d      	ldr	r2, [pc, #308]	; (800103c <HAL_GPIO_Init+0x320>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d013      	beq.n	8000f32 <HAL_GPIO_Init+0x216>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4c      	ldr	r2, [pc, #304]	; (8001040 <HAL_GPIO_Init+0x324>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d00d      	beq.n	8000f2e <HAL_GPIO_Init+0x212>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4b      	ldr	r2, [pc, #300]	; (8001044 <HAL_GPIO_Init+0x328>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d007      	beq.n	8000f2a <HAL_GPIO_Init+0x20e>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4a      	ldr	r2, [pc, #296]	; (8001048 <HAL_GPIO_Init+0x32c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d101      	bne.n	8000f26 <HAL_GPIO_Init+0x20a>
 8000f22:	2307      	movs	r3, #7
 8000f24:	e00e      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f26:	2308      	movs	r3, #8
 8000f28:	e00c      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f2a:	2306      	movs	r3, #6
 8000f2c:	e00a      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f2e:	2305      	movs	r3, #5
 8000f30:	e008      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f32:	2304      	movs	r3, #4
 8000f34:	e006      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f36:	2303      	movs	r3, #3
 8000f38:	e004      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	e002      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e000      	b.n	8000f44 <HAL_GPIO_Init+0x228>
 8000f42:	2300      	movs	r3, #0
 8000f44:	69fa      	ldr	r2, [r7, #28]
 8000f46:	f002 0203 	and.w	r2, r2, #3
 8000f4a:	0092      	lsls	r2, r2, #2
 8000f4c:	4093      	lsls	r3, r2
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f54:	4934      	ldr	r1, [pc, #208]	; (8001028 <HAL_GPIO_Init+0x30c>)
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	089b      	lsrs	r3, r3, #2
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f62:	4b3a      	ldr	r3, [pc, #232]	; (800104c <HAL_GPIO_Init+0x330>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f86:	4a31      	ldr	r2, [pc, #196]	; (800104c <HAL_GPIO_Init+0x330>)
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f8c:	4b2f      	ldr	r3, [pc, #188]	; (800104c <HAL_GPIO_Init+0x330>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d003      	beq.n	8000fb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fb0:	4a26      	ldr	r2, [pc, #152]	; (800104c <HAL_GPIO_Init+0x330>)
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fb6:	4b25      	ldr	r3, [pc, #148]	; (800104c <HAL_GPIO_Init+0x330>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fda:	4a1c      	ldr	r2, [pc, #112]	; (800104c <HAL_GPIO_Init+0x330>)
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	; (800104c <HAL_GPIO_Init+0x330>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001004:	4a11      	ldr	r2, [pc, #68]	; (800104c <HAL_GPIO_Init+0x330>)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3301      	adds	r3, #1
 800100e:	61fb      	str	r3, [r7, #28]
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	2b0f      	cmp	r3, #15
 8001014:	f67f ae90 	bls.w	8000d38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001018:	bf00      	nop
 800101a:	3724      	adds	r7, #36	; 0x24
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	40023800 	.word	0x40023800
 8001028:	40013800 	.word	0x40013800
 800102c:	40020000 	.word	0x40020000
 8001030:	40020400 	.word	0x40020400
 8001034:	40020800 	.word	0x40020800
 8001038:	40020c00 	.word	0x40020c00
 800103c:	40021000 	.word	0x40021000
 8001040:	40021400 	.word	0x40021400
 8001044:	40021800 	.word	0x40021800
 8001048:	40021c00 	.word	0x40021c00
 800104c:	40013c00 	.word	0x40013c00

08001050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]
 800105c:	4613      	mov	r3, r2
 800105e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001060:	787b      	ldrb	r3, [r7, #1]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001066:	887a      	ldrh	r2, [r7, #2]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800106c:	e003      	b.n	8001076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800106e:	887b      	ldrh	r3, [r7, #2]
 8001070:	041a      	lsls	r2, r3, #16
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	619a      	str	r2, [r3, #24]
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	460b      	mov	r3, r1
 800108c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	695a      	ldr	r2, [r3, #20]
 8001092:	887b      	ldrh	r3, [r7, #2]
 8001094:	401a      	ands	r2, r3
 8001096:	887b      	ldrh	r3, [r7, #2]
 8001098:	429a      	cmp	r2, r3
 800109a:	d104      	bne.n	80010a6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800109c:	887b      	ldrh	r3, [r7, #2]
 800109e:	041a      	lsls	r2, r3, #16
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80010a4:	e002      	b.n	80010ac <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80010a6:	887a      	ldrh	r2, [r7, #2]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	619a      	str	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ba:	b08f      	sub	sp, #60	; 0x3c
 80010bc:	af0a      	add	r7, sp, #40	; 0x28
 80010be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e10f      	b.n	80012ea <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d106      	bne.n	80010ea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f005 fabb 	bl	8006660 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2203      	movs	r2, #3
 80010ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d102      	bne.n	8001104 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f002 fa9a 	bl	8003642 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	687e      	ldr	r6, [r7, #4]
 8001116:	466d      	mov	r5, sp
 8001118:	f106 0410 	add.w	r4, r6, #16
 800111c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800111e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001122:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001124:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001128:	e885 0003 	stmia.w	r5, {r0, r1}
 800112c:	1d33      	adds	r3, r6, #4
 800112e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001130:	6838      	ldr	r0, [r7, #0]
 8001132:	f002 f971 	bl	8003418 <USB_CoreInit>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d005      	beq.n	8001148 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2202      	movs	r2, #2
 8001140:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e0d0      	b.n	80012ea <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f002 fa88 	bl	8003664 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001154:	2300      	movs	r3, #0
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	e04a      	b.n	80011f0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800115a:	7bfa      	ldrb	r2, [r7, #15]
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	4613      	mov	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	1a9b      	subs	r3, r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	440b      	add	r3, r1
 8001168:	333d      	adds	r3, #61	; 0x3d
 800116a:	2201      	movs	r2, #1
 800116c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800116e:	7bfa      	ldrb	r2, [r7, #15]
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	4613      	mov	r3, r2
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	1a9b      	subs	r3, r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	440b      	add	r3, r1
 800117c:	333c      	adds	r3, #60	; 0x3c
 800117e:	7bfa      	ldrb	r2, [r7, #15]
 8001180:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001182:	7bfa      	ldrb	r2, [r7, #15]
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	b298      	uxth	r0, r3
 8001188:	6879      	ldr	r1, [r7, #4]
 800118a:	4613      	mov	r3, r2
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	1a9b      	subs	r3, r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	440b      	add	r3, r1
 8001194:	3342      	adds	r3, #66	; 0x42
 8001196:	4602      	mov	r2, r0
 8001198:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800119a:	7bfa      	ldrb	r2, [r7, #15]
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	1a9b      	subs	r3, r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	333f      	adds	r3, #63	; 0x3f
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011ae:	7bfa      	ldrb	r2, [r7, #15]
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	4613      	mov	r3, r2
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	1a9b      	subs	r3, r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	440b      	add	r3, r1
 80011bc:	3344      	adds	r3, #68	; 0x44
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011c2:	7bfa      	ldrb	r2, [r7, #15]
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	4613      	mov	r3, r2
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	1a9b      	subs	r3, r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	440b      	add	r3, r1
 80011d0:	3348      	adds	r3, #72	; 0x48
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011d6:	7bfa      	ldrb	r2, [r7, #15]
 80011d8:	6879      	ldr	r1, [r7, #4]
 80011da:	4613      	mov	r3, r2
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	1a9b      	subs	r3, r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	440b      	add	r3, r1
 80011e4:	3350      	adds	r3, #80	; 0x50
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	3301      	adds	r3, #1
 80011ee:	73fb      	strb	r3, [r7, #15]
 80011f0:	7bfa      	ldrb	r2, [r7, #15]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d3af      	bcc.n	800115a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	73fb      	strb	r3, [r7, #15]
 80011fe:	e044      	b.n	800128a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001200:	7bfa      	ldrb	r2, [r7, #15]
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	4613      	mov	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	1a9b      	subs	r3, r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	440b      	add	r3, r1
 800120e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001216:	7bfa      	ldrb	r2, [r7, #15]
 8001218:	6879      	ldr	r1, [r7, #4]
 800121a:	4613      	mov	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	1a9b      	subs	r3, r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001228:	7bfa      	ldrb	r2, [r7, #15]
 800122a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800122c:	7bfa      	ldrb	r2, [r7, #15]
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	1a9b      	subs	r3, r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	440b      	add	r3, r1
 800123a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800123e:	2200      	movs	r2, #0
 8001240:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001242:	7bfa      	ldrb	r2, [r7, #15]
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	1a9b      	subs	r3, r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	440b      	add	r3, r1
 8001250:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001258:	7bfa      	ldrb	r2, [r7, #15]
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	1a9b      	subs	r3, r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800126e:	7bfa      	ldrb	r2, [r7, #15]
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	4613      	mov	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	1a9b      	subs	r3, r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	440b      	add	r3, r1
 800127c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	3301      	adds	r3, #1
 8001288:	73fb      	strb	r3, [r7, #15]
 800128a:	7bfa      	ldrb	r2, [r7, #15]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	429a      	cmp	r2, r3
 8001292:	d3b5      	bcc.n	8001200 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	603b      	str	r3, [r7, #0]
 800129a:	687e      	ldr	r6, [r7, #4]
 800129c:	466d      	mov	r5, sp
 800129e:	f106 0410 	add.w	r4, r6, #16
 80012a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80012b2:	1d33      	adds	r3, r6, #4
 80012b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012b6:	6838      	ldr	r0, [r7, #0]
 80012b8:	f002 f9fe 	bl	80036b8 <USB_DevInit>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d005      	beq.n	80012ce <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2202      	movs	r2, #2
 80012c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00d      	b.n	80012ea <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2201      	movs	r2, #1
 80012da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f003 fa3d 	bl	8004762 <USB_DevDisconnect>

  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012f2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b084      	sub	sp, #16
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001306:	2b01      	cmp	r3, #1
 8001308:	d101      	bne.n	800130e <HAL_PCD_Start+0x1c>
 800130a:	2302      	movs	r3, #2
 800130c:	e020      	b.n	8001350 <HAL_PCD_Start+0x5e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131a:	2b01      	cmp	r3, #1
 800131c:	d109      	bne.n	8001332 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001322:	2b01      	cmp	r3, #1
 8001324:	d005      	beq.n	8001332 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800132a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f003 f9fb 	bl	8004732 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f002 f96d 	bl	8003620 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b08d      	sub	sp, #52	; 0x34
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001366:	6a3b      	ldr	r3, [r7, #32]
 8001368:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f003 faa2 	bl	80048b8 <USB_GetMode>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	f040 839d 	bne.w	8001ab6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f003 fa06 	bl	8004792 <USB_ReadInterrupts>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 8393 	beq.w	8001ab4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f003 f9fd 	bl	8004792 <USB_ReadInterrupts>
 8001398:	4603      	mov	r3, r0
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d107      	bne.n	80013b2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	695a      	ldr	r2, [r3, #20]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f002 0202 	and.w	r2, r2, #2
 80013b0:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f003 f9eb 	bl	8004792 <USB_ReadInterrupts>
 80013bc:	4603      	mov	r3, r0
 80013be:	f003 0310 	and.w	r3, r3, #16
 80013c2:	2b10      	cmp	r3, #16
 80013c4:	d161      	bne.n	800148a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	699a      	ldr	r2, [r3, #24]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 0210 	bic.w	r2, r2, #16
 80013d4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80013d6:	6a3b      	ldr	r3, [r7, #32]
 80013d8:	6a1b      	ldr	r3, [r3, #32]
 80013da:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	f003 020f 	and.w	r2, r3, #15
 80013e2:	4613      	mov	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	1a9b      	subs	r3, r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	3304      	adds	r3, #4
 80013f4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	0c5b      	lsrs	r3, r3, #17
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d124      	bne.n	800144c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001408:	4013      	ands	r3, r2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d035      	beq.n	800147a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	091b      	lsrs	r3, r3, #4
 8001416:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001418:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800141c:	b29b      	uxth	r3, r3
 800141e:	461a      	mov	r2, r3
 8001420:	6a38      	ldr	r0, [r7, #32]
 8001422:	f003 f863 	bl	80044ec <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	68da      	ldr	r2, [r3, #12]
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	091b      	lsrs	r3, r3, #4
 800142e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001432:	441a      	add	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	699a      	ldr	r2, [r3, #24]
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	091b      	lsrs	r3, r3, #4
 8001440:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001444:	441a      	add	r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	619a      	str	r2, [r3, #24]
 800144a:	e016      	b.n	800147a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	0c5b      	lsrs	r3, r3, #17
 8001450:	f003 030f 	and.w	r3, r3, #15
 8001454:	2b06      	cmp	r3, #6
 8001456:	d110      	bne.n	800147a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800145e:	2208      	movs	r2, #8
 8001460:	4619      	mov	r1, r3
 8001462:	6a38      	ldr	r0, [r7, #32]
 8001464:	f003 f842 	bl	80044ec <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	699a      	ldr	r2, [r3, #24]
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	091b      	lsrs	r3, r3, #4
 8001470:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001474:	441a      	add	r2, r3
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	699a      	ldr	r2, [r3, #24]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f042 0210 	orr.w	r2, r2, #16
 8001488:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f003 f97f 	bl	8004792 <USB_ReadInterrupts>
 8001494:	4603      	mov	r3, r0
 8001496:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800149a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800149e:	d16e      	bne.n	800157e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f003 f985 	bl	80047b8 <USB_ReadDevAllOutEpInterrupt>
 80014ae:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80014b0:	e062      	b.n	8001578 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80014b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d057      	beq.n	800156c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	4611      	mov	r1, r2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f003 f9aa 	bl	8004820 <USB_ReadDevOutEPInterrupt>
 80014cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00c      	beq.n	80014f2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	015a      	lsls	r2, r3, #5
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	4413      	add	r3, r2
 80014e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014e4:	461a      	mov	r2, r3
 80014e6:	2301      	movs	r3, #1
 80014e8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 fdb1 	bl	8002054 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	f003 0308 	and.w	r3, r3, #8
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00c      	beq.n	8001516 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	015a      	lsls	r2, r3, #5
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	4413      	add	r3, r2
 8001504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001508:	461a      	mov	r2, r3
 800150a:	2308      	movs	r3, #8
 800150c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800150e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 feab 	bl	800226c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	f003 0310 	and.w	r3, r3, #16
 800151c:	2b00      	cmp	r3, #0
 800151e:	d008      	beq.n	8001532 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	015a      	lsls	r2, r3, #5
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	4413      	add	r3, r2
 8001528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800152c:	461a      	mov	r2, r3
 800152e:	2310      	movs	r3, #16
 8001530:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	f003 0320 	and.w	r3, r3, #32
 8001538:	2b00      	cmp	r3, #0
 800153a:	d008      	beq.n	800154e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	015a      	lsls	r2, r3, #5
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	4413      	add	r3, r2
 8001544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001548:	461a      	mov	r2, r3
 800154a:	2320      	movs	r3, #32
 800154c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d009      	beq.n	800156c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	015a      	lsls	r2, r3, #5
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	4413      	add	r3, r2
 8001560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001564:	461a      	mov	r2, r3
 8001566:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800156a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	3301      	adds	r3, #1
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001574:	085b      	lsrs	r3, r3, #1
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157a:	2b00      	cmp	r3, #0
 800157c:	d199      	bne.n	80014b2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f003 f905 	bl	8004792 <USB_ReadInterrupts>
 8001588:	4603      	mov	r3, r0
 800158a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800158e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001592:	f040 80c0 	bne.w	8001716 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f003 f926 	bl	80047ec <USB_ReadDevAllInEpInterrupt>
 80015a0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80015a6:	e0b2      	b.n	800170e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 80a7 	beq.w	8001702 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	4611      	mov	r1, r2
 80015be:	4618      	mov	r0, r3
 80015c0:	f003 f94c 	bl	800485c <USB_ReadDevInEPInterrupt>
 80015c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d057      	beq.n	8001680 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	2201      	movs	r2, #1
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69f9      	ldr	r1, [r7, #28]
 80015ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80015f0:	4013      	ands	r3, r2
 80015f2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	015a      	lsls	r2, r3, #5
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	4413      	add	r3, r2
 80015fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001600:	461a      	mov	r2, r3
 8001602:	2301      	movs	r3, #1
 8001604:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d132      	bne.n	8001674 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001612:	4613      	mov	r3, r2
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	1a9b      	subs	r3, r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	440b      	add	r3, r1
 800161c:	3348      	adds	r3, #72	; 0x48
 800161e:	6819      	ldr	r1, [r3, #0]
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001624:	4613      	mov	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	1a9b      	subs	r3, r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4403      	add	r3, r0
 800162e:	3344      	adds	r3, #68	; 0x44
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4419      	add	r1, r3
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001638:	4613      	mov	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	1a9b      	subs	r3, r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4403      	add	r3, r0
 8001642:	3348      	adds	r3, #72	; 0x48
 8001644:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	2b00      	cmp	r3, #0
 800164a:	d113      	bne.n	8001674 <HAL_PCD_IRQHandler+0x31c>
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001650:	4613      	mov	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	1a9b      	subs	r3, r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	3350      	adds	r3, #80	; 0x50
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d108      	bne.n	8001674 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6818      	ldr	r0, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800166c:	461a      	mov	r2, r3
 800166e:	2101      	movs	r1, #1
 8001670:	f003 f954 	bl	800491c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	b2db      	uxtb	r3, r3
 8001678:	4619      	mov	r1, r3
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f005 f871 	bl	8006762 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	2b00      	cmp	r3, #0
 8001688:	d008      	beq.n	800169c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	015a      	lsls	r2, r3, #5
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	4413      	add	r3, r2
 8001692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001696:	461a      	mov	r2, r3
 8001698:	2308      	movs	r3, #8
 800169a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	f003 0310 	and.w	r3, r3, #16
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d008      	beq.n	80016b8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	015a      	lsls	r2, r3, #5
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	4413      	add	r3, r2
 80016ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016b2:	461a      	mov	r2, r3
 80016b4:	2310      	movs	r3, #16
 80016b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d008      	beq.n	80016d4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	015a      	lsls	r2, r3, #5
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	4413      	add	r3, r2
 80016ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ce:	461a      	mov	r2, r3
 80016d0:	2340      	movs	r3, #64	; 0x40
 80016d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d008      	beq.n	80016f0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	015a      	lsls	r2, r3, #5
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	4413      	add	r3, r2
 80016e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ea:	461a      	mov	r2, r3
 80016ec:	2302      	movs	r3, #2
 80016ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 fc1b 	bl	8001f38 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	3301      	adds	r3, #1
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170a:	085b      	lsrs	r3, r3, #1
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800170e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001710:	2b00      	cmp	r3, #0
 8001712:	f47f af49 	bne.w	80015a8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f003 f839 	bl	8004792 <USB_ReadInterrupts>
 8001720:	4603      	mov	r3, r0
 8001722:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001726:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800172a:	d122      	bne.n	8001772 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	69fa      	ldr	r2, [r7, #28]
 8001736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800173a:	f023 0301 	bic.w	r3, r3, #1
 800173e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001746:	2b01      	cmp	r3, #1
 8001748:	d108      	bne.n	800175c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001752:	2100      	movs	r1, #0
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 fe27 	bl	80023a8 <HAL_PCDEx_LPM_Callback>
 800175a:	e002      	b.n	8001762 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f005 f877 	bl	8006850 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	695a      	ldr	r2, [r3, #20]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001770:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f003 f80b 	bl	8004792 <USB_ReadInterrupts>
 800177c:	4603      	mov	r3, r0
 800177e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001786:	d112      	bne.n	80017ae <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b01      	cmp	r3, #1
 8001796:	d102      	bne.n	800179e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f005 f833 	bl	8006804 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	695a      	ldr	r2, [r3, #20]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80017ac:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f002 ffed 	bl	8004792 <USB_ReadInterrupts>
 80017b8:	4603      	mov	r3, r0
 80017ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017c2:	f040 80c7 	bne.w	8001954 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017d4:	f023 0301 	bic.w	r3, r3, #1
 80017d8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2110      	movs	r1, #16
 80017e0:	4618      	mov	r0, r3
 80017e2:	f002 f8cd 	bl	8003980 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017ea:	e056      	b.n	800189a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ee:	015a      	lsls	r2, r3, #5
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	4413      	add	r3, r2
 80017f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017f8:	461a      	mov	r2, r3
 80017fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017fe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001802:	015a      	lsls	r2, r3, #5
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	4413      	add	r3, r2
 8001808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001810:	0151      	lsls	r1, r2, #5
 8001812:	69fa      	ldr	r2, [r7, #28]
 8001814:	440a      	add	r2, r1
 8001816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800181a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800181e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001822:	015a      	lsls	r2, r3, #5
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	4413      	add	r3, r2
 8001828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001830:	0151      	lsls	r1, r2, #5
 8001832:	69fa      	ldr	r2, [r7, #28]
 8001834:	440a      	add	r2, r1
 8001836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800183a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800183e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001842:	015a      	lsls	r2, r3, #5
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	4413      	add	r3, r2
 8001848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800184c:	461a      	mov	r2, r3
 800184e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001852:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001856:	015a      	lsls	r2, r3, #5
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	4413      	add	r3, r2
 800185c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001864:	0151      	lsls	r1, r2, #5
 8001866:	69fa      	ldr	r2, [r7, #28]
 8001868:	440a      	add	r2, r1
 800186a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800186e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001872:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001876:	015a      	lsls	r2, r3, #5
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	4413      	add	r3, r2
 800187c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001884:	0151      	lsls	r1, r2, #5
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	440a      	add	r2, r1
 800188a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800188e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001892:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001896:	3301      	adds	r3, #1
 8001898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d3a3      	bcc.n	80017ec <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018b2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80018b6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d016      	beq.n	80018ee <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018d0:	f043 030b 	orr.w	r3, r3, #11
 80018d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e0:	69fa      	ldr	r2, [r7, #28]
 80018e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018e6:	f043 030b 	orr.w	r3, r3, #11
 80018ea:	6453      	str	r3, [r2, #68]	; 0x44
 80018ec:	e015      	b.n	800191a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	69fa      	ldr	r2, [r7, #28]
 80018f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001900:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001904:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	69fa      	ldr	r2, [r7, #28]
 8001910:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001914:	f043 030b 	orr.w	r3, r3, #11
 8001918:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	69fa      	ldr	r2, [r7, #28]
 8001924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001928:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800192c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6818      	ldr	r0, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800193e:	461a      	mov	r2, r3
 8001940:	f002 ffec 	bl	800491c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	695a      	ldr	r2, [r3, #20]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001952:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f002 ff1a 	bl	8004792 <USB_ReadInterrupts>
 800195e:	4603      	mov	r3, r0
 8001960:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001968:	d124      	bne.n	80019b4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f002 ffb0 	bl	80048d4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f002 f862 	bl	8003a42 <USB_GetDevSpeed>
 800197e:	4603      	mov	r3, r0
 8001980:	461a      	mov	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681c      	ldr	r4, [r3, #0]
 800198a:	f001 f947 	bl	8002c1c <HAL_RCC_GetHCLKFreq>
 800198e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001994:	b2db      	uxtb	r3, r3
 8001996:	461a      	mov	r2, r3
 8001998:	4620      	mov	r0, r4
 800199a:	f001 fd9f 	bl	80034dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f004 ff07 	bl	80067b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	695a      	ldr	r2, [r3, #20]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80019b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f002 feea 	bl	8004792 <USB_ReadInterrupts>
 80019be:	4603      	mov	r3, r0
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d10a      	bne.n	80019de <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f004 fee4 	bl	8006796 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	695a      	ldr	r2, [r3, #20]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f002 0208 	and.w	r2, r2, #8
 80019dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f002 fed5 	bl	8004792 <USB_ReadInterrupts>
 80019e8:	4603      	mov	r3, r0
 80019ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019f2:	d10f      	bne.n	8001a14 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	4619      	mov	r1, r3
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f004 ff46 	bl	8006890 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	695a      	ldr	r2, [r3, #20]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f002 feba 	bl	8004792 <USB_ReadInterrupts>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a28:	d10f      	bne.n	8001a4a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	4619      	mov	r1, r3
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f004 ff19 	bl	800686c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695a      	ldr	r2, [r3, #20]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001a48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f002 fe9f 	bl	8004792 <USB_ReadInterrupts>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a5e:	d10a      	bne.n	8001a76 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f004 ff27 	bl	80068b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	695a      	ldr	r2, [r3, #20]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f002 fe89 	bl	8004792 <USB_ReadInterrupts>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d115      	bne.n	8001ab6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d002      	beq.n	8001aa2 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f004 ff17 	bl	80068d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6859      	ldr	r1, [r3, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	e000      	b.n	8001ab6 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001ab4:	bf00      	nop
    }
  }
}
 8001ab6:	3734      	adds	r7, #52	; 0x34
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd90      	pop	{r4, r7, pc}

08001abc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d101      	bne.n	8001ad6 <HAL_PCD_SetAddress+0x1a>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e013      	b.n	8001afe <HAL_PCD_SetAddress+0x42>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	78fa      	ldrb	r2, [r7, #3]
 8001ae2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	78fa      	ldrb	r2, [r7, #3]
 8001aec:	4611      	mov	r1, r2
 8001aee:	4618      	mov	r0, r3
 8001af0:	f002 fdf9 	bl	80046e6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b084      	sub	sp, #16
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	4608      	mov	r0, r1
 8001b10:	4611      	mov	r1, r2
 8001b12:	461a      	mov	r2, r3
 8001b14:	4603      	mov	r3, r0
 8001b16:	70fb      	strb	r3, [r7, #3]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	803b      	strh	r3, [r7, #0]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	da0f      	bge.n	8001b4c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b2c:	78fb      	ldrb	r3, [r7, #3]
 8001b2e:	f003 020f 	and.w	r2, r3, #15
 8001b32:	4613      	mov	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	1a9b      	subs	r3, r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	3338      	adds	r3, #56	; 0x38
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	4413      	add	r3, r2
 8001b40:	3304      	adds	r3, #4
 8001b42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2201      	movs	r2, #1
 8001b48:	705a      	strb	r2, [r3, #1]
 8001b4a:	e00f      	b.n	8001b6c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	f003 020f 	and.w	r2, r3, #15
 8001b52:	4613      	mov	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	1a9b      	subs	r3, r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	3304      	adds	r3, #4
 8001b64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b78:	883a      	ldrh	r2, [r7, #0]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	78ba      	ldrb	r2, [r7, #2]
 8001b82:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	785b      	ldrb	r3, [r3, #1]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d004      	beq.n	8001b96 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b96:	78bb      	ldrb	r3, [r7, #2]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d102      	bne.n	8001ba2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <HAL_PCD_EP_Open+0xaa>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e00e      	b.n	8001bce <HAL_PCD_EP_Open+0xc8>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68f9      	ldr	r1, [r7, #12]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f001 ff64 	bl	8003a8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001bcc:	7afb      	ldrb	r3, [r7, #11]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	460b      	mov	r3, r1
 8001be0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001be2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	da0f      	bge.n	8001c0a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	f003 020f 	and.w	r2, r3, #15
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	1a9b      	subs	r3, r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	3338      	adds	r3, #56	; 0x38
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3304      	adds	r3, #4
 8001c00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2201      	movs	r2, #1
 8001c06:	705a      	strb	r2, [r3, #1]
 8001c08:	e00f      	b.n	8001c2a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	f003 020f 	and.w	r2, r3, #15
 8001c10:	4613      	mov	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	1a9b      	subs	r3, r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	4413      	add	r3, r2
 8001c20:	3304      	adds	r3, #4
 8001c22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	f003 030f 	and.w	r3, r3, #15
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <HAL_PCD_EP_Close+0x6e>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e00e      	b.n	8001c62 <HAL_PCD_EP_Close+0x8c>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68f9      	ldr	r1, [r7, #12]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f001 ffa2 	bl	8003b9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b086      	sub	sp, #24
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	60f8      	str	r0, [r7, #12]
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	460b      	mov	r3, r1
 8001c78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c7a:	7afb      	ldrb	r3, [r7, #11]
 8001c7c:	f003 020f 	and.w	r2, r3, #15
 8001c80:	4613      	mov	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	1a9b      	subs	r3, r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	4413      	add	r3, r2
 8001c90:	3304      	adds	r3, #4
 8001c92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cac:	7afb      	ldrb	r3, [r7, #11]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d102      	bne.n	8001cc6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cc6:	7afb      	ldrb	r3, [r7, #11]
 8001cc8:	f003 030f 	and.w	r3, r3, #15
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d109      	bne.n	8001ce4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6818      	ldr	r0, [r3, #0]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	461a      	mov	r2, r3
 8001cdc:	6979      	ldr	r1, [r7, #20]
 8001cde:	f002 fa7d 	bl	80041dc <USB_EP0StartXfer>
 8001ce2:	e008      	b.n	8001cf6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6818      	ldr	r0, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	6979      	ldr	r1, [r7, #20]
 8001cf2:	f002 f82f 	bl	8003d54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	f003 020f 	and.w	r2, r3, #15
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	1a9b      	subs	r3, r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d40:	7afb      	ldrb	r3, [r7, #11]
 8001d42:	f003 020f 	and.w	r2, r3, #15
 8001d46:	4613      	mov	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	1a9b      	subs	r3, r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	3338      	adds	r3, #56	; 0x38
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	4413      	add	r3, r2
 8001d54:	3304      	adds	r3, #4
 8001d56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	2200      	movs	r2, #0
 8001d68:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d70:	7afb      	ldrb	r3, [r7, #11]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d102      	bne.n	8001d8a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d8a:	7afb      	ldrb	r3, [r7, #11]
 8001d8c:	f003 030f 	and.w	r3, r3, #15
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d109      	bne.n	8001da8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6818      	ldr	r0, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	6979      	ldr	r1, [r7, #20]
 8001da2:	f002 fa1b 	bl	80041dc <USB_EP0StartXfer>
 8001da6:	e008      	b.n	8001dba <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6818      	ldr	r0, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	6979      	ldr	r1, [r7, #20]
 8001db6:	f001 ffcd 	bl	8003d54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	f003 020f 	and.w	r2, r3, #15
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d901      	bls.n	8001de2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e050      	b.n	8001e84 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001de2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	da0f      	bge.n	8001e0a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	f003 020f 	and.w	r2, r3, #15
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	3338      	adds	r3, #56	; 0x38
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3304      	adds	r3, #4
 8001e00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2201      	movs	r2, #1
 8001e06:	705a      	strb	r2, [r3, #1]
 8001e08:	e00d      	b.n	8001e26 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e0a:	78fa      	ldrb	r2, [r7, #3]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	1a9b      	subs	r3, r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d101      	bne.n	8001e46 <HAL_PCD_EP_SetStall+0x82>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e01e      	b.n	8001e84 <HAL_PCD_EP_SetStall+0xc0>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68f9      	ldr	r1, [r7, #12]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f002 fb72 	bl	800453e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e5a:	78fb      	ldrb	r3, [r7, #3]
 8001e5c:	f003 030f 	and.w	r3, r3, #15
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10a      	bne.n	8001e7a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6818      	ldr	r0, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	b2d9      	uxtb	r1, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e74:	461a      	mov	r2, r3
 8001e76:	f002 fd51 	bl	800491c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	f003 020f 	and.w	r2, r3, #15
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d901      	bls.n	8001eaa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e042      	b.n	8001f30 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	da0f      	bge.n	8001ed2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eb2:	78fb      	ldrb	r3, [r7, #3]
 8001eb4:	f003 020f 	and.w	r2, r3, #15
 8001eb8:	4613      	mov	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	1a9b      	subs	r3, r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	3338      	adds	r3, #56	; 0x38
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	705a      	strb	r2, [r3, #1]
 8001ed0:	e00f      	b.n	8001ef2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ed2:	78fb      	ldrb	r3, [r7, #3]
 8001ed4:	f003 020f 	and.w	r2, r3, #15
 8001ed8:	4613      	mov	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	1a9b      	subs	r3, r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3304      	adds	r3, #4
 8001eea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_PCD_EP_ClrStall+0x86>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e00e      	b.n	8001f30 <HAL_PCD_EP_ClrStall+0xa4>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68f9      	ldr	r1, [r7, #12]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f002 fb7a 	bl	800461a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	; 0x28
 8001f3c:	af02      	add	r7, sp, #8
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	1a9b      	subs	r3, r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	3338      	adds	r3, #56	; 0x38
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	699a      	ldr	r2, [r3, #24]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d901      	bls.n	8001f70 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e06c      	b.n	800204a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	695a      	ldr	r2, [r3, #20]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	69fa      	ldr	r2, [r7, #28]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d902      	bls.n	8001f8c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	3303      	adds	r3, #3
 8001f90:	089b      	lsrs	r3, r3, #2
 8001f92:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f94:	e02b      	b.n	8001fee <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	695a      	ldr	r2, [r3, #20]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d902      	bls.n	8001fb2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3303      	adds	r3, #3
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	68d9      	ldr	r1, [r3, #12]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	4603      	mov	r3, r0
 8001fd0:	6978      	ldr	r0, [r7, #20]
 8001fd2:	f002 fa56 	bl	8004482 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	441a      	add	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	699a      	ldr	r2, [r3, #24]
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	441a      	add	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	015a      	lsls	r2, r3, #5
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	429a      	cmp	r2, r3
 8002002:	d809      	bhi.n	8002018 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	699a      	ldr	r2, [r3, #24]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800200c:	429a      	cmp	r2, r3
 800200e:	d203      	bcs.n	8002018 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1be      	bne.n	8001f96 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	695a      	ldr	r2, [r3, #20]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	429a      	cmp	r2, r3
 8002022:	d811      	bhi.n	8002048 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	2201      	movs	r2, #1
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	43db      	mvns	r3, r3
 800203e:	6939      	ldr	r1, [r7, #16]
 8002040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002044:	4013      	ands	r3, r2
 8002046:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3720      	adds	r7, #32
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	333c      	adds	r3, #60	; 0x3c
 800206c:	3304      	adds	r3, #4
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	015a      	lsls	r2, r3, #5
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4413      	add	r3, r2
 800207a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	2b01      	cmp	r3, #1
 8002088:	f040 80a0 	bne.w	80021cc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	2b00      	cmp	r3, #0
 8002094:	d015      	beq.n	80020c2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4a72      	ldr	r2, [pc, #456]	; (8002264 <PCD_EP_OutXfrComplete_int+0x210>)
 800209a:	4293      	cmp	r3, r2
 800209c:	f240 80dd 	bls.w	800225a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 80d7 	beq.w	800225a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	015a      	lsls	r2, r3, #5
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b8:	461a      	mov	r2, r3
 80020ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020be:	6093      	str	r3, [r2, #8]
 80020c0:	e0cb      	b.n	800225a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	f003 0320 	and.w	r3, r3, #32
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d009      	beq.n	80020e0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	015a      	lsls	r2, r3, #5
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4413      	add	r3, r2
 80020d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d8:	461a      	mov	r2, r3
 80020da:	2320      	movs	r3, #32
 80020dc:	6093      	str	r3, [r2, #8]
 80020de:	e0bc      	b.n	800225a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f040 80b7 	bne.w	800225a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4a5d      	ldr	r2, [pc, #372]	; (8002264 <PCD_EP_OutXfrComplete_int+0x210>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d90f      	bls.n	8002114 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00a      	beq.n	8002114 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4413      	add	r3, r2
 8002106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800210a:	461a      	mov	r2, r3
 800210c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002110:	6093      	str	r3, [r2, #8]
 8002112:	e0a2      	b.n	800225a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	4613      	mov	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	1a9b      	subs	r3, r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002126:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	0159      	lsls	r1, r3, #5
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	440b      	add	r3, r1
 8002130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800213a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	4613      	mov	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	1a9b      	subs	r3, r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4403      	add	r3, r0
 800214a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800214e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	4613      	mov	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	1a9b      	subs	r3, r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002162:	6819      	ldr	r1, [r3, #0]
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	4613      	mov	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4403      	add	r3, r0
 8002172:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4419      	add	r1, r3
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	4613      	mov	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	1a9b      	subs	r3, r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4403      	add	r3, r0
 8002188:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800218c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d114      	bne.n	80021be <PCD_EP_OutXfrComplete_int+0x16a>
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	4613      	mov	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	1a9b      	subs	r3, r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d108      	bne.n	80021be <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021b6:	461a      	mov	r2, r3
 80021b8:	2101      	movs	r1, #1
 80021ba:	f002 fbaf 	bl	800491c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	4619      	mov	r1, r3
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f004 fab1 	bl	800672c <HAL_PCD_DataOutStageCallback>
 80021ca:	e046      	b.n	800225a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4a26      	ldr	r2, [pc, #152]	; (8002268 <PCD_EP_OutXfrComplete_int+0x214>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d124      	bne.n	800221e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ea:	461a      	mov	r2, r3
 80021ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021f0:	6093      	str	r3, [r2, #8]
 80021f2:	e032      	b.n	800225a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d008      	beq.n	8002210 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800220a:	461a      	mov	r2, r3
 800220c:	2320      	movs	r3, #32
 800220e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	b2db      	uxtb	r3, r3
 8002214:	4619      	mov	r1, r3
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f004 fa88 	bl	800672c <HAL_PCD_DataOutStageCallback>
 800221c:	e01d      	b.n	800225a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d114      	bne.n	800224e <PCD_EP_OutXfrComplete_int+0x1fa>
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d108      	bne.n	800224e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002246:	461a      	mov	r2, r3
 8002248:	2100      	movs	r1, #0
 800224a:	f002 fb67 	bl	800491c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	4619      	mov	r1, r3
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f004 fa69 	bl	800672c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	4f54300a 	.word	0x4f54300a
 8002268:	4f54310a 	.word	0x4f54310a

0800226c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	333c      	adds	r3, #60	; 0x3c
 8002284:	3304      	adds	r3, #4
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4413      	add	r3, r2
 8002292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4a15      	ldr	r2, [pc, #84]	; (80022f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d90e      	bls.n	80022c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d009      	beq.n	80022c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	015a      	lsls	r2, r3, #5
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4413      	add	r3, r2
 80022b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022b8:	461a      	mov	r2, r3
 80022ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f004 fa21 	bl	8006708 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d90c      	bls.n	80022e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d108      	bne.n	80022e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6818      	ldr	r0, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022e0:	461a      	mov	r2, r3
 80022e2:	2101      	movs	r1, #1
 80022e4:	f002 fb1a 	bl	800491c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	4f54300a 	.word	0x4f54300a

080022f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	70fb      	strb	r3, [r7, #3]
 8002304:	4613      	mov	r3, r2
 8002306:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d107      	bne.n	8002326 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002316:	883b      	ldrh	r3, [r7, #0]
 8002318:	0419      	lsls	r1, r3, #16
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	430a      	orrs	r2, r1
 8002322:	629a      	str	r2, [r3, #40]	; 0x28
 8002324:	e028      	b.n	8002378 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232c:	0c1b      	lsrs	r3, r3, #16
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	4413      	add	r3, r2
 8002332:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002334:	2300      	movs	r3, #0
 8002336:	73fb      	strb	r3, [r7, #15]
 8002338:	e00d      	b.n	8002356 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	3340      	adds	r3, #64	; 0x40
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	0c1b      	lsrs	r3, r3, #16
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	4413      	add	r3, r2
 800234e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	3301      	adds	r3, #1
 8002354:	73fb      	strb	r3, [r7, #15]
 8002356:	7bfa      	ldrb	r2, [r7, #15]
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	3b01      	subs	r3, #1
 800235c:	429a      	cmp	r2, r3
 800235e:	d3ec      	bcc.n	800233a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002360:	883b      	ldrh	r3, [r7, #0]
 8002362:	0418      	lsls	r0, r3, #16
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6819      	ldr	r1, [r3, #0]
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	3b01      	subs	r3, #1
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	4302      	orrs	r2, r0
 8002370:	3340      	adds	r3, #64	; 0x40
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	460b      	mov	r3, r1
 8002390:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	887a      	ldrh	r2, [r7, #2]
 8002398:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e25b      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d075      	beq.n	80024ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023de:	4ba3      	ldr	r3, [pc, #652]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 030c 	and.w	r3, r3, #12
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d00c      	beq.n	8002404 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ea:	4ba0      	ldr	r3, [pc, #640]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d112      	bne.n	800241c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023f6:	4b9d      	ldr	r3, [pc, #628]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002402:	d10b      	bne.n	800241c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002404:	4b99      	ldr	r3, [pc, #612]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d05b      	beq.n	80024c8 <HAL_RCC_OscConfig+0x108>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d157      	bne.n	80024c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e236      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002424:	d106      	bne.n	8002434 <HAL_RCC_OscConfig+0x74>
 8002426:	4b91      	ldr	r3, [pc, #580]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a90      	ldr	r2, [pc, #576]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 800242c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	e01d      	b.n	8002470 <HAL_RCC_OscConfig+0xb0>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800243c:	d10c      	bne.n	8002458 <HAL_RCC_OscConfig+0x98>
 800243e:	4b8b      	ldr	r3, [pc, #556]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a8a      	ldr	r2, [pc, #552]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	4b88      	ldr	r3, [pc, #544]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a87      	ldr	r2, [pc, #540]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	e00b      	b.n	8002470 <HAL_RCC_OscConfig+0xb0>
 8002458:	4b84      	ldr	r3, [pc, #528]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a83      	ldr	r2, [pc, #524]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 800245e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	4b81      	ldr	r3, [pc, #516]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a80      	ldr	r2, [pc, #512]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 800246a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800246e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d013      	beq.n	80024a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002478:	f7fe fb10 	bl	8000a9c <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002480:	f7fe fb0c 	bl	8000a9c <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b64      	cmp	r3, #100	; 0x64
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e1fb      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002492:	4b76      	ldr	r3, [pc, #472]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0xc0>
 800249e:	e014      	b.n	80024ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7fe fafc 	bl	8000a9c <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024a8:	f7fe faf8 	bl	8000a9c <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	; 0x64
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e1e7      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ba:	4b6c      	ldr	r3, [pc, #432]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0xe8>
 80024c6:	e000      	b.n	80024ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d063      	beq.n	800259e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024d6:	4b65      	ldr	r3, [pc, #404]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00b      	beq.n	80024fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024e2:	4b62      	ldr	r3, [pc, #392]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d11c      	bne.n	8002528 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ee:	4b5f      	ldr	r3, [pc, #380]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d116      	bne.n	8002528 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fa:	4b5c      	ldr	r3, [pc, #368]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_RCC_OscConfig+0x152>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d001      	beq.n	8002512 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e1bb      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002512:	4b56      	ldr	r3, [pc, #344]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4952      	ldr	r1, [pc, #328]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002526:	e03a      	b.n	800259e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d020      	beq.n	8002572 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002530:	4b4f      	ldr	r3, [pc, #316]	; (8002670 <HAL_RCC_OscConfig+0x2b0>)
 8002532:	2201      	movs	r2, #1
 8002534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002536:	f7fe fab1 	bl	8000a9c <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800253e:	f7fe faad 	bl	8000a9c <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e19c      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002550:	4b46      	ldr	r3, [pc, #280]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f0      	beq.n	800253e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255c:	4b43      	ldr	r3, [pc, #268]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4940      	ldr	r1, [pc, #256]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 800256c:	4313      	orrs	r3, r2
 800256e:	600b      	str	r3, [r1, #0]
 8002570:	e015      	b.n	800259e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002572:	4b3f      	ldr	r3, [pc, #252]	; (8002670 <HAL_RCC_OscConfig+0x2b0>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7fe fa90 	bl	8000a9c <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002580:	f7fe fa8c 	bl	8000a9c <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e17b      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002592:	4b36      	ldr	r3, [pc, #216]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d030      	beq.n	800260c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d016      	beq.n	80025e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b2:	4b30      	ldr	r3, [pc, #192]	; (8002674 <HAL_RCC_OscConfig+0x2b4>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b8:	f7fe fa70 	bl	8000a9c <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025c0:	f7fe fa6c 	bl	8000a9c <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e15b      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d2:	4b26      	ldr	r3, [pc, #152]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 80025d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0x200>
 80025de:	e015      	b.n	800260c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025e0:	4b24      	ldr	r3, [pc, #144]	; (8002674 <HAL_RCC_OscConfig+0x2b4>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e6:	f7fe fa59 	bl	8000a9c <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ee:	f7fe fa55 	bl	8000a9c <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e144      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002600:	4b1a      	ldr	r3, [pc, #104]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1f0      	bne.n	80025ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 80a0 	beq.w	800275a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800261a:	2300      	movs	r3, #0
 800261c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800261e:	4b13      	ldr	r3, [pc, #76]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10f      	bne.n	800264a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	4b0f      	ldr	r3, [pc, #60]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	4a0e      	ldr	r2, [pc, #56]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002638:	6413      	str	r3, [r2, #64]	; 0x40
 800263a:	4b0c      	ldr	r3, [pc, #48]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002646:	2301      	movs	r3, #1
 8002648:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264a:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_RCC_OscConfig+0x2b8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002652:	2b00      	cmp	r3, #0
 8002654:	d121      	bne.n	800269a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002656:	4b08      	ldr	r3, [pc, #32]	; (8002678 <HAL_RCC_OscConfig+0x2b8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a07      	ldr	r2, [pc, #28]	; (8002678 <HAL_RCC_OscConfig+0x2b8>)
 800265c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002662:	f7fe fa1b 	bl	8000a9c <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002668:	e011      	b.n	800268e <HAL_RCC_OscConfig+0x2ce>
 800266a:	bf00      	nop
 800266c:	40023800 	.word	0x40023800
 8002670:	42470000 	.word	0x42470000
 8002674:	42470e80 	.word	0x42470e80
 8002678:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800267c:	f7fe fa0e 	bl	8000a9c <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e0fd      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268e:	4b81      	ldr	r3, [pc, #516]	; (8002894 <HAL_RCC_OscConfig+0x4d4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0f0      	beq.n	800267c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d106      	bne.n	80026b0 <HAL_RCC_OscConfig+0x2f0>
 80026a2:	4b7d      	ldr	r3, [pc, #500]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 80026a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a6:	4a7c      	ldr	r2, [pc, #496]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6713      	str	r3, [r2, #112]	; 0x70
 80026ae:	e01c      	b.n	80026ea <HAL_RCC_OscConfig+0x32a>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	2b05      	cmp	r3, #5
 80026b6:	d10c      	bne.n	80026d2 <HAL_RCC_OscConfig+0x312>
 80026b8:	4b77      	ldr	r3, [pc, #476]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 80026ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026bc:	4a76      	ldr	r2, [pc, #472]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 80026be:	f043 0304 	orr.w	r3, r3, #4
 80026c2:	6713      	str	r3, [r2, #112]	; 0x70
 80026c4:	4b74      	ldr	r3, [pc, #464]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 80026c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c8:	4a73      	ldr	r2, [pc, #460]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	6713      	str	r3, [r2, #112]	; 0x70
 80026d0:	e00b      	b.n	80026ea <HAL_RCC_OscConfig+0x32a>
 80026d2:	4b71      	ldr	r3, [pc, #452]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d6:	4a70      	ldr	r2, [pc, #448]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 80026d8:	f023 0301 	bic.w	r3, r3, #1
 80026dc:	6713      	str	r3, [r2, #112]	; 0x70
 80026de:	4b6e      	ldr	r3, [pc, #440]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 80026e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e2:	4a6d      	ldr	r2, [pc, #436]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 80026e4:	f023 0304 	bic.w	r3, r3, #4
 80026e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d015      	beq.n	800271e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f2:	f7fe f9d3 	bl	8000a9c <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f8:	e00a      	b.n	8002710 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026fa:	f7fe f9cf 	bl	8000a9c <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	f241 3288 	movw	r2, #5000	; 0x1388
 8002708:	4293      	cmp	r3, r2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e0bc      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002710:	4b61      	ldr	r3, [pc, #388]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 8002712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0ee      	beq.n	80026fa <HAL_RCC_OscConfig+0x33a>
 800271c:	e014      	b.n	8002748 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800271e:	f7fe f9bd 	bl	8000a9c <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002724:	e00a      	b.n	800273c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002726:	f7fe f9b9 	bl	8000a9c <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	f241 3288 	movw	r2, #5000	; 0x1388
 8002734:	4293      	cmp	r3, r2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e0a6      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800273c:	4b56      	ldr	r3, [pc, #344]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1ee      	bne.n	8002726 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002748:	7dfb      	ldrb	r3, [r7, #23]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d105      	bne.n	800275a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800274e:	4b52      	ldr	r3, [pc, #328]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	4a51      	ldr	r2, [pc, #324]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 8002754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002758:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 8092 	beq.w	8002888 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002764:	4b4c      	ldr	r3, [pc, #304]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 030c 	and.w	r3, r3, #12
 800276c:	2b08      	cmp	r3, #8
 800276e:	d05c      	beq.n	800282a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d141      	bne.n	80027fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002778:	4b48      	ldr	r3, [pc, #288]	; (800289c <HAL_RCC_OscConfig+0x4dc>)
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277e:	f7fe f98d 	bl	8000a9c <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002786:	f7fe f989 	bl	8000a9c <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e078      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002798:	4b3f      	ldr	r3, [pc, #252]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1f0      	bne.n	8002786 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69da      	ldr	r2, [r3, #28]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	019b      	lsls	r3, r3, #6
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	085b      	lsrs	r3, r3, #1
 80027bc:	3b01      	subs	r3, #1
 80027be:	041b      	lsls	r3, r3, #16
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c6:	061b      	lsls	r3, r3, #24
 80027c8:	4933      	ldr	r1, [pc, #204]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ce:	4b33      	ldr	r3, [pc, #204]	; (800289c <HAL_RCC_OscConfig+0x4dc>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d4:	f7fe f962 	bl	8000a9c <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027dc:	f7fe f95e 	bl	8000a9c <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e04d      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ee:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0x41c>
 80027fa:	e045      	b.n	8002888 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fc:	4b27      	ldr	r3, [pc, #156]	; (800289c <HAL_RCC_OscConfig+0x4dc>)
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002802:	f7fe f94b 	bl	8000a9c <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280a:	f7fe f947 	bl	8000a9c <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e036      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281c:	4b1e      	ldr	r3, [pc, #120]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f0      	bne.n	800280a <HAL_RCC_OscConfig+0x44a>
 8002828:	e02e      	b.n	8002888 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e029      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002836:	4b18      	ldr	r3, [pc, #96]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	429a      	cmp	r2, r3
 8002848:	d11c      	bne.n	8002884 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002854:	429a      	cmp	r2, r3
 8002856:	d115      	bne.n	8002884 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800285e:	4013      	ands	r3, r2
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002864:	4293      	cmp	r3, r2
 8002866:	d10d      	bne.n	8002884 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002872:	429a      	cmp	r2, r3
 8002874:	d106      	bne.n	8002884 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002880:	429a      	cmp	r2, r3
 8002882:	d001      	beq.n	8002888 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40007000 	.word	0x40007000
 8002898:	40023800 	.word	0x40023800
 800289c:	42470060 	.word	0x42470060

080028a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0cc      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028b4:	4b68      	ldr	r3, [pc, #416]	; (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 030f 	and.w	r3, r3, #15
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d90c      	bls.n	80028dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c2:	4b65      	ldr	r3, [pc, #404]	; (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	4b63      	ldr	r3, [pc, #396]	; (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0b8      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d020      	beq.n	800292a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d005      	beq.n	8002900 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028f4:	4b59      	ldr	r3, [pc, #356]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	4a58      	ldr	r2, [pc, #352]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800290c:	4b53      	ldr	r3, [pc, #332]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	4a52      	ldr	r2, [pc, #328]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002916:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002918:	4b50      	ldr	r3, [pc, #320]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	494d      	ldr	r1, [pc, #308]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	4313      	orrs	r3, r2
 8002928:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d044      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d107      	bne.n	800294e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293e:	4b47      	ldr	r3, [pc, #284]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d119      	bne.n	800297e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e07f      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d003      	beq.n	800295e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800295a:	2b03      	cmp	r3, #3
 800295c:	d107      	bne.n	800296e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800295e:	4b3f      	ldr	r3, [pc, #252]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d109      	bne.n	800297e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e06f      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296e:	4b3b      	ldr	r3, [pc, #236]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e067      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800297e:	4b37      	ldr	r3, [pc, #220]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f023 0203 	bic.w	r2, r3, #3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	4934      	ldr	r1, [pc, #208]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	4313      	orrs	r3, r2
 800298e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002990:	f7fe f884 	bl	8000a9c <HAL_GetTick>
 8002994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002996:	e00a      	b.n	80029ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002998:	f7fe f880 	bl	8000a9c <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e04f      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ae:	4b2b      	ldr	r3, [pc, #172]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 020c 	and.w	r2, r3, #12
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	429a      	cmp	r2, r3
 80029be:	d1eb      	bne.n	8002998 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029c0:	4b25      	ldr	r3, [pc, #148]	; (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 030f 	and.w	r3, r3, #15
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d20c      	bcs.n	80029e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ce:	4b22      	ldr	r3, [pc, #136]	; (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d6:	4b20      	ldr	r3, [pc, #128]	; (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d001      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e032      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029f4:	4b19      	ldr	r3, [pc, #100]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	4916      	ldr	r1, [pc, #88]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d009      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a12:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	490e      	ldr	r1, [pc, #56]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a26:	f000 f821 	bl	8002a6c <HAL_RCC_GetSysClockFreq>
 8002a2a:	4601      	mov	r1, r0
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	4a0a      	ldr	r2, [pc, #40]	; (8002a60 <HAL_RCC_ClockConfig+0x1c0>)
 8002a38:	5cd3      	ldrb	r3, [r2, r3]
 8002a3a:	fa21 f303 	lsr.w	r3, r1, r3
 8002a3e:	4a09      	ldr	r2, [pc, #36]	; (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a42:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <HAL_RCC_ClockConfig+0x1c8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fd ffe4 	bl	8000a14 <HAL_InitTick>

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40023c00 	.word	0x40023c00
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	08006ec4 	.word	0x08006ec4
 8002a64:	20000000 	.word	0x20000000
 8002a68:	20000004 	.word	0x20000004

08002a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	607b      	str	r3, [r7, #4]
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a82:	4b63      	ldr	r3, [pc, #396]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 030c 	and.w	r3, r3, #12
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d007      	beq.n	8002a9e <HAL_RCC_GetSysClockFreq+0x32>
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d008      	beq.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x38>
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f040 80b4 	bne.w	8002c00 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a98:	4b5e      	ldr	r3, [pc, #376]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002a9a:	60bb      	str	r3, [r7, #8]
       break;
 8002a9c:	e0b3      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a9e:	4b5e      	ldr	r3, [pc, #376]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002aa0:	60bb      	str	r3, [r7, #8]
      break;
 8002aa2:	e0b0      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aa4:	4b5a      	ldr	r3, [pc, #360]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aae:	4b58      	ldr	r3, [pc, #352]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d04a      	beq.n	8002b50 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aba:	4b55      	ldr	r3, [pc, #340]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	099b      	lsrs	r3, r3, #6
 8002ac0:	f04f 0400 	mov.w	r4, #0
 8002ac4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	ea03 0501 	and.w	r5, r3, r1
 8002ad0:	ea04 0602 	and.w	r6, r4, r2
 8002ad4:	4629      	mov	r1, r5
 8002ad6:	4632      	mov	r2, r6
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	f04f 0400 	mov.w	r4, #0
 8002ae0:	0154      	lsls	r4, r2, #5
 8002ae2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ae6:	014b      	lsls	r3, r1, #5
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4622      	mov	r2, r4
 8002aec:	1b49      	subs	r1, r1, r5
 8002aee:	eb62 0206 	sbc.w	r2, r2, r6
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	f04f 0400 	mov.w	r4, #0
 8002afa:	0194      	lsls	r4, r2, #6
 8002afc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b00:	018b      	lsls	r3, r1, #6
 8002b02:	1a5b      	subs	r3, r3, r1
 8002b04:	eb64 0402 	sbc.w	r4, r4, r2
 8002b08:	f04f 0100 	mov.w	r1, #0
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	00e2      	lsls	r2, r4, #3
 8002b12:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b16:	00d9      	lsls	r1, r3, #3
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4614      	mov	r4, r2
 8002b1c:	195b      	adds	r3, r3, r5
 8002b1e:	eb44 0406 	adc.w	r4, r4, r6
 8002b22:	f04f 0100 	mov.w	r1, #0
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	0262      	lsls	r2, r4, #9
 8002b2c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002b30:	0259      	lsls	r1, r3, #9
 8002b32:	460b      	mov	r3, r1
 8002b34:	4614      	mov	r4, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	4621      	mov	r1, r4
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f04f 0400 	mov.w	r4, #0
 8002b40:	461a      	mov	r2, r3
 8002b42:	4623      	mov	r3, r4
 8002b44:	f7fd fb48 	bl	80001d8 <__aeabi_uldivmod>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	460c      	mov	r4, r1
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	e049      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b50:	4b2f      	ldr	r3, [pc, #188]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	099b      	lsrs	r3, r3, #6
 8002b56:	f04f 0400 	mov.w	r4, #0
 8002b5a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	ea03 0501 	and.w	r5, r3, r1
 8002b66:	ea04 0602 	and.w	r6, r4, r2
 8002b6a:	4629      	mov	r1, r5
 8002b6c:	4632      	mov	r2, r6
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	f04f 0400 	mov.w	r4, #0
 8002b76:	0154      	lsls	r4, r2, #5
 8002b78:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b7c:	014b      	lsls	r3, r1, #5
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4622      	mov	r2, r4
 8002b82:	1b49      	subs	r1, r1, r5
 8002b84:	eb62 0206 	sbc.w	r2, r2, r6
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	f04f 0400 	mov.w	r4, #0
 8002b90:	0194      	lsls	r4, r2, #6
 8002b92:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b96:	018b      	lsls	r3, r1, #6
 8002b98:	1a5b      	subs	r3, r3, r1
 8002b9a:	eb64 0402 	sbc.w	r4, r4, r2
 8002b9e:	f04f 0100 	mov.w	r1, #0
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	00e2      	lsls	r2, r4, #3
 8002ba8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bac:	00d9      	lsls	r1, r3, #3
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4614      	mov	r4, r2
 8002bb2:	195b      	adds	r3, r3, r5
 8002bb4:	eb44 0406 	adc.w	r4, r4, r6
 8002bb8:	f04f 0100 	mov.w	r1, #0
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	02a2      	lsls	r2, r4, #10
 8002bc2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002bc6:	0299      	lsls	r1, r3, #10
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4614      	mov	r4, r2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	4621      	mov	r1, r4
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f04f 0400 	mov.w	r4, #0
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	4623      	mov	r3, r4
 8002bda:	f7fd fafd 	bl	80001d8 <__aeabi_uldivmod>
 8002bde:	4603      	mov	r3, r0
 8002be0:	460c      	mov	r4, r1
 8002be2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002be4:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	0c1b      	lsrs	r3, r3, #16
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	3301      	adds	r3, #1
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfc:	60bb      	str	r3, [r7, #8]
      break;
 8002bfe:	e002      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c00:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c02:	60bb      	str	r3, [r7, #8]
      break;
 8002c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c06:	68bb      	ldr	r3, [r7, #8]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c10:	40023800 	.word	0x40023800
 8002c14:	00f42400 	.word	0x00f42400
 8002c18:	007a1200 	.word	0x007a1200

08002c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c20:	4b03      	ldr	r3, [pc, #12]	; (8002c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c22:	681b      	ldr	r3, [r3, #0]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	20000000 	.word	0x20000000

08002c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c38:	f7ff fff0 	bl	8002c1c <HAL_RCC_GetHCLKFreq>
 8002c3c:	4601      	mov	r1, r0
 8002c3e:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	0a9b      	lsrs	r3, r3, #10
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	4a03      	ldr	r2, [pc, #12]	; (8002c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c4a:	5cd3      	ldrb	r3, [r2, r3]
 8002c4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40023800 	.word	0x40023800
 8002c58:	08006ed4 	.word	0x08006ed4

08002c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c60:	f7ff ffdc 	bl	8002c1c <HAL_RCC_GetHCLKFreq>
 8002c64:	4601      	mov	r1, r0
 8002c66:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	0b5b      	lsrs	r3, r3, #13
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	4a03      	ldr	r2, [pc, #12]	; (8002c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c72:	5cd3      	ldrb	r3, [r2, r3]
 8002c74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	08006ed4 	.word	0x08006ed4

08002c84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e03f      	b.n	8002d16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7fd fd84 	bl	80007b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2224      	movs	r2, #36	; 0x24
 8002cb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f829 	bl	8002d20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695a      	ldr	r2, [r3, #20]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d24:	b085      	sub	sp, #20
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002d62:	f023 030c 	bic.w	r3, r3, #12
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6812      	ldr	r2, [r2, #0]
 8002d6a:	68f9      	ldr	r1, [r7, #12]
 8002d6c:	430b      	orrs	r3, r1
 8002d6e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699a      	ldr	r2, [r3, #24]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d8e:	f040 818b 	bne.w	80030a8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4ac1      	ldr	r2, [pc, #772]	; (800309c <UART_SetConfig+0x37c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d005      	beq.n	8002da8 <UART_SetConfig+0x88>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4abf      	ldr	r2, [pc, #764]	; (80030a0 <UART_SetConfig+0x380>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	f040 80bd 	bne.w	8002f22 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002da8:	f7ff ff58 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
 8002dac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	461d      	mov	r5, r3
 8002db2:	f04f 0600 	mov.w	r6, #0
 8002db6:	46a8      	mov	r8, r5
 8002db8:	46b1      	mov	r9, r6
 8002dba:	eb18 0308 	adds.w	r3, r8, r8
 8002dbe:	eb49 0409 	adc.w	r4, r9, r9
 8002dc2:	4698      	mov	r8, r3
 8002dc4:	46a1      	mov	r9, r4
 8002dc6:	eb18 0805 	adds.w	r8, r8, r5
 8002dca:	eb49 0906 	adc.w	r9, r9, r6
 8002dce:	f04f 0100 	mov.w	r1, #0
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002dda:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002dde:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002de2:	4688      	mov	r8, r1
 8002de4:	4691      	mov	r9, r2
 8002de6:	eb18 0005 	adds.w	r0, r8, r5
 8002dea:	eb49 0106 	adc.w	r1, r9, r6
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	461d      	mov	r5, r3
 8002df4:	f04f 0600 	mov.w	r6, #0
 8002df8:	196b      	adds	r3, r5, r5
 8002dfa:	eb46 0406 	adc.w	r4, r6, r6
 8002dfe:	461a      	mov	r2, r3
 8002e00:	4623      	mov	r3, r4
 8002e02:	f7fd f9e9 	bl	80001d8 <__aeabi_uldivmod>
 8002e06:	4603      	mov	r3, r0
 8002e08:	460c      	mov	r4, r1
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	4ba5      	ldr	r3, [pc, #660]	; (80030a4 <UART_SetConfig+0x384>)
 8002e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	461d      	mov	r5, r3
 8002e1c:	f04f 0600 	mov.w	r6, #0
 8002e20:	46a9      	mov	r9, r5
 8002e22:	46b2      	mov	sl, r6
 8002e24:	eb19 0309 	adds.w	r3, r9, r9
 8002e28:	eb4a 040a 	adc.w	r4, sl, sl
 8002e2c:	4699      	mov	r9, r3
 8002e2e:	46a2      	mov	sl, r4
 8002e30:	eb19 0905 	adds.w	r9, r9, r5
 8002e34:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e38:	f04f 0100 	mov.w	r1, #0
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e4c:	4689      	mov	r9, r1
 8002e4e:	4692      	mov	sl, r2
 8002e50:	eb19 0005 	adds.w	r0, r9, r5
 8002e54:	eb4a 0106 	adc.w	r1, sl, r6
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	461d      	mov	r5, r3
 8002e5e:	f04f 0600 	mov.w	r6, #0
 8002e62:	196b      	adds	r3, r5, r5
 8002e64:	eb46 0406 	adc.w	r4, r6, r6
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4623      	mov	r3, r4
 8002e6c:	f7fd f9b4 	bl	80001d8 <__aeabi_uldivmod>
 8002e70:	4603      	mov	r3, r0
 8002e72:	460c      	mov	r4, r1
 8002e74:	461a      	mov	r2, r3
 8002e76:	4b8b      	ldr	r3, [pc, #556]	; (80030a4 <UART_SetConfig+0x384>)
 8002e78:	fba3 1302 	umull	r1, r3, r3, r2
 8002e7c:	095b      	lsrs	r3, r3, #5
 8002e7e:	2164      	movs	r1, #100	; 0x64
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	3332      	adds	r3, #50	; 0x32
 8002e8a:	4a86      	ldr	r2, [pc, #536]	; (80030a4 <UART_SetConfig+0x384>)
 8002e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e90:	095b      	lsrs	r3, r3, #5
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e98:	4498      	add	r8, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	461d      	mov	r5, r3
 8002e9e:	f04f 0600 	mov.w	r6, #0
 8002ea2:	46a9      	mov	r9, r5
 8002ea4:	46b2      	mov	sl, r6
 8002ea6:	eb19 0309 	adds.w	r3, r9, r9
 8002eaa:	eb4a 040a 	adc.w	r4, sl, sl
 8002eae:	4699      	mov	r9, r3
 8002eb0:	46a2      	mov	sl, r4
 8002eb2:	eb19 0905 	adds.w	r9, r9, r5
 8002eb6:	eb4a 0a06 	adc.w	sl, sl, r6
 8002eba:	f04f 0100 	mov.w	r1, #0
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ec6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002eca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ece:	4689      	mov	r9, r1
 8002ed0:	4692      	mov	sl, r2
 8002ed2:	eb19 0005 	adds.w	r0, r9, r5
 8002ed6:	eb4a 0106 	adc.w	r1, sl, r6
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	461d      	mov	r5, r3
 8002ee0:	f04f 0600 	mov.w	r6, #0
 8002ee4:	196b      	adds	r3, r5, r5
 8002ee6:	eb46 0406 	adc.w	r4, r6, r6
 8002eea:	461a      	mov	r2, r3
 8002eec:	4623      	mov	r3, r4
 8002eee:	f7fd f973 	bl	80001d8 <__aeabi_uldivmod>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	460c      	mov	r4, r1
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	4b6a      	ldr	r3, [pc, #424]	; (80030a4 <UART_SetConfig+0x384>)
 8002efa:	fba3 1302 	umull	r1, r3, r3, r2
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	2164      	movs	r1, #100	; 0x64
 8002f02:	fb01 f303 	mul.w	r3, r1, r3
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	3332      	adds	r3, #50	; 0x32
 8002f0c:	4a65      	ldr	r2, [pc, #404]	; (80030a4 <UART_SetConfig+0x384>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	095b      	lsrs	r3, r3, #5
 8002f14:	f003 0207 	and.w	r2, r3, #7
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4442      	add	r2, r8
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	e26f      	b.n	8003402 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f22:	f7ff fe87 	bl	8002c34 <HAL_RCC_GetPCLK1Freq>
 8002f26:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	461d      	mov	r5, r3
 8002f2c:	f04f 0600 	mov.w	r6, #0
 8002f30:	46a8      	mov	r8, r5
 8002f32:	46b1      	mov	r9, r6
 8002f34:	eb18 0308 	adds.w	r3, r8, r8
 8002f38:	eb49 0409 	adc.w	r4, r9, r9
 8002f3c:	4698      	mov	r8, r3
 8002f3e:	46a1      	mov	r9, r4
 8002f40:	eb18 0805 	adds.w	r8, r8, r5
 8002f44:	eb49 0906 	adc.w	r9, r9, r6
 8002f48:	f04f 0100 	mov.w	r1, #0
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f54:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f58:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f5c:	4688      	mov	r8, r1
 8002f5e:	4691      	mov	r9, r2
 8002f60:	eb18 0005 	adds.w	r0, r8, r5
 8002f64:	eb49 0106 	adc.w	r1, r9, r6
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	461d      	mov	r5, r3
 8002f6e:	f04f 0600 	mov.w	r6, #0
 8002f72:	196b      	adds	r3, r5, r5
 8002f74:	eb46 0406 	adc.w	r4, r6, r6
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4623      	mov	r3, r4
 8002f7c:	f7fd f92c 	bl	80001d8 <__aeabi_uldivmod>
 8002f80:	4603      	mov	r3, r0
 8002f82:	460c      	mov	r4, r1
 8002f84:	461a      	mov	r2, r3
 8002f86:	4b47      	ldr	r3, [pc, #284]	; (80030a4 <UART_SetConfig+0x384>)
 8002f88:	fba3 2302 	umull	r2, r3, r3, r2
 8002f8c:	095b      	lsrs	r3, r3, #5
 8002f8e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	461d      	mov	r5, r3
 8002f96:	f04f 0600 	mov.w	r6, #0
 8002f9a:	46a9      	mov	r9, r5
 8002f9c:	46b2      	mov	sl, r6
 8002f9e:	eb19 0309 	adds.w	r3, r9, r9
 8002fa2:	eb4a 040a 	adc.w	r4, sl, sl
 8002fa6:	4699      	mov	r9, r3
 8002fa8:	46a2      	mov	sl, r4
 8002faa:	eb19 0905 	adds.w	r9, r9, r5
 8002fae:	eb4a 0a06 	adc.w	sl, sl, r6
 8002fb2:	f04f 0100 	mov.w	r1, #0
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002fc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002fc6:	4689      	mov	r9, r1
 8002fc8:	4692      	mov	sl, r2
 8002fca:	eb19 0005 	adds.w	r0, r9, r5
 8002fce:	eb4a 0106 	adc.w	r1, sl, r6
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	461d      	mov	r5, r3
 8002fd8:	f04f 0600 	mov.w	r6, #0
 8002fdc:	196b      	adds	r3, r5, r5
 8002fde:	eb46 0406 	adc.w	r4, r6, r6
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	4623      	mov	r3, r4
 8002fe6:	f7fd f8f7 	bl	80001d8 <__aeabi_uldivmod>
 8002fea:	4603      	mov	r3, r0
 8002fec:	460c      	mov	r4, r1
 8002fee:	461a      	mov	r2, r3
 8002ff0:	4b2c      	ldr	r3, [pc, #176]	; (80030a4 <UART_SetConfig+0x384>)
 8002ff2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	2164      	movs	r1, #100	; 0x64
 8002ffa:	fb01 f303 	mul.w	r3, r1, r3
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	3332      	adds	r3, #50	; 0x32
 8003004:	4a27      	ldr	r2, [pc, #156]	; (80030a4 <UART_SetConfig+0x384>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003012:	4498      	add	r8, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	461d      	mov	r5, r3
 8003018:	f04f 0600 	mov.w	r6, #0
 800301c:	46a9      	mov	r9, r5
 800301e:	46b2      	mov	sl, r6
 8003020:	eb19 0309 	adds.w	r3, r9, r9
 8003024:	eb4a 040a 	adc.w	r4, sl, sl
 8003028:	4699      	mov	r9, r3
 800302a:	46a2      	mov	sl, r4
 800302c:	eb19 0905 	adds.w	r9, r9, r5
 8003030:	eb4a 0a06 	adc.w	sl, sl, r6
 8003034:	f04f 0100 	mov.w	r1, #0
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003040:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003044:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003048:	4689      	mov	r9, r1
 800304a:	4692      	mov	sl, r2
 800304c:	eb19 0005 	adds.w	r0, r9, r5
 8003050:	eb4a 0106 	adc.w	r1, sl, r6
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	461d      	mov	r5, r3
 800305a:	f04f 0600 	mov.w	r6, #0
 800305e:	196b      	adds	r3, r5, r5
 8003060:	eb46 0406 	adc.w	r4, r6, r6
 8003064:	461a      	mov	r2, r3
 8003066:	4623      	mov	r3, r4
 8003068:	f7fd f8b6 	bl	80001d8 <__aeabi_uldivmod>
 800306c:	4603      	mov	r3, r0
 800306e:	460c      	mov	r4, r1
 8003070:	461a      	mov	r2, r3
 8003072:	4b0c      	ldr	r3, [pc, #48]	; (80030a4 <UART_SetConfig+0x384>)
 8003074:	fba3 1302 	umull	r1, r3, r3, r2
 8003078:	095b      	lsrs	r3, r3, #5
 800307a:	2164      	movs	r1, #100	; 0x64
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	3332      	adds	r3, #50	; 0x32
 8003086:	4a07      	ldr	r2, [pc, #28]	; (80030a4 <UART_SetConfig+0x384>)
 8003088:	fba2 2303 	umull	r2, r3, r2, r3
 800308c:	095b      	lsrs	r3, r3, #5
 800308e:	f003 0207 	and.w	r2, r3, #7
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4442      	add	r2, r8
 8003098:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800309a:	e1b2      	b.n	8003402 <UART_SetConfig+0x6e2>
 800309c:	40011000 	.word	0x40011000
 80030a0:	40011400 	.word	0x40011400
 80030a4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4ad7      	ldr	r2, [pc, #860]	; (800340c <UART_SetConfig+0x6ec>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d005      	beq.n	80030be <UART_SetConfig+0x39e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4ad6      	ldr	r2, [pc, #856]	; (8003410 <UART_SetConfig+0x6f0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	f040 80d1 	bne.w	8003260 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80030be:	f7ff fdcd 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
 80030c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	469a      	mov	sl, r3
 80030c8:	f04f 0b00 	mov.w	fp, #0
 80030cc:	46d0      	mov	r8, sl
 80030ce:	46d9      	mov	r9, fp
 80030d0:	eb18 0308 	adds.w	r3, r8, r8
 80030d4:	eb49 0409 	adc.w	r4, r9, r9
 80030d8:	4698      	mov	r8, r3
 80030da:	46a1      	mov	r9, r4
 80030dc:	eb18 080a 	adds.w	r8, r8, sl
 80030e0:	eb49 090b 	adc.w	r9, r9, fp
 80030e4:	f04f 0100 	mov.w	r1, #0
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80030f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80030f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80030f8:	4688      	mov	r8, r1
 80030fa:	4691      	mov	r9, r2
 80030fc:	eb1a 0508 	adds.w	r5, sl, r8
 8003100:	eb4b 0609 	adc.w	r6, fp, r9
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	4619      	mov	r1, r3
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	f04f 0400 	mov.w	r4, #0
 8003116:	0094      	lsls	r4, r2, #2
 8003118:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800311c:	008b      	lsls	r3, r1, #2
 800311e:	461a      	mov	r2, r3
 8003120:	4623      	mov	r3, r4
 8003122:	4628      	mov	r0, r5
 8003124:	4631      	mov	r1, r6
 8003126:	f7fd f857 	bl	80001d8 <__aeabi_uldivmod>
 800312a:	4603      	mov	r3, r0
 800312c:	460c      	mov	r4, r1
 800312e:	461a      	mov	r2, r3
 8003130:	4bb8      	ldr	r3, [pc, #736]	; (8003414 <UART_SetConfig+0x6f4>)
 8003132:	fba3 2302 	umull	r2, r3, r3, r2
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	469b      	mov	fp, r3
 8003140:	f04f 0c00 	mov.w	ip, #0
 8003144:	46d9      	mov	r9, fp
 8003146:	46e2      	mov	sl, ip
 8003148:	eb19 0309 	adds.w	r3, r9, r9
 800314c:	eb4a 040a 	adc.w	r4, sl, sl
 8003150:	4699      	mov	r9, r3
 8003152:	46a2      	mov	sl, r4
 8003154:	eb19 090b 	adds.w	r9, r9, fp
 8003158:	eb4a 0a0c 	adc.w	sl, sl, ip
 800315c:	f04f 0100 	mov.w	r1, #0
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003168:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800316c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003170:	4689      	mov	r9, r1
 8003172:	4692      	mov	sl, r2
 8003174:	eb1b 0509 	adds.w	r5, fp, r9
 8003178:	eb4c 060a 	adc.w	r6, ip, sl
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	4619      	mov	r1, r3
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	f04f 0400 	mov.w	r4, #0
 800318e:	0094      	lsls	r4, r2, #2
 8003190:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003194:	008b      	lsls	r3, r1, #2
 8003196:	461a      	mov	r2, r3
 8003198:	4623      	mov	r3, r4
 800319a:	4628      	mov	r0, r5
 800319c:	4631      	mov	r1, r6
 800319e:	f7fd f81b 	bl	80001d8 <__aeabi_uldivmod>
 80031a2:	4603      	mov	r3, r0
 80031a4:	460c      	mov	r4, r1
 80031a6:	461a      	mov	r2, r3
 80031a8:	4b9a      	ldr	r3, [pc, #616]	; (8003414 <UART_SetConfig+0x6f4>)
 80031aa:	fba3 1302 	umull	r1, r3, r3, r2
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	2164      	movs	r1, #100	; 0x64
 80031b2:	fb01 f303 	mul.w	r3, r1, r3
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	3332      	adds	r3, #50	; 0x32
 80031bc:	4a95      	ldr	r2, [pc, #596]	; (8003414 <UART_SetConfig+0x6f4>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031c8:	4498      	add	r8, r3
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	469b      	mov	fp, r3
 80031ce:	f04f 0c00 	mov.w	ip, #0
 80031d2:	46d9      	mov	r9, fp
 80031d4:	46e2      	mov	sl, ip
 80031d6:	eb19 0309 	adds.w	r3, r9, r9
 80031da:	eb4a 040a 	adc.w	r4, sl, sl
 80031de:	4699      	mov	r9, r3
 80031e0:	46a2      	mov	sl, r4
 80031e2:	eb19 090b 	adds.w	r9, r9, fp
 80031e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80031ea:	f04f 0100 	mov.w	r1, #0
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031fe:	4689      	mov	r9, r1
 8003200:	4692      	mov	sl, r2
 8003202:	eb1b 0509 	adds.w	r5, fp, r9
 8003206:	eb4c 060a 	adc.w	r6, ip, sl
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4619      	mov	r1, r3
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	f04f 0400 	mov.w	r4, #0
 800321c:	0094      	lsls	r4, r2, #2
 800321e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003222:	008b      	lsls	r3, r1, #2
 8003224:	461a      	mov	r2, r3
 8003226:	4623      	mov	r3, r4
 8003228:	4628      	mov	r0, r5
 800322a:	4631      	mov	r1, r6
 800322c:	f7fc ffd4 	bl	80001d8 <__aeabi_uldivmod>
 8003230:	4603      	mov	r3, r0
 8003232:	460c      	mov	r4, r1
 8003234:	461a      	mov	r2, r3
 8003236:	4b77      	ldr	r3, [pc, #476]	; (8003414 <UART_SetConfig+0x6f4>)
 8003238:	fba3 1302 	umull	r1, r3, r3, r2
 800323c:	095b      	lsrs	r3, r3, #5
 800323e:	2164      	movs	r1, #100	; 0x64
 8003240:	fb01 f303 	mul.w	r3, r1, r3
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	3332      	adds	r3, #50	; 0x32
 800324a:	4a72      	ldr	r2, [pc, #456]	; (8003414 <UART_SetConfig+0x6f4>)
 800324c:	fba2 2303 	umull	r2, r3, r2, r3
 8003250:	095b      	lsrs	r3, r3, #5
 8003252:	f003 020f 	and.w	r2, r3, #15
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4442      	add	r2, r8
 800325c:	609a      	str	r2, [r3, #8]
 800325e:	e0d0      	b.n	8003402 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003260:	f7ff fce8 	bl	8002c34 <HAL_RCC_GetPCLK1Freq>
 8003264:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	469a      	mov	sl, r3
 800326a:	f04f 0b00 	mov.w	fp, #0
 800326e:	46d0      	mov	r8, sl
 8003270:	46d9      	mov	r9, fp
 8003272:	eb18 0308 	adds.w	r3, r8, r8
 8003276:	eb49 0409 	adc.w	r4, r9, r9
 800327a:	4698      	mov	r8, r3
 800327c:	46a1      	mov	r9, r4
 800327e:	eb18 080a 	adds.w	r8, r8, sl
 8003282:	eb49 090b 	adc.w	r9, r9, fp
 8003286:	f04f 0100 	mov.w	r1, #0
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003292:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003296:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800329a:	4688      	mov	r8, r1
 800329c:	4691      	mov	r9, r2
 800329e:	eb1a 0508 	adds.w	r5, sl, r8
 80032a2:	eb4b 0609 	adc.w	r6, fp, r9
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	4619      	mov	r1, r3
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	f04f 0400 	mov.w	r4, #0
 80032b8:	0094      	lsls	r4, r2, #2
 80032ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032be:	008b      	lsls	r3, r1, #2
 80032c0:	461a      	mov	r2, r3
 80032c2:	4623      	mov	r3, r4
 80032c4:	4628      	mov	r0, r5
 80032c6:	4631      	mov	r1, r6
 80032c8:	f7fc ff86 	bl	80001d8 <__aeabi_uldivmod>
 80032cc:	4603      	mov	r3, r0
 80032ce:	460c      	mov	r4, r1
 80032d0:	461a      	mov	r2, r3
 80032d2:	4b50      	ldr	r3, [pc, #320]	; (8003414 <UART_SetConfig+0x6f4>)
 80032d4:	fba3 2302 	umull	r2, r3, r3, r2
 80032d8:	095b      	lsrs	r3, r3, #5
 80032da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	469b      	mov	fp, r3
 80032e2:	f04f 0c00 	mov.w	ip, #0
 80032e6:	46d9      	mov	r9, fp
 80032e8:	46e2      	mov	sl, ip
 80032ea:	eb19 0309 	adds.w	r3, r9, r9
 80032ee:	eb4a 040a 	adc.w	r4, sl, sl
 80032f2:	4699      	mov	r9, r3
 80032f4:	46a2      	mov	sl, r4
 80032f6:	eb19 090b 	adds.w	r9, r9, fp
 80032fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80032fe:	f04f 0100 	mov.w	r1, #0
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800330a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800330e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003312:	4689      	mov	r9, r1
 8003314:	4692      	mov	sl, r2
 8003316:	eb1b 0509 	adds.w	r5, fp, r9
 800331a:	eb4c 060a 	adc.w	r6, ip, sl
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	4619      	mov	r1, r3
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	f04f 0300 	mov.w	r3, #0
 800332c:	f04f 0400 	mov.w	r4, #0
 8003330:	0094      	lsls	r4, r2, #2
 8003332:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003336:	008b      	lsls	r3, r1, #2
 8003338:	461a      	mov	r2, r3
 800333a:	4623      	mov	r3, r4
 800333c:	4628      	mov	r0, r5
 800333e:	4631      	mov	r1, r6
 8003340:	f7fc ff4a 	bl	80001d8 <__aeabi_uldivmod>
 8003344:	4603      	mov	r3, r0
 8003346:	460c      	mov	r4, r1
 8003348:	461a      	mov	r2, r3
 800334a:	4b32      	ldr	r3, [pc, #200]	; (8003414 <UART_SetConfig+0x6f4>)
 800334c:	fba3 1302 	umull	r1, r3, r3, r2
 8003350:	095b      	lsrs	r3, r3, #5
 8003352:	2164      	movs	r1, #100	; 0x64
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	3332      	adds	r3, #50	; 0x32
 800335e:	4a2d      	ldr	r2, [pc, #180]	; (8003414 <UART_SetConfig+0x6f4>)
 8003360:	fba2 2303 	umull	r2, r3, r2, r3
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800336a:	4498      	add	r8, r3
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	469b      	mov	fp, r3
 8003370:	f04f 0c00 	mov.w	ip, #0
 8003374:	46d9      	mov	r9, fp
 8003376:	46e2      	mov	sl, ip
 8003378:	eb19 0309 	adds.w	r3, r9, r9
 800337c:	eb4a 040a 	adc.w	r4, sl, sl
 8003380:	4699      	mov	r9, r3
 8003382:	46a2      	mov	sl, r4
 8003384:	eb19 090b 	adds.w	r9, r9, fp
 8003388:	eb4a 0a0c 	adc.w	sl, sl, ip
 800338c:	f04f 0100 	mov.w	r1, #0
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003398:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800339c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033a0:	4689      	mov	r9, r1
 80033a2:	4692      	mov	sl, r2
 80033a4:	eb1b 0509 	adds.w	r5, fp, r9
 80033a8:	eb4c 060a 	adc.w	r6, ip, sl
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	4619      	mov	r1, r3
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	f04f 0300 	mov.w	r3, #0
 80033ba:	f04f 0400 	mov.w	r4, #0
 80033be:	0094      	lsls	r4, r2, #2
 80033c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033c4:	008b      	lsls	r3, r1, #2
 80033c6:	461a      	mov	r2, r3
 80033c8:	4623      	mov	r3, r4
 80033ca:	4628      	mov	r0, r5
 80033cc:	4631      	mov	r1, r6
 80033ce:	f7fc ff03 	bl	80001d8 <__aeabi_uldivmod>
 80033d2:	4603      	mov	r3, r0
 80033d4:	460c      	mov	r4, r1
 80033d6:	461a      	mov	r2, r3
 80033d8:	4b0e      	ldr	r3, [pc, #56]	; (8003414 <UART_SetConfig+0x6f4>)
 80033da:	fba3 1302 	umull	r1, r3, r3, r2
 80033de:	095b      	lsrs	r3, r3, #5
 80033e0:	2164      	movs	r1, #100	; 0x64
 80033e2:	fb01 f303 	mul.w	r3, r1, r3
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	3332      	adds	r3, #50	; 0x32
 80033ec:	4a09      	ldr	r2, [pc, #36]	; (8003414 <UART_SetConfig+0x6f4>)
 80033ee:	fba2 2303 	umull	r2, r3, r2, r3
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	f003 020f 	and.w	r2, r3, #15
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4442      	add	r2, r8
 80033fe:	609a      	str	r2, [r3, #8]
}
 8003400:	e7ff      	b.n	8003402 <UART_SetConfig+0x6e2>
 8003402:	bf00      	nop
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800340c:	40011000 	.word	0x40011000
 8003410:	40011400 	.word	0x40011400
 8003414:	51eb851f 	.word	0x51eb851f

08003418 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003418:	b084      	sub	sp, #16
 800341a:	b580      	push	{r7, lr}
 800341c:	b084      	sub	sp, #16
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	f107 001c 	add.w	r0, r7, #28
 8003426:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800342a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342c:	2b01      	cmp	r3, #1
 800342e:	d122      	bne.n	8003476 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003434:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800345a:	2b01      	cmp	r3, #1
 800345c:	d105      	bne.n	800346a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f001 fab4 	bl	80049d8 <USB_CoreReset>
 8003470:	4603      	mov	r3, r0
 8003472:	73fb      	strb	r3, [r7, #15]
 8003474:	e01a      	b.n	80034ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f001 faa8 	bl	80049d8 <USB_CoreReset>
 8003488:	4603      	mov	r3, r0
 800348a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800348c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003496:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	639a      	str	r2, [r3, #56]	; 0x38
 800349e:	e005      	b.n	80034ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80034ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d10b      	bne.n	80034ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f043 0206 	orr.w	r2, r3, #6
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f043 0220 	orr.w	r2, r3, #32
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034d6:	b004      	add	sp, #16
 80034d8:	4770      	bx	lr
	...

080034dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	4613      	mov	r3, r2
 80034e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80034ea:	79fb      	ldrb	r3, [r7, #7]
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d165      	bne.n	80035bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	4a41      	ldr	r2, [pc, #260]	; (80035f8 <USB_SetTurnaroundTime+0x11c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d906      	bls.n	8003506 <USB_SetTurnaroundTime+0x2a>
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4a40      	ldr	r2, [pc, #256]	; (80035fc <USB_SetTurnaroundTime+0x120>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d802      	bhi.n	8003506 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003500:	230f      	movs	r3, #15
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	e062      	b.n	80035cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4a3c      	ldr	r2, [pc, #240]	; (80035fc <USB_SetTurnaroundTime+0x120>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d906      	bls.n	800351c <USB_SetTurnaroundTime+0x40>
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4a3b      	ldr	r2, [pc, #236]	; (8003600 <USB_SetTurnaroundTime+0x124>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d802      	bhi.n	800351c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003516:	230e      	movs	r3, #14
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	e057      	b.n	80035cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4a38      	ldr	r2, [pc, #224]	; (8003600 <USB_SetTurnaroundTime+0x124>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d906      	bls.n	8003532 <USB_SetTurnaroundTime+0x56>
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	4a37      	ldr	r2, [pc, #220]	; (8003604 <USB_SetTurnaroundTime+0x128>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d802      	bhi.n	8003532 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800352c:	230d      	movs	r3, #13
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	e04c      	b.n	80035cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	4a33      	ldr	r2, [pc, #204]	; (8003604 <USB_SetTurnaroundTime+0x128>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d906      	bls.n	8003548 <USB_SetTurnaroundTime+0x6c>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	4a32      	ldr	r2, [pc, #200]	; (8003608 <USB_SetTurnaroundTime+0x12c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d802      	bhi.n	8003548 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003542:	230c      	movs	r3, #12
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	e041      	b.n	80035cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4a2f      	ldr	r2, [pc, #188]	; (8003608 <USB_SetTurnaroundTime+0x12c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d906      	bls.n	800355e <USB_SetTurnaroundTime+0x82>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	4a2e      	ldr	r2, [pc, #184]	; (800360c <USB_SetTurnaroundTime+0x130>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d802      	bhi.n	800355e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003558:	230b      	movs	r3, #11
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	e036      	b.n	80035cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	4a2a      	ldr	r2, [pc, #168]	; (800360c <USB_SetTurnaroundTime+0x130>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d906      	bls.n	8003574 <USB_SetTurnaroundTime+0x98>
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	4a29      	ldr	r2, [pc, #164]	; (8003610 <USB_SetTurnaroundTime+0x134>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d802      	bhi.n	8003574 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800356e:	230a      	movs	r3, #10
 8003570:	617b      	str	r3, [r7, #20]
 8003572:	e02b      	b.n	80035cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	4a26      	ldr	r2, [pc, #152]	; (8003610 <USB_SetTurnaroundTime+0x134>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d906      	bls.n	800358a <USB_SetTurnaroundTime+0xae>
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4a25      	ldr	r2, [pc, #148]	; (8003614 <USB_SetTurnaroundTime+0x138>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d802      	bhi.n	800358a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003584:	2309      	movs	r3, #9
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	e020      	b.n	80035cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	4a21      	ldr	r2, [pc, #132]	; (8003614 <USB_SetTurnaroundTime+0x138>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d906      	bls.n	80035a0 <USB_SetTurnaroundTime+0xc4>
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	4a20      	ldr	r2, [pc, #128]	; (8003618 <USB_SetTurnaroundTime+0x13c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d802      	bhi.n	80035a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800359a:	2308      	movs	r3, #8
 800359c:	617b      	str	r3, [r7, #20]
 800359e:	e015      	b.n	80035cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4a1d      	ldr	r2, [pc, #116]	; (8003618 <USB_SetTurnaroundTime+0x13c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d906      	bls.n	80035b6 <USB_SetTurnaroundTime+0xda>
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	4a1c      	ldr	r2, [pc, #112]	; (800361c <USB_SetTurnaroundTime+0x140>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d802      	bhi.n	80035b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80035b0:	2307      	movs	r3, #7
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	e00a      	b.n	80035cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80035b6:	2306      	movs	r3, #6
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	e007      	b.n	80035cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80035bc:	79fb      	ldrb	r3, [r7, #7]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d102      	bne.n	80035c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80035c2:	2309      	movs	r3, #9
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	e001      	b.n	80035cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80035c8:	2309      	movs	r3, #9
 80035ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	029b      	lsls	r3, r3, #10
 80035e0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80035e4:	431a      	orrs	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	371c      	adds	r7, #28
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	00d8acbf 	.word	0x00d8acbf
 80035fc:	00e4e1bf 	.word	0x00e4e1bf
 8003600:	00f423ff 	.word	0x00f423ff
 8003604:	0106737f 	.word	0x0106737f
 8003608:	011a499f 	.word	0x011a499f
 800360c:	01312cff 	.word	0x01312cff
 8003610:	014ca43f 	.word	0x014ca43f
 8003614:	016e35ff 	.word	0x016e35ff
 8003618:	01a6ab1f 	.word	0x01a6ab1f
 800361c:	01e847ff 	.word	0x01e847ff

08003620 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f043 0201 	orr.w	r2, r3, #1
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f023 0201 	bic.w	r2, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d106      	bne.n	8003690 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	60da      	str	r2, [r3, #12]
 800368e:	e00b      	b.n	80036a8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003690:	78fb      	ldrb	r3, [r7, #3]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d106      	bne.n	80036a4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	60da      	str	r2, [r3, #12]
 80036a2:	e001      	b.n	80036a8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e003      	b.n	80036b0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80036a8:	2032      	movs	r0, #50	; 0x32
 80036aa:	f7fd fa03 	bl	8000ab4 <HAL_Delay>

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036b8:	b084      	sub	sp, #16
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b086      	sub	sp, #24
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80036c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80036d2:	2300      	movs	r3, #0
 80036d4:	613b      	str	r3, [r7, #16]
 80036d6:	e009      	b.n	80036ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	3340      	adds	r3, #64	; 0x40
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	2200      	movs	r2, #0
 80036e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	3301      	adds	r3, #1
 80036ea:	613b      	str	r3, [r7, #16]
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	2b0e      	cmp	r3, #14
 80036f0:	d9f2      	bls.n	80036d8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80036f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d11c      	bne.n	8003732 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003706:	f043 0302 	orr.w	r3, r3, #2
 800370a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003710:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003728:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	639a      	str	r2, [r3, #56]	; 0x38
 8003730:	e00b      	b.n	800374a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003736:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003742:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003750:	461a      	mov	r2, r3
 8003752:	2300      	movs	r3, #0
 8003754:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800375c:	4619      	mov	r1, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003764:	461a      	mov	r2, r3
 8003766:	680b      	ldr	r3, [r1, #0]
 8003768:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800376a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376c:	2b01      	cmp	r3, #1
 800376e:	d10c      	bne.n	800378a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003772:	2b00      	cmp	r3, #0
 8003774:	d104      	bne.n	8003780 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003776:	2100      	movs	r1, #0
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f949 	bl	8003a10 <USB_SetDevSpeed>
 800377e:	e008      	b.n	8003792 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003780:	2101      	movs	r1, #1
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f944 	bl	8003a10 <USB_SetDevSpeed>
 8003788:	e003      	b.n	8003792 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800378a:	2103      	movs	r1, #3
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f93f 	bl	8003a10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003792:	2110      	movs	r1, #16
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f8f3 	bl	8003980 <USB_FlushTxFifo>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f911 	bl	80039cc <USB_FlushRxFifo>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ba:	461a      	mov	r2, r3
 80037bc:	2300      	movs	r3, #0
 80037be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037c6:	461a      	mov	r2, r3
 80037c8:	2300      	movs	r3, #0
 80037ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d2:	461a      	mov	r2, r3
 80037d4:	2300      	movs	r3, #0
 80037d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037d8:	2300      	movs	r3, #0
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	e043      	b.n	8003866 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037f4:	d118      	bne.n	8003828 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10a      	bne.n	8003812 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4413      	add	r3, r2
 8003804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003808:	461a      	mov	r2, r3
 800380a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	e013      	b.n	800383a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800381e:	461a      	mov	r2, r3
 8003820:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	e008      	b.n	800383a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003834:	461a      	mov	r2, r3
 8003836:	2300      	movs	r3, #0
 8003838:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	015a      	lsls	r2, r3, #5
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	4413      	add	r3, r2
 8003842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003846:	461a      	mov	r2, r3
 8003848:	2300      	movs	r3, #0
 800384a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	015a      	lsls	r2, r3, #5
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4413      	add	r3, r2
 8003854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003858:	461a      	mov	r2, r3
 800385a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800385e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	3301      	adds	r3, #1
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	429a      	cmp	r2, r3
 800386c:	d3b7      	bcc.n	80037de <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800386e:	2300      	movs	r3, #0
 8003870:	613b      	str	r3, [r7, #16]
 8003872:	e043      	b.n	80038fc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4413      	add	r3, r2
 800387c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003886:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800388a:	d118      	bne.n	80038be <USB_DevInit+0x206>
    {
      if (i == 0U)
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10a      	bne.n	80038a8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	015a      	lsls	r2, r3, #5
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4413      	add	r3, r2
 800389a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800389e:	461a      	mov	r2, r3
 80038a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	e013      	b.n	80038d0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b4:	461a      	mov	r2, r3
 80038b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80038ba:	6013      	str	r3, [r2, #0]
 80038bc:	e008      	b.n	80038d0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	015a      	lsls	r2, r3, #5
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ca:	461a      	mov	r2, r3
 80038cc:	2300      	movs	r3, #0
 80038ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038dc:	461a      	mov	r2, r3
 80038de:	2300      	movs	r3, #0
 80038e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ee:	461a      	mov	r2, r3
 80038f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	3301      	adds	r3, #1
 80038fa:	613b      	str	r3, [r7, #16]
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	429a      	cmp	r2, r3
 8003902:	d3b7      	bcc.n	8003874 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003912:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003916:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003924:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003928:	2b00      	cmp	r3, #0
 800392a:	d105      	bne.n	8003938 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	f043 0210 	orr.w	r2, r3, #16
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	699a      	ldr	r2, [r3, #24]
 800393c:	4b0f      	ldr	r3, [pc, #60]	; (800397c <USB_DevInit+0x2c4>)
 800393e:	4313      	orrs	r3, r2
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003946:	2b00      	cmp	r3, #0
 8003948:	d005      	beq.n	8003956 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f043 0208 	orr.w	r2, r3, #8
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003958:	2b01      	cmp	r3, #1
 800395a:	d107      	bne.n	800396c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003964:	f043 0304 	orr.w	r3, r3, #4
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800396c:	7dfb      	ldrb	r3, [r7, #23]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003978:	b004      	add	sp, #16
 800397a:	4770      	bx	lr
 800397c:	803c3800 	.word	0x803c3800

08003980 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	019b      	lsls	r3, r3, #6
 8003992:	f043 0220 	orr.w	r2, r3, #32
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	3301      	adds	r3, #1
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4a09      	ldr	r2, [pc, #36]	; (80039c8 <USB_FlushTxFifo+0x48>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d901      	bls.n	80039ac <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e006      	b.n	80039ba <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	f003 0320 	and.w	r3, r3, #32
 80039b4:	2b20      	cmp	r3, #32
 80039b6:	d0f0      	beq.n	800399a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	00030d40 	.word	0x00030d40

080039cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80039d4:	2300      	movs	r3, #0
 80039d6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2210      	movs	r2, #16
 80039dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	3301      	adds	r3, #1
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4a09      	ldr	r2, [pc, #36]	; (8003a0c <USB_FlushRxFifo+0x40>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d901      	bls.n	80039f0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e006      	b.n	80039fe <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	f003 0310 	and.w	r3, r3, #16
 80039f8:	2b10      	cmp	r3, #16
 80039fa:	d0f0      	beq.n	80039de <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	00030d40 	.word	0x00030d40

08003a10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	68f9      	ldr	r1, [r7, #12]
 8003a2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a30:	4313      	orrs	r3, r2
 8003a32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b087      	sub	sp, #28
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 0306 	and.w	r3, r3, #6
 8003a5a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d102      	bne.n	8003a68 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003a62:	2300      	movs	r3, #0
 8003a64:	75fb      	strb	r3, [r7, #23]
 8003a66:	e00a      	b.n	8003a7e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d002      	beq.n	8003a74 <USB_GetDevSpeed+0x32>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b06      	cmp	r3, #6
 8003a72:	d102      	bne.n	8003a7a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003a74:	2302      	movs	r3, #2
 8003a76:	75fb      	strb	r3, [r7, #23]
 8003a78:	e001      	b.n	8003a7e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003a7a:	230f      	movs	r3, #15
 8003a7c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	371c      	adds	r7, #28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	785b      	ldrb	r3, [r3, #1]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d13a      	bne.n	8003b1e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aae:	69da      	ldr	r2, [r3, #28]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	f003 030f 	and.w	r3, r3, #15
 8003ab8:	2101      	movs	r1, #1
 8003aba:	fa01 f303 	lsl.w	r3, r1, r3
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	68f9      	ldr	r1, [r7, #12]
 8003ac2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d155      	bne.n	8003b8c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	78db      	ldrb	r3, [r3, #3]
 8003afa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003afc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	059b      	lsls	r3, r3, #22
 8003b02:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b04:	4313      	orrs	r3, r2
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	0151      	lsls	r1, r2, #5
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	440a      	add	r2, r1
 8003b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	e036      	b.n	8003b8c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b24:	69da      	ldr	r2, [r3, #28]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	2101      	movs	r1, #1
 8003b30:	fa01 f303 	lsl.w	r3, r1, r3
 8003b34:	041b      	lsls	r3, r3, #16
 8003b36:	68f9      	ldr	r1, [r7, #12]
 8003b38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d11a      	bne.n	8003b8c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	78db      	ldrb	r3, [r3, #3]
 8003b70:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b72:	430b      	orrs	r3, r1
 8003b74:	4313      	orrs	r3, r2
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	0151      	lsls	r1, r2, #5
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	440a      	add	r2, r1
 8003b7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b8a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
	...

08003b9c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	785b      	ldrb	r3, [r3, #1]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d161      	bne.n	8003c7c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bce:	d11f      	bne.n	8003c10 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	0151      	lsls	r1, r2, #5
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	440a      	add	r2, r1
 8003be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003bee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	015a      	lsls	r2, r3, #5
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	0151      	lsls	r1, r2, #5
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	440a      	add	r2, r1
 8003c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	f003 030f 	and.w	r3, r3, #15
 8003c20:	2101      	movs	r1, #1
 8003c22:	fa01 f303 	lsl.w	r3, r1, r3
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	68f9      	ldr	r1, [r7, #12]
 8003c2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c30:	4013      	ands	r3, r2
 8003c32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c3a:	69da      	ldr	r2, [r3, #28]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	f003 030f 	and.w	r3, r3, #15
 8003c44:	2101      	movs	r1, #1
 8003c46:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	68f9      	ldr	r1, [r7, #12]
 8003c50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c54:	4013      	ands	r3, r2
 8003c56:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	0159      	lsls	r1, r3, #5
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	440b      	add	r3, r1
 8003c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c72:	4619      	mov	r1, r3
 8003c74:	4b35      	ldr	r3, [pc, #212]	; (8003d4c <USB_DeactivateEndpoint+0x1b0>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	600b      	str	r3, [r1, #0]
 8003c7a:	e060      	b.n	8003d3e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c92:	d11f      	bne.n	8003cd4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	0151      	lsls	r1, r2, #5
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	440a      	add	r2, r1
 8003caa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cb2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	0151      	lsls	r1, r2, #5
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	440a      	add	r2, r1
 8003cca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cd2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	f003 030f 	and.w	r3, r3, #15
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cea:	041b      	lsls	r3, r3, #16
 8003cec:	43db      	mvns	r3, r3
 8003cee:	68f9      	ldr	r1, [r7, #12]
 8003cf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cfe:	69da      	ldr	r2, [r3, #28]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	f003 030f 	and.w	r3, r3, #15
 8003d08:	2101      	movs	r1, #1
 8003d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0e:	041b      	lsls	r3, r3, #16
 8003d10:	43db      	mvns	r3, r3
 8003d12:	68f9      	ldr	r1, [r7, #12]
 8003d14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d18:	4013      	ands	r3, r2
 8003d1a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	0159      	lsls	r1, r3, #5
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	440b      	add	r3, r1
 8003d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d36:	4619      	mov	r1, r3
 8003d38:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <USB_DeactivateEndpoint+0x1b4>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3714      	adds	r7, #20
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	ec337800 	.word	0xec337800
 8003d50:	eff37800 	.word	0xeff37800

08003d54 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08a      	sub	sp, #40	; 0x28
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	785b      	ldrb	r3, [r3, #1]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	f040 815c 	bne.w	800402e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d132      	bne.n	8003de4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	0151      	lsls	r1, r2, #5
 8003d90:	69fa      	ldr	r2, [r7, #28]
 8003d92:	440a      	add	r2, r1
 8003d94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003da0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	0151      	lsls	r1, r2, #5
 8003db4:	69fa      	ldr	r2, [r7, #28]
 8003db6:	440a      	add	r2, r1
 8003db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003dc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	0151      	lsls	r1, r2, #5
 8003dd4:	69fa      	ldr	r2, [r7, #28]
 8003dd6:	440a      	add	r2, r1
 8003dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ddc:	0cdb      	lsrs	r3, r3, #19
 8003dde:	04db      	lsls	r3, r3, #19
 8003de0:	6113      	str	r3, [r2, #16]
 8003de2:	e074      	b.n	8003ece <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	0151      	lsls	r1, r2, #5
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	440a      	add	r2, r1
 8003dfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dfe:	0cdb      	lsrs	r3, r3, #19
 8003e00:	04db      	lsls	r3, r3, #19
 8003e02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	0151      	lsls	r1, r2, #5
 8003e16:	69fa      	ldr	r2, [r7, #28]
 8003e18:	440a      	add	r2, r1
 8003e1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e34:	691a      	ldr	r2, [r3, #16]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	6959      	ldr	r1, [r3, #20]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	440b      	add	r3, r1
 8003e40:	1e59      	subs	r1, r3, #1
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e4a:	04d9      	lsls	r1, r3, #19
 8003e4c:	4b9d      	ldr	r3, [pc, #628]	; (80040c4 <USB_EPStartXfer+0x370>)
 8003e4e:	400b      	ands	r3, r1
 8003e50:	69b9      	ldr	r1, [r7, #24]
 8003e52:	0148      	lsls	r0, r1, #5
 8003e54:	69f9      	ldr	r1, [r7, #28]
 8003e56:	4401      	add	r1, r0
 8003e58:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e76:	69b9      	ldr	r1, [r7, #24]
 8003e78:	0148      	lsls	r0, r1, #5
 8003e7a:	69f9      	ldr	r1, [r7, #28]
 8003e7c:	4401      	add	r1, r0
 8003e7e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e82:	4313      	orrs	r3, r2
 8003e84:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	78db      	ldrb	r3, [r3, #3]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d11f      	bne.n	8003ece <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	0151      	lsls	r1, r2, #5
 8003ea0:	69fa      	ldr	r2, [r7, #28]
 8003ea2:	440a      	add	r2, r1
 8003ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ea8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003eac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	0151      	lsls	r1, r2, #5
 8003ec0:	69fa      	ldr	r2, [r7, #28]
 8003ec2:	440a      	add	r2, r1
 8003ec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ec8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ecc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d14b      	bne.n	8003f6c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d009      	beq.n	8003ef0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee8:	461a      	mov	r2, r3
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	78db      	ldrb	r3, [r3, #3]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d128      	bne.n	8003f4a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d110      	bne.n	8003f2a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	0151      	lsls	r1, r2, #5
 8003f1a:	69fa      	ldr	r2, [r7, #28]
 8003f1c:	440a      	add	r2, r1
 8003f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	e00f      	b.n	8003f4a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	0151      	lsls	r1, r2, #5
 8003f3c:	69fa      	ldr	r2, [r7, #28]
 8003f3e:	440a      	add	r2, r1
 8003f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f48:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	0151      	lsls	r1, r2, #5
 8003f5c:	69fa      	ldr	r2, [r7, #28]
 8003f5e:	440a      	add	r2, r1
 8003f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	e12f      	b.n	80041cc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	0151      	lsls	r1, r2, #5
 8003f7e:	69fa      	ldr	r2, [r7, #28]
 8003f80:	440a      	add	r2, r1
 8003f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f8a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	78db      	ldrb	r3, [r3, #3]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d015      	beq.n	8003fc0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 8117 	beq.w	80041cc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	2101      	movs	r1, #1
 8003fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb4:	69f9      	ldr	r1, [r7, #28]
 8003fb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	634b      	str	r3, [r1, #52]	; 0x34
 8003fbe:	e105      	b.n	80041cc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d110      	bne.n	8003ff2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	0151      	lsls	r1, r2, #5
 8003fe2:	69fa      	ldr	r2, [r7, #28]
 8003fe4:	440a      	add	r2, r1
 8003fe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	e00f      	b.n	8004012 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	0151      	lsls	r1, r2, #5
 8004004:	69fa      	ldr	r2, [r7, #28]
 8004006:	440a      	add	r2, r1
 8004008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800400c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004010:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	68d9      	ldr	r1, [r3, #12]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	781a      	ldrb	r2, [r3, #0]
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	b298      	uxth	r0, r3
 8004020:	79fb      	ldrb	r3, [r7, #7]
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	4603      	mov	r3, r0
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 fa2b 	bl	8004482 <USB_WritePacket>
 800402c:	e0ce      	b.n	80041cc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	015a      	lsls	r2, r3, #5
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	4413      	add	r3, r2
 8004036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	0151      	lsls	r1, r2, #5
 8004040:	69fa      	ldr	r2, [r7, #28]
 8004042:	440a      	add	r2, r1
 8004044:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004048:	0cdb      	lsrs	r3, r3, #19
 800404a:	04db      	lsls	r3, r3, #19
 800404c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	4413      	add	r3, r2
 8004056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	0151      	lsls	r1, r2, #5
 8004060:	69fa      	ldr	r2, [r7, #28]
 8004062:	440a      	add	r2, r1
 8004064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004068:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800406c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004070:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d126      	bne.n	80040c8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	015a      	lsls	r2, r3, #5
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	4413      	add	r3, r2
 8004082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004090:	69b9      	ldr	r1, [r7, #24]
 8004092:	0148      	lsls	r0, r1, #5
 8004094:	69f9      	ldr	r1, [r7, #28]
 8004096:	4401      	add	r1, r0
 8004098:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800409c:	4313      	orrs	r3, r2
 800409e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	0151      	lsls	r1, r2, #5
 80040b2:	69fa      	ldr	r2, [r7, #28]
 80040b4:	440a      	add	r2, r1
 80040b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040be:	6113      	str	r3, [r2, #16]
 80040c0:	e036      	b.n	8004130 <USB_EPStartXfer+0x3dc>
 80040c2:	bf00      	nop
 80040c4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	695a      	ldr	r2, [r3, #20]
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	4413      	add	r3, r2
 80040d2:	1e5a      	subs	r2, r3, #1
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040dc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	8afb      	ldrh	r3, [r7, #22]
 80040ee:	04d9      	lsls	r1, r3, #19
 80040f0:	4b39      	ldr	r3, [pc, #228]	; (80041d8 <USB_EPStartXfer+0x484>)
 80040f2:	400b      	ands	r3, r1
 80040f4:	69b9      	ldr	r1, [r7, #24]
 80040f6:	0148      	lsls	r0, r1, #5
 80040f8:	69f9      	ldr	r1, [r7, #28]
 80040fa:	4401      	add	r1, r0
 80040fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004100:	4313      	orrs	r3, r2
 8004102:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004110:	691a      	ldr	r2, [r3, #16]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	8af9      	ldrh	r1, [r7, #22]
 8004118:	fb01 f303 	mul.w	r3, r1, r3
 800411c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004120:	69b9      	ldr	r1, [r7, #24]
 8004122:	0148      	lsls	r0, r1, #5
 8004124:	69f9      	ldr	r1, [r7, #28]
 8004126:	4401      	add	r1, r0
 8004128:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800412c:	4313      	orrs	r3, r2
 800412e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004130:	79fb      	ldrb	r3, [r7, #7]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d10d      	bne.n	8004152 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d009      	beq.n	8004152 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	68d9      	ldr	r1, [r3, #12]
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800414e:	460a      	mov	r2, r1
 8004150:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	78db      	ldrb	r3, [r3, #3]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d128      	bne.n	80041ac <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004166:	2b00      	cmp	r3, #0
 8004168:	d110      	bne.n	800418c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	4413      	add	r3, r2
 8004172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	0151      	lsls	r1, r2, #5
 800417c:	69fa      	ldr	r2, [r7, #28]
 800417e:	440a      	add	r2, r1
 8004180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004184:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	e00f      	b.n	80041ac <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	4413      	add	r3, r2
 8004194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	0151      	lsls	r1, r2, #5
 800419e:	69fa      	ldr	r2, [r7, #28]
 80041a0:	440a      	add	r2, r1
 80041a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041aa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	0151      	lsls	r1, r2, #5
 80041be:	69fa      	ldr	r2, [r7, #28]
 80041c0:	440a      	add	r2, r1
 80041c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3720      	adds	r7, #32
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	1ff80000 	.word	0x1ff80000

080041dc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	4613      	mov	r3, r2
 80041e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	785b      	ldrb	r3, [r3, #1]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	f040 80cd 	bne.w	8004398 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d132      	bne.n	800426c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	0151      	lsls	r1, r2, #5
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	440a      	add	r2, r1
 800421c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004220:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004224:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004228:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	015a      	lsls	r2, r3, #5
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	4413      	add	r3, r2
 8004232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	0151      	lsls	r1, r2, #5
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	440a      	add	r2, r1
 8004240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004244:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004248:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	4413      	add	r3, r2
 8004252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	0151      	lsls	r1, r2, #5
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	440a      	add	r2, r1
 8004260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004264:	0cdb      	lsrs	r3, r3, #19
 8004266:	04db      	lsls	r3, r3, #19
 8004268:	6113      	str	r3, [r2, #16]
 800426a:	e04e      	b.n	800430a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	0151      	lsls	r1, r2, #5
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	440a      	add	r2, r1
 8004282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004286:	0cdb      	lsrs	r3, r3, #19
 8004288:	04db      	lsls	r3, r3, #19
 800428a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	4413      	add	r3, r2
 8004294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	0151      	lsls	r1, r2, #5
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	440a      	add	r2, r1
 80042a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042ae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	695a      	ldr	r2, [r3, #20]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d903      	bls.n	80042c4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	0151      	lsls	r1, r2, #5
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	440a      	add	r2, r1
 80042da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f0:	691a      	ldr	r2, [r3, #16]
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042fa:	6939      	ldr	r1, [r7, #16]
 80042fc:	0148      	lsls	r0, r1, #5
 80042fe:	6979      	ldr	r1, [r7, #20]
 8004300:	4401      	add	r1, r0
 8004302:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004306:	4313      	orrs	r3, r2
 8004308:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800430a:	79fb      	ldrb	r3, [r7, #7]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d11e      	bne.n	800434e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d009      	beq.n	800432c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004324:	461a      	mov	r2, r3
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	015a      	lsls	r2, r3, #5
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	4413      	add	r3, r2
 8004334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	0151      	lsls	r1, r2, #5
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	440a      	add	r2, r1
 8004342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004346:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	e092      	b.n	8004474 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	4413      	add	r3, r2
 8004356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	0151      	lsls	r1, r2, #5
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	440a      	add	r2, r1
 8004364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004368:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800436c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d07e      	beq.n	8004474 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800437c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	2101      	movs	r1, #1
 8004388:	fa01 f303 	lsl.w	r3, r1, r3
 800438c:	6979      	ldr	r1, [r7, #20]
 800438e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004392:	4313      	orrs	r3, r2
 8004394:	634b      	str	r3, [r1, #52]	; 0x34
 8004396:	e06d      	b.n	8004474 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	0151      	lsls	r1, r2, #5
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	440a      	add	r2, r1
 80043ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043b2:	0cdb      	lsrs	r3, r3, #19
 80043b4:	04db      	lsls	r3, r3, #19
 80043b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	0151      	lsls	r1, r2, #5
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	440a      	add	r2, r1
 80043ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043da:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	0151      	lsls	r1, r2, #5
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	440a      	add	r2, r1
 8004402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004406:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800440a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	4413      	add	r3, r2
 8004414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004418:	691a      	ldr	r2, [r3, #16]
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004422:	6939      	ldr	r1, [r7, #16]
 8004424:	0148      	lsls	r0, r1, #5
 8004426:	6979      	ldr	r1, [r7, #20]
 8004428:	4401      	add	r1, r0
 800442a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800442e:	4313      	orrs	r3, r2
 8004430:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004432:	79fb      	ldrb	r3, [r7, #7]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d10d      	bne.n	8004454 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d009      	beq.n	8004454 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	68d9      	ldr	r1, [r3, #12]
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	4413      	add	r3, r2
 800444c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004450:	460a      	mov	r2, r1
 8004452:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	4413      	add	r3, r2
 800445c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	0151      	lsls	r1, r2, #5
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	440a      	add	r2, r1
 800446a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800446e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004472:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	371c      	adds	r7, #28
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004482:	b480      	push	{r7}
 8004484:	b089      	sub	sp, #36	; 0x24
 8004486:	af00      	add	r7, sp, #0
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	4611      	mov	r1, r2
 800448e:	461a      	mov	r2, r3
 8004490:	460b      	mov	r3, r1
 8004492:	71fb      	strb	r3, [r7, #7]
 8004494:	4613      	mov	r3, r2
 8004496:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80044a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d11a      	bne.n	80044de <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80044a8:	88bb      	ldrh	r3, [r7, #4]
 80044aa:	3303      	adds	r3, #3
 80044ac:	089b      	lsrs	r3, r3, #2
 80044ae:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80044b0:	2300      	movs	r3, #0
 80044b2:	61bb      	str	r3, [r7, #24]
 80044b4:	e00f      	b.n	80044d6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80044b6:	79fb      	ldrb	r3, [r7, #7]
 80044b8:	031a      	lsls	r2, r3, #12
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044c2:	461a      	mov	r2, r3
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	3304      	adds	r3, #4
 80044ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	3301      	adds	r3, #1
 80044d4:	61bb      	str	r3, [r7, #24]
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d3eb      	bcc.n	80044b6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3724      	adds	r7, #36	; 0x24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b089      	sub	sp, #36	; 0x24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	4613      	mov	r3, r2
 80044f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004502:	88fb      	ldrh	r3, [r7, #6]
 8004504:	3303      	adds	r3, #3
 8004506:	089b      	lsrs	r3, r3, #2
 8004508:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800450a:	2300      	movs	r3, #0
 800450c:	61bb      	str	r3, [r7, #24]
 800450e:	e00b      	b.n	8004528 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	601a      	str	r2, [r3, #0]
    pDest++;
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	3304      	adds	r3, #4
 8004520:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	3301      	adds	r3, #1
 8004526:	61bb      	str	r3, [r7, #24]
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	429a      	cmp	r2, r3
 800452e:	d3ef      	bcc.n	8004510 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004530:	69fb      	ldr	r3, [r7, #28]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3724      	adds	r7, #36	; 0x24
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800453e:	b480      	push	{r7}
 8004540:	b085      	sub	sp, #20
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	785b      	ldrb	r3, [r3, #1]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d12c      	bne.n	80045b4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	db12      	blt.n	8004592 <USB_EPSetStall+0x54>
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00f      	beq.n	8004592 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	0151      	lsls	r1, r2, #5
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	440a      	add	r2, r1
 8004588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800458c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004590:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	015a      	lsls	r2, r3, #5
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4413      	add	r3, r2
 800459a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	0151      	lsls	r1, r2, #5
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	440a      	add	r2, r1
 80045a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045b0:	6013      	str	r3, [r2, #0]
 80045b2:	e02b      	b.n	800460c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	db12      	blt.n	80045ec <USB_EPSetStall+0xae>
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00f      	beq.n	80045ec <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	0151      	lsls	r1, r2, #5
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	440a      	add	r2, r1
 80045e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045ea:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	0151      	lsls	r1, r2, #5
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	440a      	add	r2, r1
 8004602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004606:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800460a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800461a:	b480      	push	{r7}
 800461c:	b085      	sub	sp, #20
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	785b      	ldrb	r3, [r3, #1]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d128      	bne.n	8004688 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	015a      	lsls	r2, r3, #5
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4413      	add	r3, r2
 800463e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	0151      	lsls	r1, r2, #5
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	440a      	add	r2, r1
 800464c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004650:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004654:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	78db      	ldrb	r3, [r3, #3]
 800465a:	2b03      	cmp	r3, #3
 800465c:	d003      	beq.n	8004666 <USB_EPClearStall+0x4c>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	78db      	ldrb	r3, [r3, #3]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d138      	bne.n	80046d8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4413      	add	r3, r2
 800466e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	0151      	lsls	r1, r2, #5
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	440a      	add	r2, r1
 800467c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	e027      	b.n	80046d8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	0151      	lsls	r1, r2, #5
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	440a      	add	r2, r1
 800469e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	78db      	ldrb	r3, [r3, #3]
 80046ac:	2b03      	cmp	r3, #3
 80046ae:	d003      	beq.n	80046b8 <USB_EPClearStall+0x9e>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	78db      	ldrb	r3, [r3, #3]
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d10f      	bne.n	80046d8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	0151      	lsls	r1, r2, #5
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	440a      	add	r2, r1
 80046ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b085      	sub	sp, #20
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	460b      	mov	r3, r1
 80046f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004704:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004708:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	78fb      	ldrb	r3, [r7, #3]
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800471a:	68f9      	ldr	r1, [r7, #12]
 800471c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004720:	4313      	orrs	r3, r2
 8004722:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b084      	sub	sp, #16
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800474c:	f023 0302 	bic.w	r3, r3, #2
 8004750:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004752:	2003      	movs	r0, #3
 8004754:	f7fc f9ae 	bl	8000ab4 <HAL_Delay>

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b084      	sub	sp, #16
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800477c:	f043 0302 	orr.w	r3, r3, #2
 8004780:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004782:	2003      	movs	r0, #3
 8004784:	f7fc f996 	bl	8000ab4 <HAL_Delay>

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004792:	b480      	push	{r7}
 8004794:	b085      	sub	sp, #20
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	4013      	ands	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80047aa:	68fb      	ldr	r3, [r7, #12]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	4013      	ands	r3, r2
 80047da:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	0c1b      	lsrs	r3, r3, #16
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	4013      	ands	r3, r2
 800480e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	b29b      	uxth	r3, r3
}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	460b      	mov	r3, r1
 800482a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004830:	78fb      	ldrb	r3, [r7, #3]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	4013      	ands	r3, r2
 800484c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800484e:	68bb      	ldr	r3, [r7, #8]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	fa22 f303 	lsr.w	r3, r2, r3
 800488c:	01db      	lsls	r3, r3, #7
 800488e:	b2db      	uxtb	r3, r3
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004896:	78fb      	ldrb	r3, [r7, #3]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	4013      	ands	r3, r2
 80048a8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048aa:	68bb      	ldr	r3, [r7, #8]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	371c      	adds	r7, #28
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	f003 0301 	and.w	r3, r3, #1
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80048f2:	f023 0307 	bic.w	r3, r3, #7
 80048f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800490a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
	...

0800491c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	460b      	mov	r3, r1
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	333c      	adds	r3, #60	; 0x3c
 8004932:	3304      	adds	r3, #4
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	4a26      	ldr	r2, [pc, #152]	; (80049d4 <USB_EP0_OutStart+0xb8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d90a      	bls.n	8004956 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800494c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004950:	d101      	bne.n	8004956 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	e037      	b.n	80049c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495c:	461a      	mov	r2, r3
 800495e:	2300      	movs	r3, #0
 8004960:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004970:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004974:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004984:	f043 0318 	orr.w	r3, r3, #24
 8004988:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004998:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800499c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800499e:	7afb      	ldrb	r3, [r7, #11]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d10f      	bne.n	80049c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049aa:	461a      	mov	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049be:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80049c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	371c      	adds	r7, #28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	4f54300a 	.word	0x4f54300a

080049d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	3301      	adds	r3, #1
 80049e8:	60fb      	str	r3, [r7, #12]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4a13      	ldr	r2, [pc, #76]	; (8004a3c <USB_CoreReset+0x64>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d901      	bls.n	80049f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e01b      	b.n	8004a2e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	daf2      	bge.n	80049e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	f043 0201 	orr.w	r2, r3, #1
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	3301      	adds	r3, #1
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4a09      	ldr	r2, [pc, #36]	; (8004a3c <USB_CoreReset+0x64>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d901      	bls.n	8004a20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e006      	b.n	8004a2e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d0f0      	beq.n	8004a0e <USB_CoreReset+0x36>

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	00030d40 	.word	0x00030d40

08004a40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004a4c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004a50:	f002 f92c 	bl	8006cac <malloc>
 8004a54:	4603      	mov	r3, r0
 8004a56:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d105      	bne.n	8004a6a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004a66:	2302      	movs	r3, #2
 8004a68:	e066      	b.n	8004b38 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	7c1b      	ldrb	r3, [r3, #16]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d119      	bne.n	8004aae <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a7e:	2202      	movs	r2, #2
 8004a80:	2181      	movs	r1, #129	; 0x81
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f001 ff99 	bl	80069ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004a8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a92:	2202      	movs	r2, #2
 8004a94:	2101      	movs	r1, #1
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f001 ff8f 	bl	80069ba <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2210      	movs	r2, #16
 8004aa8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004aac:	e016      	b.n	8004adc <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004aae:	2340      	movs	r3, #64	; 0x40
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	2181      	movs	r1, #129	; 0x81
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f001 ff80 	bl	80069ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004ac0:	2340      	movs	r3, #64	; 0x40
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f001 ff77 	bl	80069ba <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2210      	movs	r2, #16
 8004ad8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004adc:	2308      	movs	r3, #8
 8004ade:	2203      	movs	r2, #3
 8004ae0:	2182      	movs	r1, #130	; 0x82
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f001 ff69 	bl	80069ba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	7c1b      	ldrb	r3, [r3, #16]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d109      	bne.n	8004b26 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f002 f83a 	bl	8006b98 <USBD_LL_PrepareReceive>
 8004b24:	e007      	b.n	8004b36 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b2c:	2340      	movs	r3, #64	; 0x40
 8004b2e:	2101      	movs	r1, #1
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f002 f831 	bl	8006b98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004b50:	2181      	movs	r1, #129	; 0x81
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f001 ff57 	bl	8006a06 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004b5e:	2101      	movs	r1, #1
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f001 ff50 	bl	8006a06 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004b6e:	2182      	movs	r1, #130	; 0x82
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f001 ff48 	bl	8006a06 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00e      	beq.n	8004bae <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f002 f88b 	bl	8006cbc <free>
    pdev->pClassData = NULL;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bc8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d03a      	beq.n	8004c58 <USBD_CDC_Setup+0xa0>
 8004be2:	2b20      	cmp	r3, #32
 8004be4:	f040 8097 	bne.w	8004d16 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	88db      	ldrh	r3, [r3, #6]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d029      	beq.n	8004c44 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	b25b      	sxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	da11      	bge.n	8004c1e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8004c06:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	88d2      	ldrh	r2, [r2, #6]
 8004c0c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004c0e:	6939      	ldr	r1, [r7, #16]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	88db      	ldrh	r3, [r3, #6]
 8004c14:	461a      	mov	r2, r3
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f001 fa9d 	bl	8006156 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8004c1c:	e082      	b.n	8004d24 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	785a      	ldrb	r2, [r3, #1]
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	88db      	ldrh	r3, [r3, #6]
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004c34:	6939      	ldr	r1, [r7, #16]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	88db      	ldrh	r3, [r3, #6]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f001 fab6 	bl	80061ae <USBD_CtlPrepareRx>
    break;
 8004c42:	e06f      	b.n	8004d24 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	7850      	ldrb	r0, [r2, #1]
 8004c50:	2200      	movs	r2, #0
 8004c52:	6839      	ldr	r1, [r7, #0]
 8004c54:	4798      	blx	r3
    break;
 8004c56:	e065      	b.n	8004d24 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	785b      	ldrb	r3, [r3, #1]
 8004c5c:	2b0b      	cmp	r3, #11
 8004c5e:	d84f      	bhi.n	8004d00 <USBD_CDC_Setup+0x148>
 8004c60:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <USBD_CDC_Setup+0xb0>)
 8004c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c66:	bf00      	nop
 8004c68:	08004c99 	.word	0x08004c99
 8004c6c:	08004d0f 	.word	0x08004d0f
 8004c70:	08004d01 	.word	0x08004d01
 8004c74:	08004d01 	.word	0x08004d01
 8004c78:	08004d01 	.word	0x08004d01
 8004c7c:	08004d01 	.word	0x08004d01
 8004c80:	08004d01 	.word	0x08004d01
 8004c84:	08004d01 	.word	0x08004d01
 8004c88:	08004d01 	.word	0x08004d01
 8004c8c:	08004d01 	.word	0x08004d01
 8004c90:	08004cc1 	.word	0x08004cc1
 8004c94:	08004ce9 	.word	0x08004ce9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d107      	bne.n	8004cb2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004ca2:	f107 030c 	add.w	r3, r7, #12
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	4619      	mov	r1, r3
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f001 fa53 	bl	8006156 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004cb0:	e030      	b.n	8004d14 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004cb2:	6839      	ldr	r1, [r7, #0]
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f001 f9dd 	bl	8006074 <USBD_CtlError>
        ret = USBD_FAIL;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	75fb      	strb	r3, [r7, #23]
      break;
 8004cbe:	e029      	b.n	8004d14 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d107      	bne.n	8004cda <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004cca:	f107 030f 	add.w	r3, r7, #15
 8004cce:	2201      	movs	r2, #1
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f001 fa3f 	bl	8006156 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004cd8:	e01c      	b.n	8004d14 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004cda:	6839      	ldr	r1, [r7, #0]
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f001 f9c9 	bl	8006074 <USBD_CtlError>
        ret = USBD_FAIL;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ce6:	e015      	b.n	8004d14 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cee:	2b03      	cmp	r3, #3
 8004cf0:	d00f      	beq.n	8004d12 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8004cf2:	6839      	ldr	r1, [r7, #0]
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f001 f9bd 	bl	8006074 <USBD_CtlError>
        ret = USBD_FAIL;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004cfe:	e008      	b.n	8004d12 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004d00:	6839      	ldr	r1, [r7, #0]
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f001 f9b6 	bl	8006074 <USBD_CtlError>
      ret = USBD_FAIL;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d0c:	e002      	b.n	8004d14 <USBD_CDC_Setup+0x15c>
      break;
 8004d0e:	bf00      	nop
 8004d10:	e008      	b.n	8004d24 <USBD_CDC_Setup+0x16c>
      break;
 8004d12:	bf00      	nop
    }
    break;
 8004d14:	e006      	b.n	8004d24 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8004d16:	6839      	ldr	r1, [r7, #0]
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f001 f9ab 	bl	8006074 <USBD_CtlError>
    ret = USBD_FAIL;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	75fb      	strb	r3, [r7, #23]
    break;
 8004d22:	bf00      	nop
  }

  return (uint8_t)ret;
 8004d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop

08004d30 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004d42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e049      	b.n	8004de6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d58:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004d5a:	78fa      	ldrb	r2, [r7, #3]
 8004d5c:	6879      	ldr	r1, [r7, #4]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	440b      	add	r3, r1
 8004d68:	3318      	adds	r3, #24
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d029      	beq.n	8004dc4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004d70:	78fa      	ldrb	r2, [r7, #3]
 8004d72:	6879      	ldr	r1, [r7, #4]
 8004d74:	4613      	mov	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	3318      	adds	r3, #24
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	78f9      	ldrb	r1, [r7, #3]
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	460b      	mov	r3, r1
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	1a5b      	subs	r3, r3, r1
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4403      	add	r3, r0
 8004d90:	3344      	adds	r3, #68	; 0x44
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	fbb2 f1f3 	udiv	r1, r2, r3
 8004d98:	fb03 f301 	mul.w	r3, r3, r1
 8004d9c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d110      	bne.n	8004dc4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004da2:	78fa      	ldrb	r2, [r7, #3]
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	4613      	mov	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	440b      	add	r3, r1
 8004db0:	3318      	adds	r3, #24
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004db6:	78f9      	ldrb	r1, [r7, #3]
 8004db8:	2300      	movs	r3, #0
 8004dba:	2200      	movs	r2, #0
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f001 feca 	bl	8006b56 <USBD_LL_Transmit>
 8004dc2:	e00f      	b.n	8004de4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004de0:	78fa      	ldrb	r2, [r7, #3]
 8004de2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b084      	sub	sp, #16
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	460b      	mov	r3, r1
 8004df8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e00:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e015      	b.n	8004e3c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004e10:	78fb      	ldrb	r3, [r7, #3]
 8004e12:	4619      	mov	r1, r3
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f001 fee0 	bl	8006bda <USBD_LL_GetRxDataSize>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004e36:	4611      	mov	r1, r2
 8004e38:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e52:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d015      	beq.n	8004e8a <USBD_CDC_EP0_RxReady+0x46>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004e64:	2bff      	cmp	r3, #255	; 0xff
 8004e66:	d010      	beq.n	8004e8a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004e76:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004e7e:	b292      	uxth	r2, r2
 8004e80:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	22ff      	movs	r2, #255	; 0xff
 8004e86:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2243      	movs	r2, #67	; 0x43
 8004ea0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004ea2:	4b03      	ldr	r3, [pc, #12]	; (8004eb0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	20000094 	.word	0x20000094

08004eb4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2243      	movs	r2, #67	; 0x43
 8004ec0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004ec2:	4b03      	ldr	r3, [pc, #12]	; (8004ed0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	20000050 	.word	0x20000050

08004ed4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2243      	movs	r2, #67	; 0x43
 8004ee0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8004ee2:	4b03      	ldr	r3, [pc, #12]	; (8004ef0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	200000d8 	.word	0x200000d8

08004ef4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	220a      	movs	r2, #10
 8004f00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004f02:	4b03      	ldr	r3, [pc, #12]	; (8004f10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	2000000c 	.word	0x2000000c

08004f14 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e004      	b.n	8004f32 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b087      	sub	sp, #28
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	60f8      	str	r0, [r7, #12]
 8004f46:	60b9      	str	r1, [r7, #8]
 8004f48:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f50:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	371c      	adds	r7, #28
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f80:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fa6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e01a      	b.n	8004ff0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d114      	bne.n	8004fee <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004fe2:	2181      	movs	r1, #129	; 0x81
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f001 fdb6 	bl	8006b56 <USBD_LL_Transmit>

    ret = USBD_OK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005006:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005012:	2303      	movs	r3, #3
 8005014:	e016      	b.n	8005044 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	7c1b      	ldrb	r3, [r3, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d109      	bne.n	8005032 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005024:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005028:	2101      	movs	r1, #1
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f001 fdb4 	bl	8006b98 <USBD_LL_PrepareReceive>
 8005030:	e007      	b.n	8005042 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005038:	2340      	movs	r3, #64	; 0x40
 800503a:	2101      	movs	r1, #1
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f001 fdab 	bl	8006b98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	4613      	mov	r3, r2
 8005058:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005060:	2303      	movs	r3, #3
 8005062:	e025      	b.n	80050b0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800507c:	2b00      	cmp	r3, #0
 800507e:	d003      	beq.n	8005088 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	79fa      	ldrb	r2, [r7, #7]
 80050a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f001 fc21 	bl	80068ec <USBD_LL_Init>
 80050aa:	4603      	mov	r3, r0
 80050ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80050ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e010      	b.n	80050f2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e0:	f107 020e 	add.w	r2, r7, #14
 80050e4:	4610      	mov	r0, r2
 80050e6:	4798      	blx	r3
 80050e8:	4602      	mov	r2, r0
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b082      	sub	sp, #8
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f001 fc3e 	bl	8006984 <USBD_LL_Start>
 8005108:	4603      	mov	r3, r0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005112:	b480      	push	{r7}
 8005114:	b083      	sub	sp, #12
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	460b      	mov	r3, r1
 8005132:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005134:	2303      	movs	r3, #3
 8005136:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800513e:	2b00      	cmp	r3, #0
 8005140:	d009      	beq.n	8005156 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	78fa      	ldrb	r2, [r7, #3]
 800514c:	4611      	mov	r1, r2
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	4798      	blx	r3
 8005152:	4603      	mov	r3, r0
 8005154:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005156:	7bfb      	ldrb	r3, [r7, #15]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	460b      	mov	r3, r1
 800516a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005172:	2b00      	cmp	r3, #0
 8005174:	d007      	beq.n	8005186 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	78fa      	ldrb	r2, [r7, #3]
 8005180:	4611      	mov	r1, r2
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	4798      	blx	r3
  }

  return USBD_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80051a0:	6839      	ldr	r1, [r7, #0]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 ff2c 	bl	8006000 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80051b6:	461a      	mov	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80051c4:	f003 031f 	and.w	r3, r3, #31
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d00e      	beq.n	80051ea <USBD_LL_SetupStage+0x5a>
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d302      	bcc.n	80051d6 <USBD_LL_SetupStage+0x46>
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d014      	beq.n	80051fe <USBD_LL_SetupStage+0x6e>
 80051d4:	e01d      	b.n	8005212 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80051dc:	4619      	mov	r1, r3
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 fa18 	bl	8005614 <USBD_StdDevReq>
 80051e4:	4603      	mov	r3, r0
 80051e6:	73fb      	strb	r3, [r7, #15]
      break;
 80051e8:	e020      	b.n	800522c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80051f0:	4619      	mov	r1, r3
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fa7c 	bl	80056f0 <USBD_StdItfReq>
 80051f8:	4603      	mov	r3, r0
 80051fa:	73fb      	strb	r3, [r7, #15]
      break;
 80051fc:	e016      	b.n	800522c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005204:	4619      	mov	r1, r3
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fab8 	bl	800577c <USBD_StdEPReq>
 800520c:	4603      	mov	r3, r0
 800520e:	73fb      	strb	r3, [r7, #15]
      break;
 8005210:	e00c      	b.n	800522c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005218:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800521c:	b2db      	uxtb	r3, r3
 800521e:	4619      	mov	r1, r3
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f001 fc0f 	bl	8006a44 <USBD_LL_StallEP>
 8005226:	4603      	mov	r3, r0
 8005228:	73fb      	strb	r3, [r7, #15]
      break;
 800522a:	bf00      	nop
  }

  return ret;
 800522c:	7bfb      	ldrb	r3, [r7, #15]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b086      	sub	sp, #24
 800523a:	af00      	add	r7, sp, #0
 800523c:	60f8      	str	r0, [r7, #12]
 800523e:	460b      	mov	r3, r1
 8005240:	607a      	str	r2, [r7, #4]
 8005242:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005244:	7afb      	ldrb	r3, [r7, #11]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d137      	bne.n	80052ba <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005250:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005258:	2b03      	cmp	r3, #3
 800525a:	d14a      	bne.n	80052f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	429a      	cmp	r2, r3
 8005266:	d913      	bls.n	8005290 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	1ad2      	subs	r2, r2, r3
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	4293      	cmp	r3, r2
 8005280:	bf28      	it	cs
 8005282:	4613      	movcs	r3, r2
 8005284:	461a      	mov	r2, r3
 8005286:	6879      	ldr	r1, [r7, #4]
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 ffad 	bl	80061e8 <USBD_CtlContinueRx>
 800528e:	e030      	b.n	80052f2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d105      	bne.n	80052b2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 ffa9 	bl	800620a <USBD_CtlSendStatus>
 80052b8:	e01b      	b.n	80052f2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d013      	beq.n	80052ee <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80052cc:	2b03      	cmp	r3, #3
 80052ce:	d10e      	bne.n	80052ee <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	7afa      	ldrb	r2, [r7, #11]
 80052da:	4611      	mov	r1, r2
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	4798      	blx	r3
 80052e0:	4603      	mov	r3, r0
 80052e2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80052e4:	7dfb      	ldrb	r3, [r7, #23]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80052ea:	7dfb      	ldrb	r3, [r7, #23]
 80052ec:	e002      	b.n	80052f4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e000      	b.n	80052f4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3718      	adds	r7, #24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	460b      	mov	r3, r1
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800530a:	7afb      	ldrb	r3, [r7, #11]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d16a      	bne.n	80053e6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	3314      	adds	r3, #20
 8005314:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800531c:	2b02      	cmp	r3, #2
 800531e:	d155      	bne.n	80053cc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	429a      	cmp	r2, r3
 800532a:	d914      	bls.n	8005356 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	1ad2      	subs	r2, r2, r3
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	461a      	mov	r2, r3
 8005340:	6879      	ldr	r1, [r7, #4]
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 ff22 	bl	800618c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005348:	2300      	movs	r3, #0
 800534a:	2200      	movs	r2, #0
 800534c:	2100      	movs	r1, #0
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f001 fc22 	bl	8006b98 <USBD_LL_PrepareReceive>
 8005354:	e03a      	b.n	80053cc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	429a      	cmp	r2, r3
 8005360:	d11c      	bne.n	800539c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800536a:	429a      	cmp	r2, r3
 800536c:	d316      	bcc.n	800539c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005378:	429a      	cmp	r2, r3
 800537a:	d20f      	bcs.n	800539c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800537c:	2200      	movs	r2, #0
 800537e:	2100      	movs	r1, #0
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f000 ff03 	bl	800618c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800538e:	2300      	movs	r3, #0
 8005390:	2200      	movs	r2, #0
 8005392:	2100      	movs	r1, #0
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f001 fbff 	bl	8006b98 <USBD_LL_PrepareReceive>
 800539a:	e017      	b.n	80053cc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00a      	beq.n	80053be <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d105      	bne.n	80053be <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80053be:	2180      	movs	r1, #128	; 0x80
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f001 fb3f 	bl	8006a44 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 ff32 	bl	8006230 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d123      	bne.n	800541e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f7ff fe9b 	bl	8005112 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80053e4:	e01b      	b.n	800541e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d013      	beq.n	800541a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80053f8:	2b03      	cmp	r3, #3
 80053fa:	d10e      	bne.n	800541a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	7afa      	ldrb	r2, [r7, #11]
 8005406:	4611      	mov	r1, r2
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	4798      	blx	r3
 800540c:	4603      	mov	r3, r0
 800540e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005410:	7dfb      	ldrb	r3, [r7, #23]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005416:	7dfb      	ldrb	r3, [r7, #23]
 8005418:	e002      	b.n	8005420 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800541a:	2303      	movs	r3, #3
 800541c:	e000      	b.n	8005420 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005454:	2b00      	cmp	r3, #0
 8005456:	d009      	beq.n	800546c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6852      	ldr	r2, [r2, #4]
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	4611      	mov	r1, r2
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800546c:	2340      	movs	r3, #64	; 0x40
 800546e:	2200      	movs	r2, #0
 8005470:	2100      	movs	r1, #0
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f001 faa1 	bl	80069ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2240      	movs	r2, #64	; 0x40
 8005484:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005488:	2340      	movs	r3, #64	; 0x40
 800548a:	2200      	movs	r2, #0
 800548c:	2180      	movs	r1, #128	; 0x80
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f001 fa93 	bl	80069ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2240      	movs	r2, #64	; 0x40
 800549e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	460b      	mov	r3, r1
 80054b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	78fa      	ldrb	r2, [r7, #3]
 80054ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2204      	movs	r2, #4
 80054e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005502:	2b04      	cmp	r3, #4
 8005504:	d105      	bne.n	8005512 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800552e:	2b03      	cmp	r3, #3
 8005530:	d10b      	bne.n	800554a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d005      	beq.n	800554a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	460b      	mov	r3, r1
 800555e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	460b      	mov	r3, r1
 8005578:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b082      	sub	sp, #8
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d009      	beq.n	80055cc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6852      	ldr	r2, [r2, #4]
 80055c4:	b2d2      	uxtb	r2, r2
 80055c6:	4611      	mov	r1, r2
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	4798      	blx	r3
  }

  return USBD_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b087      	sub	sp, #28
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	3301      	adds	r3, #1
 80055ec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80055f4:	8a3b      	ldrh	r3, [r7, #16]
 80055f6:	021b      	lsls	r3, r3, #8
 80055f8:	b21a      	sxth	r2, r3
 80055fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80055fe:	4313      	orrs	r3, r2
 8005600:	b21b      	sxth	r3, r3
 8005602:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005604:	89fb      	ldrh	r3, [r7, #14]
}
 8005606:	4618      	mov	r0, r3
 8005608:	371c      	adds	r7, #28
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
	...

08005614 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800562a:	2b20      	cmp	r3, #32
 800562c:	d004      	beq.n	8005638 <USBD_StdDevReq+0x24>
 800562e:	2b40      	cmp	r3, #64	; 0x40
 8005630:	d002      	beq.n	8005638 <USBD_StdDevReq+0x24>
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <USBD_StdDevReq+0x38>
 8005636:	e050      	b.n	80056da <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	6839      	ldr	r1, [r7, #0]
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	4798      	blx	r3
 8005646:	4603      	mov	r3, r0
 8005648:	73fb      	strb	r3, [r7, #15]
    break;
 800564a:	e04b      	b.n	80056e4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	785b      	ldrb	r3, [r3, #1]
 8005650:	2b09      	cmp	r3, #9
 8005652:	d83c      	bhi.n	80056ce <USBD_StdDevReq+0xba>
 8005654:	a201      	add	r2, pc, #4	; (adr r2, 800565c <USBD_StdDevReq+0x48>)
 8005656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565a:	bf00      	nop
 800565c:	080056b1 	.word	0x080056b1
 8005660:	080056c5 	.word	0x080056c5
 8005664:	080056cf 	.word	0x080056cf
 8005668:	080056bb 	.word	0x080056bb
 800566c:	080056cf 	.word	0x080056cf
 8005670:	0800568f 	.word	0x0800568f
 8005674:	08005685 	.word	0x08005685
 8005678:	080056cf 	.word	0x080056cf
 800567c:	080056a7 	.word	0x080056a7
 8005680:	08005699 	.word	0x08005699
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005684:	6839      	ldr	r1, [r7, #0]
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f9ce 	bl	8005a28 <USBD_GetDescriptor>
      break;
 800568c:	e024      	b.n	80056d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800568e:	6839      	ldr	r1, [r7, #0]
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fb33 	bl	8005cfc <USBD_SetAddress>
      break;
 8005696:	e01f      	b.n	80056d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005698:	6839      	ldr	r1, [r7, #0]
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fb70 	bl	8005d80 <USBD_SetConfig>
 80056a0:	4603      	mov	r3, r0
 80056a2:	73fb      	strb	r3, [r7, #15]
      break;
 80056a4:	e018      	b.n	80056d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80056a6:	6839      	ldr	r1, [r7, #0]
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fc0d 	bl	8005ec8 <USBD_GetConfig>
      break;
 80056ae:	e013      	b.n	80056d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80056b0:	6839      	ldr	r1, [r7, #0]
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 fc3c 	bl	8005f30 <USBD_GetStatus>
      break;
 80056b8:	e00e      	b.n	80056d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80056ba:	6839      	ldr	r1, [r7, #0]
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 fc6a 	bl	8005f96 <USBD_SetFeature>
      break;
 80056c2:	e009      	b.n	80056d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80056c4:	6839      	ldr	r1, [r7, #0]
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fc79 	bl	8005fbe <USBD_ClrFeature>
      break;
 80056cc:	e004      	b.n	80056d8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80056ce:	6839      	ldr	r1, [r7, #0]
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fccf 	bl	8006074 <USBD_CtlError>
      break;
 80056d6:	bf00      	nop
    }
    break;
 80056d8:	e004      	b.n	80056e4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80056da:	6839      	ldr	r1, [r7, #0]
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fcc9 	bl	8006074 <USBD_CtlError>
    break;
 80056e2:	bf00      	nop
  }

  return ret;
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop

080056f0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005706:	2b20      	cmp	r3, #32
 8005708:	d003      	beq.n	8005712 <USBD_StdItfReq+0x22>
 800570a:	2b40      	cmp	r3, #64	; 0x40
 800570c:	d001      	beq.n	8005712 <USBD_StdItfReq+0x22>
 800570e:	2b00      	cmp	r3, #0
 8005710:	d12a      	bne.n	8005768 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005718:	3b01      	subs	r3, #1
 800571a:	2b02      	cmp	r3, #2
 800571c:	d81d      	bhi.n	800575a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	889b      	ldrh	r3, [r3, #4]
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b01      	cmp	r3, #1
 8005726:	d813      	bhi.n	8005750 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	6839      	ldr	r1, [r7, #0]
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	4798      	blx	r3
 8005736:	4603      	mov	r3, r0
 8005738:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	88db      	ldrh	r3, [r3, #6]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d110      	bne.n	8005764 <USBD_StdItfReq+0x74>
 8005742:	7bfb      	ldrb	r3, [r7, #15]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10d      	bne.n	8005764 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fd5e 	bl	800620a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800574e:	e009      	b.n	8005764 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005750:	6839      	ldr	r1, [r7, #0]
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fc8e 	bl	8006074 <USBD_CtlError>
      break;
 8005758:	e004      	b.n	8005764 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800575a:	6839      	ldr	r1, [r7, #0]
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 fc89 	bl	8006074 <USBD_CtlError>
      break;
 8005762:	e000      	b.n	8005766 <USBD_StdItfReq+0x76>
      break;
 8005764:	bf00      	nop
    }
    break;
 8005766:	e004      	b.n	8005772 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005768:	6839      	ldr	r1, [r7, #0]
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fc82 	bl	8006074 <USBD_CtlError>
    break;
 8005770:	bf00      	nop
  }

  return ret;
 8005772:	7bfb      	ldrb	r3, [r7, #15]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005786:	2300      	movs	r3, #0
 8005788:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	889b      	ldrh	r3, [r3, #4]
 800578e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005798:	2b20      	cmp	r3, #32
 800579a:	d004      	beq.n	80057a6 <USBD_StdEPReq+0x2a>
 800579c:	2b40      	cmp	r3, #64	; 0x40
 800579e:	d002      	beq.n	80057a6 <USBD_StdEPReq+0x2a>
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00a      	beq.n	80057ba <USBD_StdEPReq+0x3e>
 80057a4:	e135      	b.n	8005a12 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	6839      	ldr	r1, [r7, #0]
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	4798      	blx	r3
 80057b4:	4603      	mov	r3, r0
 80057b6:	73fb      	strb	r3, [r7, #15]
    break;
 80057b8:	e130      	b.n	8005a1c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	785b      	ldrb	r3, [r3, #1]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d03e      	beq.n	8005840 <USBD_StdEPReq+0xc4>
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d002      	beq.n	80057cc <USBD_StdEPReq+0x50>
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d077      	beq.n	80058ba <USBD_StdEPReq+0x13e>
 80057ca:	e11c      	b.n	8005a06 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d002      	beq.n	80057dc <USBD_StdEPReq+0x60>
 80057d6:	2b03      	cmp	r3, #3
 80057d8:	d015      	beq.n	8005806 <USBD_StdEPReq+0x8a>
 80057da:	e02b      	b.n	8005834 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80057dc:	7bbb      	ldrb	r3, [r7, #14]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00c      	beq.n	80057fc <USBD_StdEPReq+0x80>
 80057e2:	7bbb      	ldrb	r3, [r7, #14]
 80057e4:	2b80      	cmp	r3, #128	; 0x80
 80057e6:	d009      	beq.n	80057fc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80057e8:	7bbb      	ldrb	r3, [r7, #14]
 80057ea:	4619      	mov	r1, r3
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f001 f929 	bl	8006a44 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80057f2:	2180      	movs	r1, #128	; 0x80
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f001 f925 	bl	8006a44 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80057fa:	e020      	b.n	800583e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80057fc:	6839      	ldr	r1, [r7, #0]
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fc38 	bl	8006074 <USBD_CtlError>
        break;
 8005804:	e01b      	b.n	800583e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	885b      	ldrh	r3, [r3, #2]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10e      	bne.n	800582c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800580e:	7bbb      	ldrb	r3, [r7, #14]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00b      	beq.n	800582c <USBD_StdEPReq+0xb0>
 8005814:	7bbb      	ldrb	r3, [r7, #14]
 8005816:	2b80      	cmp	r3, #128	; 0x80
 8005818:	d008      	beq.n	800582c <USBD_StdEPReq+0xb0>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	88db      	ldrh	r3, [r3, #6]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d104      	bne.n	800582c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8005822:	7bbb      	ldrb	r3, [r7, #14]
 8005824:	4619      	mov	r1, r3
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f001 f90c 	bl	8006a44 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 fcec 	bl	800620a <USBD_CtlSendStatus>

        break;
 8005832:	e004      	b.n	800583e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8005834:	6839      	ldr	r1, [r7, #0]
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fc1c 	bl	8006074 <USBD_CtlError>
        break;
 800583c:	bf00      	nop
      }
      break;
 800583e:	e0e7      	b.n	8005a10 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005846:	2b02      	cmp	r3, #2
 8005848:	d002      	beq.n	8005850 <USBD_StdEPReq+0xd4>
 800584a:	2b03      	cmp	r3, #3
 800584c:	d015      	beq.n	800587a <USBD_StdEPReq+0xfe>
 800584e:	e02d      	b.n	80058ac <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005850:	7bbb      	ldrb	r3, [r7, #14]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00c      	beq.n	8005870 <USBD_StdEPReq+0xf4>
 8005856:	7bbb      	ldrb	r3, [r7, #14]
 8005858:	2b80      	cmp	r3, #128	; 0x80
 800585a:	d009      	beq.n	8005870 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800585c:	7bbb      	ldrb	r3, [r7, #14]
 800585e:	4619      	mov	r1, r3
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f001 f8ef 	bl	8006a44 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005866:	2180      	movs	r1, #128	; 0x80
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f001 f8eb 	bl	8006a44 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800586e:	e023      	b.n	80058b8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8005870:	6839      	ldr	r1, [r7, #0]
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fbfe 	bl	8006074 <USBD_CtlError>
        break;
 8005878:	e01e      	b.n	80058b8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	885b      	ldrh	r3, [r3, #2]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d119      	bne.n	80058b6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005882:	7bbb      	ldrb	r3, [r7, #14]
 8005884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005888:	2b00      	cmp	r3, #0
 800588a:	d004      	beq.n	8005896 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800588c:	7bbb      	ldrb	r3, [r7, #14]
 800588e:	4619      	mov	r1, r3
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f001 f8f6 	bl	8006a82 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fcb7 	bl	800620a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	6839      	ldr	r1, [r7, #0]
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	4798      	blx	r3
        }
        break;
 80058aa:	e004      	b.n	80058b6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80058ac:	6839      	ldr	r1, [r7, #0]
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fbe0 	bl	8006074 <USBD_CtlError>
        break;
 80058b4:	e000      	b.n	80058b8 <USBD_StdEPReq+0x13c>
        break;
 80058b6:	bf00      	nop
      }
      break;
 80058b8:	e0aa      	b.n	8005a10 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d002      	beq.n	80058ca <USBD_StdEPReq+0x14e>
 80058c4:	2b03      	cmp	r3, #3
 80058c6:	d032      	beq.n	800592e <USBD_StdEPReq+0x1b2>
 80058c8:	e097      	b.n	80059fa <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80058ca:	7bbb      	ldrb	r3, [r7, #14]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d007      	beq.n	80058e0 <USBD_StdEPReq+0x164>
 80058d0:	7bbb      	ldrb	r3, [r7, #14]
 80058d2:	2b80      	cmp	r3, #128	; 0x80
 80058d4:	d004      	beq.n	80058e0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80058d6:	6839      	ldr	r1, [r7, #0]
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fbcb 	bl	8006074 <USBD_CtlError>
          break;
 80058de:	e091      	b.n	8005a04 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	da0b      	bge.n	8005900 <USBD_StdEPReq+0x184>
 80058e8:	7bbb      	ldrb	r3, [r7, #14]
 80058ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058ee:	4613      	mov	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	3310      	adds	r3, #16
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	4413      	add	r3, r2
 80058fc:	3304      	adds	r3, #4
 80058fe:	e00b      	b.n	8005918 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005900:	7bbb      	ldrb	r3, [r7, #14]
 8005902:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005906:	4613      	mov	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	4413      	add	r3, r2
 8005916:	3304      	adds	r3, #4
 8005918:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2202      	movs	r2, #2
 8005924:	4619      	mov	r1, r3
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 fc15 	bl	8006156 <USBD_CtlSendData>
        break;
 800592c:	e06a      	b.n	8005a04 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800592e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005932:	2b00      	cmp	r3, #0
 8005934:	da11      	bge.n	800595a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005936:	7bbb      	ldrb	r3, [r7, #14]
 8005938:	f003 020f 	and.w	r2, r3, #15
 800593c:	6879      	ldr	r1, [r7, #4]
 800593e:	4613      	mov	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	440b      	add	r3, r1
 8005948:	3324      	adds	r3, #36	; 0x24
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d117      	bne.n	8005980 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005950:	6839      	ldr	r1, [r7, #0]
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fb8e 	bl	8006074 <USBD_CtlError>
            break;
 8005958:	e054      	b.n	8005a04 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800595a:	7bbb      	ldrb	r3, [r7, #14]
 800595c:	f003 020f 	and.w	r2, r3, #15
 8005960:	6879      	ldr	r1, [r7, #4]
 8005962:	4613      	mov	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	440b      	add	r3, r1
 800596c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005970:	881b      	ldrh	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d104      	bne.n	8005980 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005976:	6839      	ldr	r1, [r7, #0]
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fb7b 	bl	8006074 <USBD_CtlError>
            break;
 800597e:	e041      	b.n	8005a04 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005980:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005984:	2b00      	cmp	r3, #0
 8005986:	da0b      	bge.n	80059a0 <USBD_StdEPReq+0x224>
 8005988:	7bbb      	ldrb	r3, [r7, #14]
 800598a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800598e:	4613      	mov	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	3310      	adds	r3, #16
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	4413      	add	r3, r2
 800599c:	3304      	adds	r3, #4
 800599e:	e00b      	b.n	80059b8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80059a0:	7bbb      	ldrb	r3, [r7, #14]
 80059a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059a6:	4613      	mov	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	4413      	add	r3, r2
 80059b6:	3304      	adds	r3, #4
 80059b8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80059ba:	7bbb      	ldrb	r3, [r7, #14]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d002      	beq.n	80059c6 <USBD_StdEPReq+0x24a>
 80059c0:	7bbb      	ldrb	r3, [r7, #14]
 80059c2:	2b80      	cmp	r3, #128	; 0x80
 80059c4:	d103      	bne.n	80059ce <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2200      	movs	r2, #0
 80059ca:	601a      	str	r2, [r3, #0]
 80059cc:	e00e      	b.n	80059ec <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80059ce:	7bbb      	ldrb	r3, [r7, #14]
 80059d0:	4619      	mov	r1, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f001 f874 	bl	8006ac0 <USBD_LL_IsStallEP>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2201      	movs	r2, #1
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	e002      	b.n	80059ec <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2200      	movs	r2, #0
 80059ea:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2202      	movs	r2, #2
 80059f0:	4619      	mov	r1, r3
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fbaf 	bl	8006156 <USBD_CtlSendData>
          break;
 80059f8:	e004      	b.n	8005a04 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80059fa:	6839      	ldr	r1, [r7, #0]
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 fb39 	bl	8006074 <USBD_CtlError>
        break;
 8005a02:	bf00      	nop
      }
      break;
 8005a04:	e004      	b.n	8005a10 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8005a06:	6839      	ldr	r1, [r7, #0]
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 fb33 	bl	8006074 <USBD_CtlError>
      break;
 8005a0e:	bf00      	nop
    }
    break;
 8005a10:	e004      	b.n	8005a1c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8005a12:	6839      	ldr	r1, [r7, #0]
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fb2d 	bl	8006074 <USBD_CtlError>
    break;
 8005a1a:	bf00      	nop
  }

  return ret;
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
	...

08005a28 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005a36:	2300      	movs	r3, #0
 8005a38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	885b      	ldrh	r3, [r3, #2]
 8005a42:	0a1b      	lsrs	r3, r3, #8
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3b01      	subs	r3, #1
 8005a48:	2b06      	cmp	r3, #6
 8005a4a:	f200 8128 	bhi.w	8005c9e <USBD_GetDescriptor+0x276>
 8005a4e:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <USBD_GetDescriptor+0x2c>)
 8005a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a54:	08005a71 	.word	0x08005a71
 8005a58:	08005a89 	.word	0x08005a89
 8005a5c:	08005ac9 	.word	0x08005ac9
 8005a60:	08005c9f 	.word	0x08005c9f
 8005a64:	08005c9f 	.word	0x08005c9f
 8005a68:	08005c3f 	.word	0x08005c3f
 8005a6c:	08005c6b 	.word	0x08005c6b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	7c12      	ldrb	r2, [r2, #16]
 8005a7c:	f107 0108 	add.w	r1, r7, #8
 8005a80:	4610      	mov	r0, r2
 8005a82:	4798      	blx	r3
 8005a84:	60f8      	str	r0, [r7, #12]
    break;
 8005a86:	e112      	b.n	8005cae <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	7c1b      	ldrb	r3, [r3, #16]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10d      	bne.n	8005aac <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a98:	f107 0208 	add.w	r2, r7, #8
 8005a9c:	4610      	mov	r0, r2
 8005a9e:	4798      	blx	r3
 8005aa0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005aaa:	e100      	b.n	8005cae <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab4:	f107 0208 	add.w	r2, r7, #8
 8005ab8:	4610      	mov	r0, r2
 8005aba:	4798      	blx	r3
 8005abc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	701a      	strb	r2, [r3, #0]
    break;
 8005ac6:	e0f2      	b.n	8005cae <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	885b      	ldrh	r3, [r3, #2]
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b05      	cmp	r3, #5
 8005ad0:	f200 80ac 	bhi.w	8005c2c <USBD_GetDescriptor+0x204>
 8005ad4:	a201      	add	r2, pc, #4	; (adr r2, 8005adc <USBD_GetDescriptor+0xb4>)
 8005ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ada:	bf00      	nop
 8005adc:	08005af5 	.word	0x08005af5
 8005ae0:	08005b29 	.word	0x08005b29
 8005ae4:	08005b5d 	.word	0x08005b5d
 8005ae8:	08005b91 	.word	0x08005b91
 8005aec:	08005bc5 	.word	0x08005bc5
 8005af0:	08005bf9 	.word	0x08005bf9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00b      	beq.n	8005b18 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	7c12      	ldrb	r2, [r2, #16]
 8005b0c:	f107 0108 	add.w	r1, r7, #8
 8005b10:	4610      	mov	r0, r2
 8005b12:	4798      	blx	r3
 8005b14:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b16:	e091      	b.n	8005c3c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005b18:	6839      	ldr	r1, [r7, #0]
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 faaa 	bl	8006074 <USBD_CtlError>
        err++;
 8005b20:	7afb      	ldrb	r3, [r7, #11]
 8005b22:	3301      	adds	r3, #1
 8005b24:	72fb      	strb	r3, [r7, #11]
      break;
 8005b26:	e089      	b.n	8005c3c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00b      	beq.n	8005b4c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	7c12      	ldrb	r2, [r2, #16]
 8005b40:	f107 0108 	add.w	r1, r7, #8
 8005b44:	4610      	mov	r0, r2
 8005b46:	4798      	blx	r3
 8005b48:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b4a:	e077      	b.n	8005c3c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005b4c:	6839      	ldr	r1, [r7, #0]
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 fa90 	bl	8006074 <USBD_CtlError>
        err++;
 8005b54:	7afb      	ldrb	r3, [r7, #11]
 8005b56:	3301      	adds	r3, #1
 8005b58:	72fb      	strb	r3, [r7, #11]
      break;
 8005b5a:	e06f      	b.n	8005c3c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00b      	beq.n	8005b80 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	7c12      	ldrb	r2, [r2, #16]
 8005b74:	f107 0108 	add.w	r1, r7, #8
 8005b78:	4610      	mov	r0, r2
 8005b7a:	4798      	blx	r3
 8005b7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b7e:	e05d      	b.n	8005c3c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005b80:	6839      	ldr	r1, [r7, #0]
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fa76 	bl	8006074 <USBD_CtlError>
        err++;
 8005b88:	7afb      	ldrb	r3, [r7, #11]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	72fb      	strb	r3, [r7, #11]
      break;
 8005b8e:	e055      	b.n	8005c3c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00b      	beq.n	8005bb4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	7c12      	ldrb	r2, [r2, #16]
 8005ba8:	f107 0108 	add.w	r1, r7, #8
 8005bac:	4610      	mov	r0, r2
 8005bae:	4798      	blx	r3
 8005bb0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005bb2:	e043      	b.n	8005c3c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005bb4:	6839      	ldr	r1, [r7, #0]
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fa5c 	bl	8006074 <USBD_CtlError>
        err++;
 8005bbc:	7afb      	ldrb	r3, [r7, #11]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	72fb      	strb	r3, [r7, #11]
      break;
 8005bc2:	e03b      	b.n	8005c3c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00b      	beq.n	8005be8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	7c12      	ldrb	r2, [r2, #16]
 8005bdc:	f107 0108 	add.w	r1, r7, #8
 8005be0:	4610      	mov	r0, r2
 8005be2:	4798      	blx	r3
 8005be4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005be6:	e029      	b.n	8005c3c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005be8:	6839      	ldr	r1, [r7, #0]
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fa42 	bl	8006074 <USBD_CtlError>
        err++;
 8005bf0:	7afb      	ldrb	r3, [r7, #11]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	72fb      	strb	r3, [r7, #11]
      break;
 8005bf6:	e021      	b.n	8005c3c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00b      	beq.n	8005c1c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	7c12      	ldrb	r2, [r2, #16]
 8005c10:	f107 0108 	add.w	r1, r7, #8
 8005c14:	4610      	mov	r0, r2
 8005c16:	4798      	blx	r3
 8005c18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c1a:	e00f      	b.n	8005c3c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005c1c:	6839      	ldr	r1, [r7, #0]
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 fa28 	bl	8006074 <USBD_CtlError>
        err++;
 8005c24:	7afb      	ldrb	r3, [r7, #11]
 8005c26:	3301      	adds	r3, #1
 8005c28:	72fb      	strb	r3, [r7, #11]
      break;
 8005c2a:	e007      	b.n	8005c3c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005c2c:	6839      	ldr	r1, [r7, #0]
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fa20 	bl	8006074 <USBD_CtlError>
      err++;
 8005c34:	7afb      	ldrb	r3, [r7, #11]
 8005c36:	3301      	adds	r3, #1
 8005c38:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8005c3a:	bf00      	nop
    }
    break;
 8005c3c:	e037      	b.n	8005cae <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	7c1b      	ldrb	r3, [r3, #16]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d109      	bne.n	8005c5a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c4e:	f107 0208 	add.w	r2, r7, #8
 8005c52:	4610      	mov	r0, r2
 8005c54:	4798      	blx	r3
 8005c56:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005c58:	e029      	b.n	8005cae <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005c5a:	6839      	ldr	r1, [r7, #0]
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 fa09 	bl	8006074 <USBD_CtlError>
      err++;
 8005c62:	7afb      	ldrb	r3, [r7, #11]
 8005c64:	3301      	adds	r3, #1
 8005c66:	72fb      	strb	r3, [r7, #11]
    break;
 8005c68:	e021      	b.n	8005cae <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	7c1b      	ldrb	r3, [r3, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10d      	bne.n	8005c8e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7a:	f107 0208 	add.w	r2, r7, #8
 8005c7e:	4610      	mov	r0, r2
 8005c80:	4798      	blx	r3
 8005c82:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3301      	adds	r3, #1
 8005c88:	2207      	movs	r2, #7
 8005c8a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005c8c:	e00f      	b.n	8005cae <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005c8e:	6839      	ldr	r1, [r7, #0]
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f9ef 	bl	8006074 <USBD_CtlError>
      err++;
 8005c96:	7afb      	ldrb	r3, [r7, #11]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	72fb      	strb	r3, [r7, #11]
    break;
 8005c9c:	e007      	b.n	8005cae <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8005c9e:	6839      	ldr	r1, [r7, #0]
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f9e7 	bl	8006074 <USBD_CtlError>
    err++;
 8005ca6:	7afb      	ldrb	r3, [r7, #11]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	72fb      	strb	r3, [r7, #11]
    break;
 8005cac:	bf00      	nop
  }

  if (err != 0U)
 8005cae:	7afb      	ldrb	r3, [r7, #11]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d11e      	bne.n	8005cf2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	88db      	ldrh	r3, [r3, #6]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d016      	beq.n	8005cea <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8005cbc:	893b      	ldrh	r3, [r7, #8]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00e      	beq.n	8005ce0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	88da      	ldrh	r2, [r3, #6]
 8005cc6:	893b      	ldrh	r3, [r7, #8]
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	bf28      	it	cs
 8005ccc:	4613      	movcs	r3, r2
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005cd2:	893b      	ldrh	r3, [r7, #8]
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	68f9      	ldr	r1, [r7, #12]
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fa3c 	bl	8006156 <USBD_CtlSendData>
 8005cde:	e009      	b.n	8005cf4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005ce0:	6839      	ldr	r1, [r7, #0]
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f9c6 	bl	8006074 <USBD_CtlError>
 8005ce8:	e004      	b.n	8005cf4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fa8d 	bl	800620a <USBD_CtlSendStatus>
 8005cf0:	e000      	b.n	8005cf4 <USBD_GetDescriptor+0x2cc>
    return;
 8005cf2:	bf00      	nop
    }
  }
}
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop

08005cfc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	889b      	ldrh	r3, [r3, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d130      	bne.n	8005d70 <USBD_SetAddress+0x74>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	88db      	ldrh	r3, [r3, #6]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d12c      	bne.n	8005d70 <USBD_SetAddress+0x74>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	885b      	ldrh	r3, [r3, #2]
 8005d1a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d1c:	d828      	bhi.n	8005d70 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	885b      	ldrh	r3, [r3, #2]
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d30:	2b03      	cmp	r3, #3
 8005d32:	d104      	bne.n	8005d3e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005d34:	6839      	ldr	r1, [r7, #0]
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f99c 	bl	8006074 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d3c:	e01c      	b.n	8005d78 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	7bfa      	ldrb	r2, [r7, #15]
 8005d42:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
 8005d48:	4619      	mov	r1, r3
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 fee4 	bl	8006b18 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 fa5a 	bl	800620a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d004      	beq.n	8005d66 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d64:	e008      	b.n	8005d78 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d6e:	e003      	b.n	8005d78 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005d70:	6839      	ldr	r1, [r7, #0]
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f97e 	bl	8006074 <USBD_CtlError>
  }
}
 8005d78:	bf00      	nop
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	885b      	ldrh	r3, [r3, #2]
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	4b4b      	ldr	r3, [pc, #300]	; (8005ec4 <USBD_SetConfig+0x144>)
 8005d96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005d98:	4b4a      	ldr	r3, [pc, #296]	; (8005ec4 <USBD_SetConfig+0x144>)
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d905      	bls.n	8005dac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005da0:	6839      	ldr	r1, [r7, #0]
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f966 	bl	8006074 <USBD_CtlError>
    return USBD_FAIL;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e087      	b.n	8005ebc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d002      	beq.n	8005dbc <USBD_SetConfig+0x3c>
 8005db6:	2b03      	cmp	r3, #3
 8005db8:	d025      	beq.n	8005e06 <USBD_SetConfig+0x86>
 8005dba:	e071      	b.n	8005ea0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005dbc:	4b41      	ldr	r3, [pc, #260]	; (8005ec4 <USBD_SetConfig+0x144>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d01c      	beq.n	8005dfe <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005dc4:	4b3f      	ldr	r3, [pc, #252]	; (8005ec4 <USBD_SetConfig+0x144>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005dce:	4b3d      	ldr	r3, [pc, #244]	; (8005ec4 <USBD_SetConfig+0x144>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f7ff f9a7 	bl	8005128 <USBD_SetClassConfig>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005dde:	7bfb      	ldrb	r3, [r7, #15]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d004      	beq.n	8005dee <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005de4:	6839      	ldr	r1, [r7, #0]
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f944 	bl	8006074 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005dec:	e065      	b.n	8005eba <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fa0b 	bl	800620a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2203      	movs	r2, #3
 8005df8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005dfc:	e05d      	b.n	8005eba <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 fa03 	bl	800620a <USBD_CtlSendStatus>
    break;
 8005e04:	e059      	b.n	8005eba <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8005e06:	4b2f      	ldr	r3, [pc, #188]	; (8005ec4 <USBD_SetConfig+0x144>)
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d112      	bne.n	8005e34 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2202      	movs	r2, #2
 8005e12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8005e16:	4b2b      	ldr	r3, [pc, #172]	; (8005ec4 <USBD_SetConfig+0x144>)
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005e20:	4b28      	ldr	r3, [pc, #160]	; (8005ec4 <USBD_SetConfig+0x144>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	4619      	mov	r1, r3
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7ff f99a 	bl	8005160 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 f9ec 	bl	800620a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005e32:	e042      	b.n	8005eba <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8005e34:	4b23      	ldr	r3, [pc, #140]	; (8005ec4 <USBD_SetConfig+0x144>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d02a      	beq.n	8005e98 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	4619      	mov	r1, r3
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7ff f988 	bl	8005160 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8005e50:	4b1c      	ldr	r3, [pc, #112]	; (8005ec4 <USBD_SetConfig+0x144>)
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	461a      	mov	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005e5a:	4b1a      	ldr	r3, [pc, #104]	; (8005ec4 <USBD_SetConfig+0x144>)
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7ff f961 	bl	8005128 <USBD_SetClassConfig>
 8005e66:	4603      	mov	r3, r0
 8005e68:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8005e6a:	7bfb      	ldrb	r3, [r7, #15]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00f      	beq.n	8005e90 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8005e70:	6839      	ldr	r1, [r7, #0]
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f8fe 	bl	8006074 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	4619      	mov	r1, r3
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7ff f96d 	bl	8005160 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2202      	movs	r2, #2
 8005e8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005e8e:	e014      	b.n	8005eba <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f9ba 	bl	800620a <USBD_CtlSendStatus>
    break;
 8005e96:	e010      	b.n	8005eba <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f9b6 	bl	800620a <USBD_CtlSendStatus>
    break;
 8005e9e:	e00c      	b.n	8005eba <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8005ea0:	6839      	ldr	r1, [r7, #0]
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f8e6 	bl	8006074 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005ea8:	4b06      	ldr	r3, [pc, #24]	; (8005ec4 <USBD_SetConfig+0x144>)
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	4619      	mov	r1, r3
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7ff f956 	bl	8005160 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	73fb      	strb	r3, [r7, #15]
    break;
 8005eb8:	bf00      	nop
  }

  return ret;
 8005eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	20000204 	.word	0x20000204

08005ec8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	88db      	ldrh	r3, [r3, #6]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d004      	beq.n	8005ee4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005eda:	6839      	ldr	r1, [r7, #0]
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 f8c9 	bl	8006074 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8005ee2:	e021      	b.n	8005f28 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	db17      	blt.n	8005f1e <USBD_GetConfig+0x56>
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	dd02      	ble.n	8005ef8 <USBD_GetConfig+0x30>
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	d00b      	beq.n	8005f0e <USBD_GetConfig+0x46>
 8005ef6:	e012      	b.n	8005f1e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	3308      	adds	r3, #8
 8005f02:	2201      	movs	r2, #1
 8005f04:	4619      	mov	r1, r3
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f925 	bl	8006156 <USBD_CtlSendData>
      break;
 8005f0c:	e00c      	b.n	8005f28 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	3304      	adds	r3, #4
 8005f12:	2201      	movs	r2, #1
 8005f14:	4619      	mov	r1, r3
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f91d 	bl	8006156 <USBD_CtlSendData>
      break;
 8005f1c:	e004      	b.n	8005f28 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8005f1e:	6839      	ldr	r1, [r7, #0]
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f8a7 	bl	8006074 <USBD_CtlError>
      break;
 8005f26:	bf00      	nop
}
 8005f28:	bf00      	nop
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f40:	3b01      	subs	r3, #1
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d81e      	bhi.n	8005f84 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	88db      	ldrh	r3, [r3, #6]
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d004      	beq.n	8005f58 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8005f4e:	6839      	ldr	r1, [r7, #0]
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f88f 	bl	8006074 <USBD_CtlError>
      break;
 8005f56:	e01a      	b.n	8005f8e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d005      	beq.n	8005f74 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f043 0202 	orr.w	r2, r3, #2
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	330c      	adds	r3, #12
 8005f78:	2202      	movs	r2, #2
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f8ea 	bl	8006156 <USBD_CtlSendData>
    break;
 8005f82:	e004      	b.n	8005f8e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8005f84:	6839      	ldr	r1, [r7, #0]
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f874 	bl	8006074 <USBD_CtlError>
    break;
 8005f8c:	bf00      	nop
  }
}
 8005f8e:	bf00      	nop
 8005f90:	3708      	adds	r7, #8
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b082      	sub	sp, #8
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
 8005f9e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	885b      	ldrh	r3, [r3, #2]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d106      	bne.n	8005fb6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f92a 	bl	800620a <USBD_CtlSendStatus>
  }
}
 8005fb6:	bf00      	nop
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b082      	sub	sp, #8
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d80b      	bhi.n	8005fec <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	885b      	ldrh	r3, [r3, #2]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d10c      	bne.n	8005ff6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f910 	bl	800620a <USBD_CtlSendStatus>
      }
      break;
 8005fea:	e004      	b.n	8005ff6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005fec:	6839      	ldr	r1, [r7, #0]
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f840 	bl	8006074 <USBD_CtlError>
      break;
 8005ff4:	e000      	b.n	8005ff8 <USBD_ClrFeature+0x3a>
      break;
 8005ff6:	bf00      	nop
  }
}
 8005ff8:	bf00      	nop
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	781a      	ldrb	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	3301      	adds	r3, #1
 800601a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	781a      	ldrb	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	3301      	adds	r3, #1
 8006028:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f7ff fad3 	bl	80055d6 <SWAPBYTE>
 8006030:	4603      	mov	r3, r0
 8006032:	461a      	mov	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	3301      	adds	r3, #1
 800603c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3301      	adds	r3, #1
 8006042:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f7ff fac6 	bl	80055d6 <SWAPBYTE>
 800604a:	4603      	mov	r3, r0
 800604c:	461a      	mov	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	3301      	adds	r3, #1
 8006056:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	3301      	adds	r3, #1
 800605c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f7ff fab9 	bl	80055d6 <SWAPBYTE>
 8006064:	4603      	mov	r3, r0
 8006066:	461a      	mov	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	80da      	strh	r2, [r3, #6]
}
 800606c:	bf00      	nop
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800607e:	2180      	movs	r1, #128	; 0x80
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fcdf 	bl	8006a44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006086:	2100      	movs	r1, #0
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 fcdb 	bl	8006a44 <USBD_LL_StallEP>
}
 800608e:	bf00      	nop
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b086      	sub	sp, #24
 800609a:	af00      	add	r7, sp, #0
 800609c:	60f8      	str	r0, [r7, #12]
 800609e:	60b9      	str	r1, [r7, #8]
 80060a0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d036      	beq.n	800611a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80060b0:	6938      	ldr	r0, [r7, #16]
 80060b2:	f000 f836 	bl	8006122 <USBD_GetLen>
 80060b6:	4603      	mov	r3, r0
 80060b8:	3301      	adds	r3, #1
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	005b      	lsls	r3, r3, #1
 80060be:	b29a      	uxth	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80060c4:	7dfb      	ldrb	r3, [r7, #23]
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	4413      	add	r3, r2
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	7812      	ldrb	r2, [r2, #0]
 80060ce:	701a      	strb	r2, [r3, #0]
  idx++;
 80060d0:	7dfb      	ldrb	r3, [r7, #23]
 80060d2:	3301      	adds	r3, #1
 80060d4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80060d6:	7dfb      	ldrb	r3, [r7, #23]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	4413      	add	r3, r2
 80060dc:	2203      	movs	r2, #3
 80060de:	701a      	strb	r2, [r3, #0]
  idx++;
 80060e0:	7dfb      	ldrb	r3, [r7, #23]
 80060e2:	3301      	adds	r3, #1
 80060e4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80060e6:	e013      	b.n	8006110 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80060e8:	7dfb      	ldrb	r3, [r7, #23]
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	4413      	add	r3, r2
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	7812      	ldrb	r2, [r2, #0]
 80060f2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	3301      	adds	r3, #1
 80060f8:	613b      	str	r3, [r7, #16]
    idx++;
 80060fa:	7dfb      	ldrb	r3, [r7, #23]
 80060fc:	3301      	adds	r3, #1
 80060fe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006100:	7dfb      	ldrb	r3, [r7, #23]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	4413      	add	r3, r2
 8006106:	2200      	movs	r2, #0
 8006108:	701a      	strb	r2, [r3, #0]
    idx++;
 800610a:	7dfb      	ldrb	r3, [r7, #23]
 800610c:	3301      	adds	r3, #1
 800610e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e7      	bne.n	80060e8 <USBD_GetString+0x52>
 8006118:	e000      	b.n	800611c <USBD_GetString+0x86>
    return;
 800611a:	bf00      	nop
  }
}
 800611c:	3718      	adds	r7, #24
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006122:	b480      	push	{r7}
 8006124:	b085      	sub	sp, #20
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006132:	e005      	b.n	8006140 <USBD_GetLen+0x1e>
  {
    len++;
 8006134:	7bfb      	ldrb	r3, [r7, #15]
 8006136:	3301      	adds	r3, #1
 8006138:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	3301      	adds	r3, #1
 800613e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1f5      	bne.n	8006134 <USBD_GetLen+0x12>
  }

  return len;
 8006148:	7bfb      	ldrb	r3, [r7, #15]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b084      	sub	sp, #16
 800615a:	af00      	add	r7, sp, #0
 800615c:	60f8      	str	r0, [r7, #12]
 800615e:	60b9      	str	r1, [r7, #8]
 8006160:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2202      	movs	r2, #2
 8006166:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	2100      	movs	r1, #0
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 fcea 	bl	8006b56 <USBD_LL_Transmit>

  return USBD_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	2100      	movs	r1, #0
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 fcd9 	bl	8006b56 <USBD_LL_Transmit>

  return USBD_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b084      	sub	sp, #16
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2203      	movs	r2, #3
 80061be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	2100      	movs	r1, #0
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 fcdd 	bl	8006b98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	2100      	movs	r1, #0
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 fccc 	bl	8006b98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b082      	sub	sp, #8
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2204      	movs	r2, #4
 8006216:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800621a:	2300      	movs	r3, #0
 800621c:	2200      	movs	r2, #0
 800621e:	2100      	movs	r1, #0
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fc98 	bl	8006b56 <USBD_LL_Transmit>

  return USBD_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2205      	movs	r2, #5
 800623c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006240:	2300      	movs	r3, #0
 8006242:	2200      	movs	r2, #0
 8006244:	2100      	movs	r1, #0
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fca6 	bl	8006b98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3708      	adds	r7, #8
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
	...

08006258 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800625c:	2200      	movs	r2, #0
 800625e:	4912      	ldr	r1, [pc, #72]	; (80062a8 <MX_USB_DEVICE_Init+0x50>)
 8006260:	4812      	ldr	r0, [pc, #72]	; (80062ac <MX_USB_DEVICE_Init+0x54>)
 8006262:	f7fe fef3 	bl	800504c <USBD_Init>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d001      	beq.n	8006270 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800626c:	f7fa fa74 	bl	8000758 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006270:	490f      	ldr	r1, [pc, #60]	; (80062b0 <MX_USB_DEVICE_Init+0x58>)
 8006272:	480e      	ldr	r0, [pc, #56]	; (80062ac <MX_USB_DEVICE_Init+0x54>)
 8006274:	f7fe ff20 	bl	80050b8 <USBD_RegisterClass>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800627e:	f7fa fa6b 	bl	8000758 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006282:	490c      	ldr	r1, [pc, #48]	; (80062b4 <MX_USB_DEVICE_Init+0x5c>)
 8006284:	4809      	ldr	r0, [pc, #36]	; (80062ac <MX_USB_DEVICE_Init+0x54>)
 8006286:	f7fe fe45 	bl	8004f14 <USBD_CDC_RegisterInterface>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006290:	f7fa fa62 	bl	8000758 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006294:	4805      	ldr	r0, [pc, #20]	; (80062ac <MX_USB_DEVICE_Init+0x54>)
 8006296:	f7fe ff30 	bl	80050fa <USBD_Start>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80062a0:	f7fa fa5a 	bl	8000758 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80062a4:	bf00      	nop
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	20000130 	.word	0x20000130
 80062ac:	20000254 	.word	0x20000254
 80062b0:	20000018 	.word	0x20000018
 80062b4:	2000011c 	.word	0x2000011c

080062b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80062bc:	2200      	movs	r2, #0
 80062be:	4905      	ldr	r1, [pc, #20]	; (80062d4 <CDC_Init_FS+0x1c>)
 80062c0:	4805      	ldr	r0, [pc, #20]	; (80062d8 <CDC_Init_FS+0x20>)
 80062c2:	f7fe fe3c 	bl	8004f3e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80062c6:	4905      	ldr	r1, [pc, #20]	; (80062dc <CDC_Init_FS+0x24>)
 80062c8:	4803      	ldr	r0, [pc, #12]	; (80062d8 <CDC_Init_FS+0x20>)
 80062ca:	f7fe fe51 	bl	8004f70 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80062ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	20000d24 	.word	0x20000d24
 80062d8:	20000254 	.word	0x20000254
 80062dc:	20000524 	.word	0x20000524

080062e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80062e0:	b480      	push	{r7}
 80062e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80062e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	4603      	mov	r3, r0
 80062f8:	6039      	str	r1, [r7, #0]
 80062fa:	71fb      	strb	r3, [r7, #7]
 80062fc:	4613      	mov	r3, r2
 80062fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006300:	79fb      	ldrb	r3, [r7, #7]
 8006302:	2b23      	cmp	r3, #35	; 0x23
 8006304:	d84a      	bhi.n	800639c <CDC_Control_FS+0xac>
 8006306:	a201      	add	r2, pc, #4	; (adr r2, 800630c <CDC_Control_FS+0x1c>)
 8006308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630c:	0800639d 	.word	0x0800639d
 8006310:	0800639d 	.word	0x0800639d
 8006314:	0800639d 	.word	0x0800639d
 8006318:	0800639d 	.word	0x0800639d
 800631c:	0800639d 	.word	0x0800639d
 8006320:	0800639d 	.word	0x0800639d
 8006324:	0800639d 	.word	0x0800639d
 8006328:	0800639d 	.word	0x0800639d
 800632c:	0800639d 	.word	0x0800639d
 8006330:	0800639d 	.word	0x0800639d
 8006334:	0800639d 	.word	0x0800639d
 8006338:	0800639d 	.word	0x0800639d
 800633c:	0800639d 	.word	0x0800639d
 8006340:	0800639d 	.word	0x0800639d
 8006344:	0800639d 	.word	0x0800639d
 8006348:	0800639d 	.word	0x0800639d
 800634c:	0800639d 	.word	0x0800639d
 8006350:	0800639d 	.word	0x0800639d
 8006354:	0800639d 	.word	0x0800639d
 8006358:	0800639d 	.word	0x0800639d
 800635c:	0800639d 	.word	0x0800639d
 8006360:	0800639d 	.word	0x0800639d
 8006364:	0800639d 	.word	0x0800639d
 8006368:	0800639d 	.word	0x0800639d
 800636c:	0800639d 	.word	0x0800639d
 8006370:	0800639d 	.word	0x0800639d
 8006374:	0800639d 	.word	0x0800639d
 8006378:	0800639d 	.word	0x0800639d
 800637c:	0800639d 	.word	0x0800639d
 8006380:	0800639d 	.word	0x0800639d
 8006384:	0800639d 	.word	0x0800639d
 8006388:	0800639d 	.word	0x0800639d
 800638c:	0800639d 	.word	0x0800639d
 8006390:	0800639d 	.word	0x0800639d
 8006394:	0800639d 	.word	0x0800639d
 8006398:	0800639d 	.word	0x0800639d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800639c:	bf00      	nop
  }

  return (USBD_OK);
 800639e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80063b6:	6879      	ldr	r1, [r7, #4]
 80063b8:	4805      	ldr	r0, [pc, #20]	; (80063d0 <CDC_Receive_FS+0x24>)
 80063ba:	f7fe fdd9 	bl	8004f70 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80063be:	4804      	ldr	r0, [pc, #16]	; (80063d0 <CDC_Receive_FS+0x24>)
 80063c0:	f7fe fe1a 	bl	8004ff8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80063c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20000254 	.word	0x20000254

080063d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	460b      	mov	r3, r1
 80063de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80063e0:	2300      	movs	r3, #0
 80063e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80063e4:	4b0d      	ldr	r3, [pc, #52]	; (800641c <CDC_Transmit_FS+0x48>)
 80063e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e00b      	b.n	8006412 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80063fa:	887b      	ldrh	r3, [r7, #2]
 80063fc:	461a      	mov	r2, r3
 80063fe:	6879      	ldr	r1, [r7, #4]
 8006400:	4806      	ldr	r0, [pc, #24]	; (800641c <CDC_Transmit_FS+0x48>)
 8006402:	f7fe fd9c 	bl	8004f3e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006406:	4805      	ldr	r0, [pc, #20]	; (800641c <CDC_Transmit_FS+0x48>)
 8006408:	f7fe fdc6 	bl	8004f98 <USBD_CDC_TransmitPacket>
 800640c:	4603      	mov	r3, r0
 800640e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006410:	7bfb      	ldrb	r3, [r7, #15]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	20000254 	.word	0x20000254

08006420 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	4613      	mov	r3, r2
 800642c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006432:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006436:	4618      	mov	r0, r3
 8006438:	371c      	adds	r7, #28
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
	...

08006444 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	4603      	mov	r3, r0
 800644c:	6039      	str	r1, [r7, #0]
 800644e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2212      	movs	r2, #18
 8006454:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006456:	4b03      	ldr	r3, [pc, #12]	; (8006464 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006458:	4618      	mov	r0, r3
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	2000014c 	.word	0x2000014c

08006468 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	4603      	mov	r3, r0
 8006470:	6039      	str	r1, [r7, #0]
 8006472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2204      	movs	r2, #4
 8006478:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800647a:	4b03      	ldr	r3, [pc, #12]	; (8006488 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800647c:	4618      	mov	r0, r3
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	20000160 	.word	0x20000160

0800648c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	4603      	mov	r3, r0
 8006494:	6039      	str	r1, [r7, #0]
 8006496:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006498:	79fb      	ldrb	r3, [r7, #7]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d105      	bne.n	80064aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	4907      	ldr	r1, [pc, #28]	; (80064c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80064a2:	4808      	ldr	r0, [pc, #32]	; (80064c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80064a4:	f7ff fdf7 	bl	8006096 <USBD_GetString>
 80064a8:	e004      	b.n	80064b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	4904      	ldr	r1, [pc, #16]	; (80064c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80064ae:	4805      	ldr	r0, [pc, #20]	; (80064c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80064b0:	f7ff fdf1 	bl	8006096 <USBD_GetString>
  }
  return USBD_StrDesc;
 80064b4:	4b02      	ldr	r3, [pc, #8]	; (80064c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3708      	adds	r7, #8
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	20001524 	.word	0x20001524
 80064c4:	08006e7c 	.word	0x08006e7c

080064c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	4603      	mov	r3, r0
 80064d0:	6039      	str	r1, [r7, #0]
 80064d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80064d4:	683a      	ldr	r2, [r7, #0]
 80064d6:	4904      	ldr	r1, [pc, #16]	; (80064e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80064d8:	4804      	ldr	r0, [pc, #16]	; (80064ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80064da:	f7ff fddc 	bl	8006096 <USBD_GetString>
  return USBD_StrDesc;
 80064de:	4b02      	ldr	r3, [pc, #8]	; (80064e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	20001524 	.word	0x20001524
 80064ec:	08006e94 	.word	0x08006e94

080064f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	4603      	mov	r3, r0
 80064f8:	6039      	str	r1, [r7, #0]
 80064fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	221a      	movs	r2, #26
 8006500:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006502:	f000 f843 	bl	800658c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006506:	4b02      	ldr	r3, [pc, #8]	; (8006510 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006508:	4618      	mov	r0, r3
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	20000164 	.word	0x20000164

08006514 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	4603      	mov	r3, r0
 800651c:	6039      	str	r1, [r7, #0]
 800651e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006520:	79fb      	ldrb	r3, [r7, #7]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d105      	bne.n	8006532 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	4907      	ldr	r1, [pc, #28]	; (8006548 <USBD_FS_ConfigStrDescriptor+0x34>)
 800652a:	4808      	ldr	r0, [pc, #32]	; (800654c <USBD_FS_ConfigStrDescriptor+0x38>)
 800652c:	f7ff fdb3 	bl	8006096 <USBD_GetString>
 8006530:	e004      	b.n	800653c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	4904      	ldr	r1, [pc, #16]	; (8006548 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006536:	4805      	ldr	r0, [pc, #20]	; (800654c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006538:	f7ff fdad 	bl	8006096 <USBD_GetString>
  }
  return USBD_StrDesc;
 800653c:	4b02      	ldr	r3, [pc, #8]	; (8006548 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	20001524 	.word	0x20001524
 800654c:	08006ea8 	.word	0x08006ea8

08006550 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	4603      	mov	r3, r0
 8006558:	6039      	str	r1, [r7, #0]
 800655a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800655c:	79fb      	ldrb	r3, [r7, #7]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d105      	bne.n	800656e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	4907      	ldr	r1, [pc, #28]	; (8006584 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006566:	4808      	ldr	r0, [pc, #32]	; (8006588 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006568:	f7ff fd95 	bl	8006096 <USBD_GetString>
 800656c:	e004      	b.n	8006578 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	4904      	ldr	r1, [pc, #16]	; (8006584 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006572:	4805      	ldr	r0, [pc, #20]	; (8006588 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006574:	f7ff fd8f 	bl	8006096 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006578:	4b02      	ldr	r3, [pc, #8]	; (8006584 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800657a:	4618      	mov	r0, r3
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	20001524 	.word	0x20001524
 8006588:	08006eb4 	.word	0x08006eb4

0800658c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006592:	4b0f      	ldr	r3, [pc, #60]	; (80065d0 <Get_SerialNum+0x44>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006598:	4b0e      	ldr	r3, [pc, #56]	; (80065d4 <Get_SerialNum+0x48>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800659e:	4b0e      	ldr	r3, [pc, #56]	; (80065d8 <Get_SerialNum+0x4c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4413      	add	r3, r2
 80065aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d009      	beq.n	80065c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80065b2:	2208      	movs	r2, #8
 80065b4:	4909      	ldr	r1, [pc, #36]	; (80065dc <Get_SerialNum+0x50>)
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f000 f814 	bl	80065e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80065bc:	2204      	movs	r2, #4
 80065be:	4908      	ldr	r1, [pc, #32]	; (80065e0 <Get_SerialNum+0x54>)
 80065c0:	68b8      	ldr	r0, [r7, #8]
 80065c2:	f000 f80f 	bl	80065e4 <IntToUnicode>
  }
}
 80065c6:	bf00      	nop
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	1fff7a10 	.word	0x1fff7a10
 80065d4:	1fff7a14 	.word	0x1fff7a14
 80065d8:	1fff7a18 	.word	0x1fff7a18
 80065dc:	20000166 	.word	0x20000166
 80065e0:	20000176 	.word	0x20000176

080065e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	4613      	mov	r3, r2
 80065f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80065f2:	2300      	movs	r3, #0
 80065f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80065f6:	2300      	movs	r3, #0
 80065f8:	75fb      	strb	r3, [r7, #23]
 80065fa:	e027      	b.n	800664c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	0f1b      	lsrs	r3, r3, #28
 8006600:	2b09      	cmp	r3, #9
 8006602:	d80b      	bhi.n	800661c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	0f1b      	lsrs	r3, r3, #28
 8006608:	b2da      	uxtb	r2, r3
 800660a:	7dfb      	ldrb	r3, [r7, #23]
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	4619      	mov	r1, r3
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	440b      	add	r3, r1
 8006614:	3230      	adds	r2, #48	; 0x30
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	701a      	strb	r2, [r3, #0]
 800661a:	e00a      	b.n	8006632 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	0f1b      	lsrs	r3, r3, #28
 8006620:	b2da      	uxtb	r2, r3
 8006622:	7dfb      	ldrb	r3, [r7, #23]
 8006624:	005b      	lsls	r3, r3, #1
 8006626:	4619      	mov	r1, r3
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	440b      	add	r3, r1
 800662c:	3237      	adds	r2, #55	; 0x37
 800662e:	b2d2      	uxtb	r2, r2
 8006630:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	011b      	lsls	r3, r3, #4
 8006636:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006638:	7dfb      	ldrb	r3, [r7, #23]
 800663a:	005b      	lsls	r3, r3, #1
 800663c:	3301      	adds	r3, #1
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	4413      	add	r3, r2
 8006642:	2200      	movs	r2, #0
 8006644:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006646:	7dfb      	ldrb	r3, [r7, #23]
 8006648:	3301      	adds	r3, #1
 800664a:	75fb      	strb	r3, [r7, #23]
 800664c:	7dfa      	ldrb	r2, [r7, #23]
 800664e:	79fb      	ldrb	r3, [r7, #7]
 8006650:	429a      	cmp	r2, r3
 8006652:	d3d3      	bcc.n	80065fc <IntToUnicode+0x18>
  }
}
 8006654:	bf00      	nop
 8006656:	371c      	adds	r7, #28
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b08a      	sub	sp, #40	; 0x28
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006668:	f107 0314 	add.w	r3, r7, #20
 800666c:	2200      	movs	r2, #0
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	605a      	str	r2, [r3, #4]
 8006672:	609a      	str	r2, [r3, #8]
 8006674:	60da      	str	r2, [r3, #12]
 8006676:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006680:	d13a      	bne.n	80066f8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006682:	2300      	movs	r3, #0
 8006684:	613b      	str	r3, [r7, #16]
 8006686:	4b1e      	ldr	r3, [pc, #120]	; (8006700 <HAL_PCD_MspInit+0xa0>)
 8006688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668a:	4a1d      	ldr	r2, [pc, #116]	; (8006700 <HAL_PCD_MspInit+0xa0>)
 800668c:	f043 0301 	orr.w	r3, r3, #1
 8006690:	6313      	str	r3, [r2, #48]	; 0x30
 8006692:	4b1b      	ldr	r3, [pc, #108]	; (8006700 <HAL_PCD_MspInit+0xa0>)
 8006694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	613b      	str	r3, [r7, #16]
 800669c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800669e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80066a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066a4:	2302      	movs	r3, #2
 80066a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066a8:	2300      	movs	r3, #0
 80066aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066ac:	2303      	movs	r3, #3
 80066ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80066b0:	230a      	movs	r3, #10
 80066b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066b4:	f107 0314 	add.w	r3, r7, #20
 80066b8:	4619      	mov	r1, r3
 80066ba:	4812      	ldr	r0, [pc, #72]	; (8006704 <HAL_PCD_MspInit+0xa4>)
 80066bc:	f7fa fb2e 	bl	8000d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80066c0:	4b0f      	ldr	r3, [pc, #60]	; (8006700 <HAL_PCD_MspInit+0xa0>)
 80066c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c4:	4a0e      	ldr	r2, [pc, #56]	; (8006700 <HAL_PCD_MspInit+0xa0>)
 80066c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ca:	6353      	str	r3, [r2, #52]	; 0x34
 80066cc:	2300      	movs	r3, #0
 80066ce:	60fb      	str	r3, [r7, #12]
 80066d0:	4b0b      	ldr	r3, [pc, #44]	; (8006700 <HAL_PCD_MspInit+0xa0>)
 80066d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d4:	4a0a      	ldr	r2, [pc, #40]	; (8006700 <HAL_PCD_MspInit+0xa0>)
 80066d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066da:	6453      	str	r3, [r2, #68]	; 0x44
 80066dc:	4b08      	ldr	r3, [pc, #32]	; (8006700 <HAL_PCD_MspInit+0xa0>)
 80066de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066e4:	60fb      	str	r3, [r7, #12]
 80066e6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80066e8:	2200      	movs	r2, #0
 80066ea:	2100      	movs	r1, #0
 80066ec:	2043      	movs	r0, #67	; 0x43
 80066ee:	f7fa fade 	bl	8000cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80066f2:	2043      	movs	r0, #67	; 0x43
 80066f4:	f7fa faf7 	bl	8000ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80066f8:	bf00      	nop
 80066fa:	3728      	adds	r7, #40	; 0x28
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	40023800 	.word	0x40023800
 8006704:	40020000 	.word	0x40020000

08006708 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800671c:	4619      	mov	r1, r3
 800671e:	4610      	mov	r0, r2
 8006720:	f7fe fd36 	bl	8005190 <USBD_LL_SetupStage>
}
 8006724:	bf00      	nop
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	460b      	mov	r3, r1
 8006736:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800673e:	78fa      	ldrb	r2, [r7, #3]
 8006740:	6879      	ldr	r1, [r7, #4]
 8006742:	4613      	mov	r3, r2
 8006744:	00db      	lsls	r3, r3, #3
 8006746:	1a9b      	subs	r3, r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	440b      	add	r3, r1
 800674c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	78fb      	ldrb	r3, [r7, #3]
 8006754:	4619      	mov	r1, r3
 8006756:	f7fe fd6e 	bl	8005236 <USBD_LL_DataOutStage>
}
 800675a:	bf00      	nop
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b082      	sub	sp, #8
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	460b      	mov	r3, r1
 800676c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006774:	78fa      	ldrb	r2, [r7, #3]
 8006776:	6879      	ldr	r1, [r7, #4]
 8006778:	4613      	mov	r3, r2
 800677a:	00db      	lsls	r3, r3, #3
 800677c:	1a9b      	subs	r3, r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	440b      	add	r3, r1
 8006782:	3348      	adds	r3, #72	; 0x48
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	78fb      	ldrb	r3, [r7, #3]
 8006788:	4619      	mov	r1, r3
 800678a:	f7fe fdb7 	bl	80052fc <USBD_LL_DataInStage>
}
 800678e:	bf00      	nop
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b082      	sub	sp, #8
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7fe febb 	bl	8005520 <USBD_LL_SOF>
}
 80067aa:	bf00      	nop
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b084      	sub	sp, #16
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80067ba:	2301      	movs	r3, #1
 80067bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d102      	bne.n	80067cc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80067c6:	2300      	movs	r3, #0
 80067c8:	73fb      	strb	r3, [r7, #15]
 80067ca:	e008      	b.n	80067de <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d102      	bne.n	80067da <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80067d4:	2301      	movs	r3, #1
 80067d6:	73fb      	strb	r3, [r7, #15]
 80067d8:	e001      	b.n	80067de <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80067da:	f7f9 ffbd 	bl	8000758 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80067e4:	7bfa      	ldrb	r2, [r7, #15]
 80067e6:	4611      	mov	r1, r2
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7fe fe5e 	bl	80054aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7fe fe17 	bl	8005428 <USBD_LL_Reset>
}
 80067fa:	bf00      	nop
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
	...

08006804 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006812:	4618      	mov	r0, r3
 8006814:	f7fe fe59 	bl	80054ca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	6812      	ldr	r2, [r2, #0]
 8006826:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800682a:	f043 0301 	orr.w	r3, r3, #1
 800682e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d005      	beq.n	8006844 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006838:	4b04      	ldr	r3, [pc, #16]	; (800684c <HAL_PCD_SuspendCallback+0x48>)
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	4a03      	ldr	r2, [pc, #12]	; (800684c <HAL_PCD_SuspendCallback+0x48>)
 800683e:	f043 0306 	orr.w	r3, r3, #6
 8006842:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006844:	bf00      	nop
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	e000ed00 	.word	0xe000ed00

08006850 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800685e:	4618      	mov	r0, r3
 8006860:	f7fe fe48 	bl	80054f4 <USBD_LL_Resume>
}
 8006864:	bf00      	nop
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	460b      	mov	r3, r1
 8006876:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800687e:	78fa      	ldrb	r2, [r7, #3]
 8006880:	4611      	mov	r1, r2
 8006882:	4618      	mov	r0, r3
 8006884:	f7fe fe73 	bl	800556e <USBD_LL_IsoOUTIncomplete>
}
 8006888:	bf00      	nop
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80068a2:	78fa      	ldrb	r2, [r7, #3]
 80068a4:	4611      	mov	r1, r2
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7fe fe54 	bl	8005554 <USBD_LL_IsoINIncomplete>
}
 80068ac:	bf00      	nop
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7fe fe60 	bl	8005588 <USBD_LL_DevConnected>
}
 80068c8:	bf00      	nop
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80068de:	4618      	mov	r0, r3
 80068e0:	f7fe fe5d 	bl	800559e <USBD_LL_DevDisconnected>
}
 80068e4:	bf00      	nop
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d13c      	bne.n	8006976 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80068fc:	4a20      	ldr	r2, [pc, #128]	; (8006980 <USBD_LL_Init+0x94>)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a1e      	ldr	r2, [pc, #120]	; (8006980 <USBD_LL_Init+0x94>)
 8006908:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800690c:	4b1c      	ldr	r3, [pc, #112]	; (8006980 <USBD_LL_Init+0x94>)
 800690e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006912:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006914:	4b1a      	ldr	r3, [pc, #104]	; (8006980 <USBD_LL_Init+0x94>)
 8006916:	2204      	movs	r2, #4
 8006918:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800691a:	4b19      	ldr	r3, [pc, #100]	; (8006980 <USBD_LL_Init+0x94>)
 800691c:	2202      	movs	r2, #2
 800691e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006920:	4b17      	ldr	r3, [pc, #92]	; (8006980 <USBD_LL_Init+0x94>)
 8006922:	2200      	movs	r2, #0
 8006924:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006926:	4b16      	ldr	r3, [pc, #88]	; (8006980 <USBD_LL_Init+0x94>)
 8006928:	2202      	movs	r2, #2
 800692a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800692c:	4b14      	ldr	r3, [pc, #80]	; (8006980 <USBD_LL_Init+0x94>)
 800692e:	2200      	movs	r2, #0
 8006930:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006932:	4b13      	ldr	r3, [pc, #76]	; (8006980 <USBD_LL_Init+0x94>)
 8006934:	2200      	movs	r2, #0
 8006936:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006938:	4b11      	ldr	r3, [pc, #68]	; (8006980 <USBD_LL_Init+0x94>)
 800693a:	2200      	movs	r2, #0
 800693c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800693e:	4b10      	ldr	r3, [pc, #64]	; (8006980 <USBD_LL_Init+0x94>)
 8006940:	2200      	movs	r2, #0
 8006942:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006944:	4b0e      	ldr	r3, [pc, #56]	; (8006980 <USBD_LL_Init+0x94>)
 8006946:	2200      	movs	r2, #0
 8006948:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800694a:	480d      	ldr	r0, [pc, #52]	; (8006980 <USBD_LL_Init+0x94>)
 800694c:	f7fa fbb4 	bl	80010b8 <HAL_PCD_Init>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006956:	f7f9 feff 	bl	8000758 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800695a:	2180      	movs	r1, #128	; 0x80
 800695c:	4808      	ldr	r0, [pc, #32]	; (8006980 <USBD_LL_Init+0x94>)
 800695e:	f7fb fd12 	bl	8002386 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006962:	2240      	movs	r2, #64	; 0x40
 8006964:	2100      	movs	r1, #0
 8006966:	4806      	ldr	r0, [pc, #24]	; (8006980 <USBD_LL_Init+0x94>)
 8006968:	f7fb fcc6 	bl	80022f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800696c:	2280      	movs	r2, #128	; 0x80
 800696e:	2101      	movs	r1, #1
 8006970:	4803      	ldr	r0, [pc, #12]	; (8006980 <USBD_LL_Init+0x94>)
 8006972:	f7fb fcc1 	bl	80022f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3708      	adds	r7, #8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	20001724 	.word	0x20001724

08006984 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800698c:	2300      	movs	r3, #0
 800698e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006990:	2300      	movs	r3, #0
 8006992:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800699a:	4618      	mov	r0, r3
 800699c:	f7fa fca9 	bl	80012f2 <HAL_PCD_Start>
 80069a0:	4603      	mov	r3, r0
 80069a2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 f92a 	bl	8006c00 <USBD_Get_USB_Status>
 80069ac:	4603      	mov	r3, r0
 80069ae:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80069b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b084      	sub	sp, #16
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	4608      	mov	r0, r1
 80069c4:	4611      	mov	r1, r2
 80069c6:	461a      	mov	r2, r3
 80069c8:	4603      	mov	r3, r0
 80069ca:	70fb      	strb	r3, [r7, #3]
 80069cc:	460b      	mov	r3, r1
 80069ce:	70bb      	strb	r3, [r7, #2]
 80069d0:	4613      	mov	r3, r2
 80069d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069d4:	2300      	movs	r3, #0
 80069d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069d8:	2300      	movs	r3, #0
 80069da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80069e2:	78bb      	ldrb	r3, [r7, #2]
 80069e4:	883a      	ldrh	r2, [r7, #0]
 80069e6:	78f9      	ldrb	r1, [r7, #3]
 80069e8:	f7fb f88d 	bl	8001b06 <HAL_PCD_EP_Open>
 80069ec:	4603      	mov	r3, r0
 80069ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069f0:	7bfb      	ldrb	r3, [r7, #15]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 f904 	bl	8006c00 <USBD_Get_USB_Status>
 80069f8:	4603      	mov	r3, r0
 80069fa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80069fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b084      	sub	sp, #16
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	460b      	mov	r3, r1
 8006a10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a12:	2300      	movs	r3, #0
 8006a14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a20:	78fa      	ldrb	r2, [r7, #3]
 8006a22:	4611      	mov	r1, r2
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7fb f8d6 	bl	8001bd6 <HAL_PCD_EP_Close>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 f8e5 	bl	8006c00 <USBD_Get_USB_Status>
 8006a36:	4603      	mov	r3, r0
 8006a38:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006a3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a50:	2300      	movs	r3, #0
 8006a52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a54:	2300      	movs	r3, #0
 8006a56:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a5e:	78fa      	ldrb	r2, [r7, #3]
 8006a60:	4611      	mov	r1, r2
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fb f9ae 	bl	8001dc4 <HAL_PCD_EP_SetStall>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 f8c6 	bl	8006c00 <USBD_Get_USB_Status>
 8006a74:	4603      	mov	r3, r0
 8006a76:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8006a78:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b084      	sub	sp, #16
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a9c:	78fa      	ldrb	r2, [r7, #3]
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7fb f9f3 	bl	8001e8c <HAL_PCD_EP_ClrStall>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8006aaa:	7bfb      	ldrb	r3, [r7, #15]
 8006aac:	4618      	mov	r0, r3
 8006aae:	f000 f8a7 	bl	8006c00 <USBD_Get_USB_Status>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8006ab6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ad2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006ad4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	da0b      	bge.n	8006af4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006adc:	78fb      	ldrb	r3, [r7, #3]
 8006ade:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ae2:	68f9      	ldr	r1, [r7, #12]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	00db      	lsls	r3, r3, #3
 8006ae8:	1a9b      	subs	r3, r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	440b      	add	r3, r1
 8006aee:	333e      	adds	r3, #62	; 0x3e
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	e00b      	b.n	8006b0c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006af4:	78fb      	ldrb	r3, [r7, #3]
 8006af6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006afa:	68f9      	ldr	r1, [r7, #12]
 8006afc:	4613      	mov	r3, r2
 8006afe:	00db      	lsls	r3, r3, #3
 8006b00:	1a9b      	subs	r3, r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	440b      	add	r3, r1
 8006b06:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006b0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3714      	adds	r7, #20
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	460b      	mov	r3, r1
 8006b22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b24:	2300      	movs	r3, #0
 8006b26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b32:	78fa      	ldrb	r2, [r7, #3]
 8006b34:	4611      	mov	r1, r2
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7fa ffc0 	bl	8001abc <HAL_PCD_SetAddress>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 f85c 	bl	8006c00 <USBD_Get_USB_Status>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8006b4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b086      	sub	sp, #24
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	60f8      	str	r0, [r7, #12]
 8006b5e:	607a      	str	r2, [r7, #4]
 8006b60:	603b      	str	r3, [r7, #0]
 8006b62:	460b      	mov	r3, r1
 8006b64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006b74:	7af9      	ldrb	r1, [r7, #11]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	f7fb f8d9 	bl	8001d30 <HAL_PCD_EP_Transmit>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8006b82:	7dfb      	ldrb	r3, [r7, #23]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f000 f83b 	bl	8006c00 <USBD_Get_USB_Status>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8006b8e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	607a      	str	r2, [r7, #4]
 8006ba2:	603b      	str	r3, [r7, #0]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bac:	2300      	movs	r3, #0
 8006bae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006bb6:	7af9      	ldrb	r1, [r7, #11]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	f7fb f855 	bl	8001c6a <HAL_PCD_EP_Receive>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8006bc4:	7dfb      	ldrb	r3, [r7, #23]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 f81a 	bl	8006c00 <USBD_Get_USB_Status>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8006bd0:	7dbb      	ldrb	r3, [r7, #22]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3718      	adds	r7, #24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b082      	sub	sp, #8
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	460b      	mov	r3, r1
 8006be4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006bec:	78fa      	ldrb	r2, [r7, #3]
 8006bee:	4611      	mov	r1, r2
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7fb f885 	bl	8001d00 <HAL_PCD_EP_GetRxCount>
 8006bf6:	4603      	mov	r3, r0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	4603      	mov	r3, r0
 8006c08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006c0e:	79fb      	ldrb	r3, [r7, #7]
 8006c10:	2b03      	cmp	r3, #3
 8006c12:	d817      	bhi.n	8006c44 <USBD_Get_USB_Status+0x44>
 8006c14:	a201      	add	r2, pc, #4	; (adr r2, 8006c1c <USBD_Get_USB_Status+0x1c>)
 8006c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c1a:	bf00      	nop
 8006c1c:	08006c2d 	.word	0x08006c2d
 8006c20:	08006c33 	.word	0x08006c33
 8006c24:	08006c39 	.word	0x08006c39
 8006c28:	08006c3f 	.word	0x08006c3f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	73fb      	strb	r3, [r7, #15]
    break;
 8006c30:	e00b      	b.n	8006c4a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006c32:	2303      	movs	r3, #3
 8006c34:	73fb      	strb	r3, [r7, #15]
    break;
 8006c36:	e008      	b.n	8006c4a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	73fb      	strb	r3, [r7, #15]
    break;
 8006c3c:	e005      	b.n	8006c4a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	73fb      	strb	r3, [r7, #15]
    break;
 8006c42:	e002      	b.n	8006c4a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006c44:	2303      	movs	r3, #3
 8006c46:	73fb      	strb	r3, [r7, #15]
    break;
 8006c48:	bf00      	nop
  }
  return usb_status;
 8006c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3714      	adds	r7, #20
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <__errno>:
 8006c58:	4b01      	ldr	r3, [pc, #4]	; (8006c60 <__errno+0x8>)
 8006c5a:	6818      	ldr	r0, [r3, #0]
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	20000180 	.word	0x20000180

08006c64 <__libc_init_array>:
 8006c64:	b570      	push	{r4, r5, r6, lr}
 8006c66:	4e0d      	ldr	r6, [pc, #52]	; (8006c9c <__libc_init_array+0x38>)
 8006c68:	4c0d      	ldr	r4, [pc, #52]	; (8006ca0 <__libc_init_array+0x3c>)
 8006c6a:	1ba4      	subs	r4, r4, r6
 8006c6c:	10a4      	asrs	r4, r4, #2
 8006c6e:	2500      	movs	r5, #0
 8006c70:	42a5      	cmp	r5, r4
 8006c72:	d109      	bne.n	8006c88 <__libc_init_array+0x24>
 8006c74:	4e0b      	ldr	r6, [pc, #44]	; (8006ca4 <__libc_init_array+0x40>)
 8006c76:	4c0c      	ldr	r4, [pc, #48]	; (8006ca8 <__libc_init_array+0x44>)
 8006c78:	f000 f8ea 	bl	8006e50 <_init>
 8006c7c:	1ba4      	subs	r4, r4, r6
 8006c7e:	10a4      	asrs	r4, r4, #2
 8006c80:	2500      	movs	r5, #0
 8006c82:	42a5      	cmp	r5, r4
 8006c84:	d105      	bne.n	8006c92 <__libc_init_array+0x2e>
 8006c86:	bd70      	pop	{r4, r5, r6, pc}
 8006c88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c8c:	4798      	blx	r3
 8006c8e:	3501      	adds	r5, #1
 8006c90:	e7ee      	b.n	8006c70 <__libc_init_array+0xc>
 8006c92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c96:	4798      	blx	r3
 8006c98:	3501      	adds	r5, #1
 8006c9a:	e7f2      	b.n	8006c82 <__libc_init_array+0x1e>
 8006c9c:	08006ee4 	.word	0x08006ee4
 8006ca0:	08006ee4 	.word	0x08006ee4
 8006ca4:	08006ee4 	.word	0x08006ee4
 8006ca8:	08006ee8 	.word	0x08006ee8

08006cac <malloc>:
 8006cac:	4b02      	ldr	r3, [pc, #8]	; (8006cb8 <malloc+0xc>)
 8006cae:	4601      	mov	r1, r0
 8006cb0:	6818      	ldr	r0, [r3, #0]
 8006cb2:	f000 b861 	b.w	8006d78 <_malloc_r>
 8006cb6:	bf00      	nop
 8006cb8:	20000180 	.word	0x20000180

08006cbc <free>:
 8006cbc:	4b02      	ldr	r3, [pc, #8]	; (8006cc8 <free+0xc>)
 8006cbe:	4601      	mov	r1, r0
 8006cc0:	6818      	ldr	r0, [r3, #0]
 8006cc2:	f000 b80b 	b.w	8006cdc <_free_r>
 8006cc6:	bf00      	nop
 8006cc8:	20000180 	.word	0x20000180

08006ccc <memset>:
 8006ccc:	4402      	add	r2, r0
 8006cce:	4603      	mov	r3, r0
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d100      	bne.n	8006cd6 <memset+0xa>
 8006cd4:	4770      	bx	lr
 8006cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8006cda:	e7f9      	b.n	8006cd0 <memset+0x4>

08006cdc <_free_r>:
 8006cdc:	b538      	push	{r3, r4, r5, lr}
 8006cde:	4605      	mov	r5, r0
 8006ce0:	2900      	cmp	r1, #0
 8006ce2:	d045      	beq.n	8006d70 <_free_r+0x94>
 8006ce4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ce8:	1f0c      	subs	r4, r1, #4
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	bfb8      	it	lt
 8006cee:	18e4      	addlt	r4, r4, r3
 8006cf0:	f000 f8ac 	bl	8006e4c <__malloc_lock>
 8006cf4:	4a1f      	ldr	r2, [pc, #124]	; (8006d74 <_free_r+0x98>)
 8006cf6:	6813      	ldr	r3, [r2, #0]
 8006cf8:	4610      	mov	r0, r2
 8006cfa:	b933      	cbnz	r3, 8006d0a <_free_r+0x2e>
 8006cfc:	6063      	str	r3, [r4, #4]
 8006cfe:	6014      	str	r4, [r2, #0]
 8006d00:	4628      	mov	r0, r5
 8006d02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d06:	f000 b8a2 	b.w	8006e4e <__malloc_unlock>
 8006d0a:	42a3      	cmp	r3, r4
 8006d0c:	d90c      	bls.n	8006d28 <_free_r+0x4c>
 8006d0e:	6821      	ldr	r1, [r4, #0]
 8006d10:	1862      	adds	r2, r4, r1
 8006d12:	4293      	cmp	r3, r2
 8006d14:	bf04      	itt	eq
 8006d16:	681a      	ldreq	r2, [r3, #0]
 8006d18:	685b      	ldreq	r3, [r3, #4]
 8006d1a:	6063      	str	r3, [r4, #4]
 8006d1c:	bf04      	itt	eq
 8006d1e:	1852      	addeq	r2, r2, r1
 8006d20:	6022      	streq	r2, [r4, #0]
 8006d22:	6004      	str	r4, [r0, #0]
 8006d24:	e7ec      	b.n	8006d00 <_free_r+0x24>
 8006d26:	4613      	mov	r3, r2
 8006d28:	685a      	ldr	r2, [r3, #4]
 8006d2a:	b10a      	cbz	r2, 8006d30 <_free_r+0x54>
 8006d2c:	42a2      	cmp	r2, r4
 8006d2e:	d9fa      	bls.n	8006d26 <_free_r+0x4a>
 8006d30:	6819      	ldr	r1, [r3, #0]
 8006d32:	1858      	adds	r0, r3, r1
 8006d34:	42a0      	cmp	r0, r4
 8006d36:	d10b      	bne.n	8006d50 <_free_r+0x74>
 8006d38:	6820      	ldr	r0, [r4, #0]
 8006d3a:	4401      	add	r1, r0
 8006d3c:	1858      	adds	r0, r3, r1
 8006d3e:	4282      	cmp	r2, r0
 8006d40:	6019      	str	r1, [r3, #0]
 8006d42:	d1dd      	bne.n	8006d00 <_free_r+0x24>
 8006d44:	6810      	ldr	r0, [r2, #0]
 8006d46:	6852      	ldr	r2, [r2, #4]
 8006d48:	605a      	str	r2, [r3, #4]
 8006d4a:	4401      	add	r1, r0
 8006d4c:	6019      	str	r1, [r3, #0]
 8006d4e:	e7d7      	b.n	8006d00 <_free_r+0x24>
 8006d50:	d902      	bls.n	8006d58 <_free_r+0x7c>
 8006d52:	230c      	movs	r3, #12
 8006d54:	602b      	str	r3, [r5, #0]
 8006d56:	e7d3      	b.n	8006d00 <_free_r+0x24>
 8006d58:	6820      	ldr	r0, [r4, #0]
 8006d5a:	1821      	adds	r1, r4, r0
 8006d5c:	428a      	cmp	r2, r1
 8006d5e:	bf04      	itt	eq
 8006d60:	6811      	ldreq	r1, [r2, #0]
 8006d62:	6852      	ldreq	r2, [r2, #4]
 8006d64:	6062      	str	r2, [r4, #4]
 8006d66:	bf04      	itt	eq
 8006d68:	1809      	addeq	r1, r1, r0
 8006d6a:	6021      	streq	r1, [r4, #0]
 8006d6c:	605c      	str	r4, [r3, #4]
 8006d6e:	e7c7      	b.n	8006d00 <_free_r+0x24>
 8006d70:	bd38      	pop	{r3, r4, r5, pc}
 8006d72:	bf00      	nop
 8006d74:	20000208 	.word	0x20000208

08006d78 <_malloc_r>:
 8006d78:	b570      	push	{r4, r5, r6, lr}
 8006d7a:	1ccd      	adds	r5, r1, #3
 8006d7c:	f025 0503 	bic.w	r5, r5, #3
 8006d80:	3508      	adds	r5, #8
 8006d82:	2d0c      	cmp	r5, #12
 8006d84:	bf38      	it	cc
 8006d86:	250c      	movcc	r5, #12
 8006d88:	2d00      	cmp	r5, #0
 8006d8a:	4606      	mov	r6, r0
 8006d8c:	db01      	blt.n	8006d92 <_malloc_r+0x1a>
 8006d8e:	42a9      	cmp	r1, r5
 8006d90:	d903      	bls.n	8006d9a <_malloc_r+0x22>
 8006d92:	230c      	movs	r3, #12
 8006d94:	6033      	str	r3, [r6, #0]
 8006d96:	2000      	movs	r0, #0
 8006d98:	bd70      	pop	{r4, r5, r6, pc}
 8006d9a:	f000 f857 	bl	8006e4c <__malloc_lock>
 8006d9e:	4a21      	ldr	r2, [pc, #132]	; (8006e24 <_malloc_r+0xac>)
 8006da0:	6814      	ldr	r4, [r2, #0]
 8006da2:	4621      	mov	r1, r4
 8006da4:	b991      	cbnz	r1, 8006dcc <_malloc_r+0x54>
 8006da6:	4c20      	ldr	r4, [pc, #128]	; (8006e28 <_malloc_r+0xb0>)
 8006da8:	6823      	ldr	r3, [r4, #0]
 8006daa:	b91b      	cbnz	r3, 8006db4 <_malloc_r+0x3c>
 8006dac:	4630      	mov	r0, r6
 8006dae:	f000 f83d 	bl	8006e2c <_sbrk_r>
 8006db2:	6020      	str	r0, [r4, #0]
 8006db4:	4629      	mov	r1, r5
 8006db6:	4630      	mov	r0, r6
 8006db8:	f000 f838 	bl	8006e2c <_sbrk_r>
 8006dbc:	1c43      	adds	r3, r0, #1
 8006dbe:	d124      	bne.n	8006e0a <_malloc_r+0x92>
 8006dc0:	230c      	movs	r3, #12
 8006dc2:	6033      	str	r3, [r6, #0]
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	f000 f842 	bl	8006e4e <__malloc_unlock>
 8006dca:	e7e4      	b.n	8006d96 <_malloc_r+0x1e>
 8006dcc:	680b      	ldr	r3, [r1, #0]
 8006dce:	1b5b      	subs	r3, r3, r5
 8006dd0:	d418      	bmi.n	8006e04 <_malloc_r+0x8c>
 8006dd2:	2b0b      	cmp	r3, #11
 8006dd4:	d90f      	bls.n	8006df6 <_malloc_r+0x7e>
 8006dd6:	600b      	str	r3, [r1, #0]
 8006dd8:	50cd      	str	r5, [r1, r3]
 8006dda:	18cc      	adds	r4, r1, r3
 8006ddc:	4630      	mov	r0, r6
 8006dde:	f000 f836 	bl	8006e4e <__malloc_unlock>
 8006de2:	f104 000b 	add.w	r0, r4, #11
 8006de6:	1d23      	adds	r3, r4, #4
 8006de8:	f020 0007 	bic.w	r0, r0, #7
 8006dec:	1ac3      	subs	r3, r0, r3
 8006dee:	d0d3      	beq.n	8006d98 <_malloc_r+0x20>
 8006df0:	425a      	negs	r2, r3
 8006df2:	50e2      	str	r2, [r4, r3]
 8006df4:	e7d0      	b.n	8006d98 <_malloc_r+0x20>
 8006df6:	428c      	cmp	r4, r1
 8006df8:	684b      	ldr	r3, [r1, #4]
 8006dfa:	bf16      	itet	ne
 8006dfc:	6063      	strne	r3, [r4, #4]
 8006dfe:	6013      	streq	r3, [r2, #0]
 8006e00:	460c      	movne	r4, r1
 8006e02:	e7eb      	b.n	8006ddc <_malloc_r+0x64>
 8006e04:	460c      	mov	r4, r1
 8006e06:	6849      	ldr	r1, [r1, #4]
 8006e08:	e7cc      	b.n	8006da4 <_malloc_r+0x2c>
 8006e0a:	1cc4      	adds	r4, r0, #3
 8006e0c:	f024 0403 	bic.w	r4, r4, #3
 8006e10:	42a0      	cmp	r0, r4
 8006e12:	d005      	beq.n	8006e20 <_malloc_r+0xa8>
 8006e14:	1a21      	subs	r1, r4, r0
 8006e16:	4630      	mov	r0, r6
 8006e18:	f000 f808 	bl	8006e2c <_sbrk_r>
 8006e1c:	3001      	adds	r0, #1
 8006e1e:	d0cf      	beq.n	8006dc0 <_malloc_r+0x48>
 8006e20:	6025      	str	r5, [r4, #0]
 8006e22:	e7db      	b.n	8006ddc <_malloc_r+0x64>
 8006e24:	20000208 	.word	0x20000208
 8006e28:	2000020c 	.word	0x2000020c

08006e2c <_sbrk_r>:
 8006e2c:	b538      	push	{r3, r4, r5, lr}
 8006e2e:	4c06      	ldr	r4, [pc, #24]	; (8006e48 <_sbrk_r+0x1c>)
 8006e30:	2300      	movs	r3, #0
 8006e32:	4605      	mov	r5, r0
 8006e34:	4608      	mov	r0, r1
 8006e36:	6023      	str	r3, [r4, #0]
 8006e38:	f7f9 fd5e 	bl	80008f8 <_sbrk>
 8006e3c:	1c43      	adds	r3, r0, #1
 8006e3e:	d102      	bne.n	8006e46 <_sbrk_r+0x1a>
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	b103      	cbz	r3, 8006e46 <_sbrk_r+0x1a>
 8006e44:	602b      	str	r3, [r5, #0]
 8006e46:	bd38      	pop	{r3, r4, r5, pc}
 8006e48:	20001b2c 	.word	0x20001b2c

08006e4c <__malloc_lock>:
 8006e4c:	4770      	bx	lr

08006e4e <__malloc_unlock>:
 8006e4e:	4770      	bx	lr

08006e50 <_init>:
 8006e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e52:	bf00      	nop
 8006e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e56:	bc08      	pop	{r3}
 8006e58:	469e      	mov	lr, r3
 8006e5a:	4770      	bx	lr

08006e5c <_fini>:
 8006e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e5e:	bf00      	nop
 8006e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e62:	bc08      	pop	{r3}
 8006e64:	469e      	mov	lr, r3
 8006e66:	4770      	bx	lr
